<apex:page standardController="SSign__SSEnvelope_Document__c" extensions="SSign.SSCreateSig" docType="html-5.0" 
showHeader="false" sidebar="false"
standardStylesheets="false" action="{!refreshEI}">

<head>
  <META HTTP-EQUIV="CACHE-CONTROL" CONTENT="NO-CACHE" />
  <!-- <link href='https://fonts.googleapis.com/css?family=Great+Vibes' rel='stylesheet'></link> -->
  <link href="https://fonts.googleapis.com/css?family=Alex+Brush|Petit+Formal+Script|Dynalight|Great+Vibes|Cedarville+Cursive|Playball|Mr+Dafoe|Parisienne|Pinyon+Script|Rochester|Cedarville+Cursive|Homemade+Apple|La+Belle+Aurore|Allura|Felipa|Qwigley|Arizonia|Aguafina+Script|Meddon|&display=swap" rel="stylesheet"></link>
  <link href="https://code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css" rel="stylesheet" type="text/css" />
</head>

<apex:form >
<apex:includeScript value="{!URLFOR($Resource.SSign__SSign, '/resources/js/moment.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__SSign, '/resources/js/moment-timezone-with-data.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__SSign, '/resources/js/html2canvas.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__SSign, '/resources/js/SigWebTablet.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__SSign, '/resources/js/preformatting.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__SSign_jq,'')}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__signaturePadJS)}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__jQueryUI, '/jquery-ui/jquery-ui.js')}" />
<apex:stylesheet value="{!URLFOR($Resource.SSign__signature,'/signature/jquery.signaturepad.css')}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__signature,'/signature/json2.min.js')}" />
<apex:inputHidden value="{!csd.signerName}" id="csdSignerName"/>
<script src="{!URLFOR($Resource.SSign_Pad,'')}"/>
<script src='/canvas/sdk/js/publisher.js'></script>
<!-- ==============================================================================================================-->
<!-- START RENDERED ON PAGE LOAD JS                                                                                -->
<!-- ==============================================================================================================-->
<apex:outputPanel id="ssign_js">
<apex:outputPanel rendered="{!NOT(hasErrors)}" >
<script type="text/javascript">
j$ = jQuery.noConflict();

var usingTopazForSigningProcess = "{!usingTopazForSigningProcess}" === "true";

/* ========================================================================= */
/* START JS: Loading Div                                                     */
/* ========================================================================= */
function getLoadingDiv() {
  return j$('#loading-div');
}
function getLoadingDivSpinner() {
  return j$('#loading-div-spinner');
}
function getSSignItemContainer() {
  return j$('#ssign-item-message-container');
}
function hideLoadingDiv() {
  hideSSignItemsContainer();
  $loadingDiv = getLoadingDiv();
  $loadingDiv.hide();
}
function showLoadingDiv() {
  $loadingDiv = getLoadingDiv();
  $loadingDiv.css('background-color', 'white');
  $loadingDiv.show();
  getLoadingDivSpinner().show();
}
function showLoadingDivTransparent() {
  if (zeroClick) {
    $loadingDiv = getLoadingDiv();
    $loadingDiv.css('background-color', 'transparent');
    $loadingDiv.show();
  } else {
    $loadingDiv = getLoadingDiv();
    $loadingDiv.css('background-color', 'rgb(255, 255, 255, 0.5)');
    $loadingDiv.show();
    getLoadingDivSpinner().show();
  }
}
function showSSignItemsContainer() {
  $ssignItemsContainer = getSSignItemContainer();
  if ($ssignItemsContainer !== null && $ssignItemsContainer !== undefined) {
    $ssignItemsContainer.show();
  }
}
function hideSSignItemsContainer() {
  $ssignItemsContainer = getSSignItemContainer();
  if ($ssignItemsContainer !== null && $ssignItemsContainer !== undefined) {
    $ssignItemsContainer.hide();
  }
}
/* ========================================================================= */
/* END JS: Loading Div                                                       */
/* ========================================================================= */

/* ========================================================================= */
/* START JS: Signature Pad                                                   */
/* ========================================================================= */
var SPAD_FADE_TIME = 200;        
var TOOLBAR_LOGO_FADE_TIME = 100;
var signaturePadHidden = true;
var declineWindowHidden = true;
var printWindowHidden = true;

function showSignaturePad () {
  showSignaturePad(false, null, null);
}

function currentInputFieldTextToSignature () {
  return j$('div[ssign-input-field="' + currentInputFieldID + '"]').attr('textToSignature') === 'true';
}

function getCurrentInputFieldValue () {
  return j$('div[ssign-input-field="' + currentInputFieldID + '"]').attr('curValue');
}

function showSignaturePad (positionAtSignHere, top, left) {
  /* Disabled "place signature pad on top of SIGN HERE when user clicks SIGN HERE image"
  feature for now; signature pad disappears if clicking a SIGN HERE that is on any page
  other than the first */
  /*if (positionAtSignHere) {
    // If a "SIGN HERE" image is clicked, place the signature pad
    // on top of the "SIGN HERE" image
    j$("#signature-pad").css('top', top);
    j$("#signature-pad").css('left', left);
    j$("#signature-pad").css('bottom', '');
    j$("#signature-pad").css('margin-left', '');
    j$("#signature-pad").css('margin-right', '');
  } else {
    // If "Show Signature Pad" is clicked on the toolbar, position
    // signature pad just above the toolbar
    j$("#signature-pad").css('top', '');
    j$("#signature-pad").css('left', '');
    j$("#signature-pad").css('bottom', '128px');
    j$("#signature-pad").css('margin-left', 'auto');
    j$("#signature-pad").css('margin-right', 'auto');
  }*/
  if (usingTopazForSigningProcess) {
    initiateTopazPad();
  }

  hideToolbarLogo();
  /* disableSubmitIfDataMissing must be called as an oncomplete of show() so that
  the Add Signature buttons will be re-enabled appropriately once the signature
  pad has finished reloading */
  j$("#signature-pad").show("fade", function() { disableSubmitIfDataMissing(); }, SPAD_FADE_TIME);
  jquerySignatureImages().css('cursor', 'default');
  signaturePadHidden = false;
    
  // If someone saves a signature then returns to this signature
  // later, this will save whatever that current name is.
  // By default, it adds the name already provided.
  var signerNameInput = j$('#signer-name');
  if (getCurrentInputFieldValue() !== '') {
    signerNameInput.prop('value', getCurrentInputFieldValue());
  } else if (j$('[id$="csdSignerName"]').val() !== '') {
    signerNameInput.prop('value', j$('[id$="csdSignerName"]').val());
  }

}

function hideSignaturePad(fade) {
  showToolbarLogo();
  if (fade) {
    j$("#signature-pad").hide("fade", {}, SPAD_FADE_TIME);
  } else {
    j$("#signature-pad").hide();
  }
  jquerySignatureImages().css('cursor', 'pointer');
  var isTextToSignature = 'false';
  if (j$('#text-to-signature-checkbox').is(':checked')) {
    isTextToSignature = 'true';
  }

  var curSSignField = j$('div[ssign-input-field="' + currentInputFieldID + '"]');
  curSSignField.attr('textToSignature', isTextToSignature);
  curSSignField.attr('curValue', j$('#signer-name').val());
  signaturePadHidden = true;
}

function jquerySignatureImages() {
  return j$(".ssign-sign-here-img");
}

function jquerySignaturePad() {
  return j$("#signature-pad");
}

function previewPDF() {

}
/* ========================================================================= */
/* END JS: Signature Pad                                                     */
/* ========================================================================= */

/* ========================================================================= */
/* START JS: Toolbar                                                         */
/* ========================================================================= */
function hideToolbarLogo() {
  hideToolbarLogo(true);
}

function hideToolbarLogo(fade) {
  /*if (fade) {
    j$("#ssign-toolbar-logo").fadeOut(TOOLBAR_LOGO_FADE_TIME);
    //j$("#ssign-toolbar-logo").hide("scale", { percent: 10 }, TOOLBAR_LOGO_FADE_TIME);
  } else {
    j$("#ssign-toolbar-logo").hide();
  }*/
  //As per Deni we do not want to hide this ever
  //j$("#ssign-toolbar-logo").hide();
}

function showToolbarLogo() {
  j$('#ssign-toolbar-logo').fadeIn(TOOLBAR_LOGO_FADE_TIME);
  //j$('#ssign-toolbar-logo').show("scale", { percent: 10 }, TOOLBAR_LOGO_FADE_TIME);
}

function toggleDeclineWindow() {
  if (declineWindowHidden) {
    showDeclineWindow();
  } else {
    hideDeclineWindow(true);
  }
}

function showDeclineWindow() {
  hideSignaturePad();
  hideToolbarLogo();
  j$("#decline-window").show("fade", {}, SPAD_FADE_TIME);
  //j$("#ssign-toolbar-show-decline-btn").html('Cancel Decline Signature');
  jquerySignatureImages().css('cursor', 'default');
  declineWindowHidden = false;
}

function hideDeclineWindow(fade) {
  showToolbarLogo();
  if (fade) {
    j$("#decline-window").hide("fade", {}, SPAD_FADE_TIME);
  } else {
    j$("#decline-window").hide();
  }
  j$("#ssign-toolbar-show-decline-btn").html("{!tm['Decline Signature']}");
  jquerySignatureImages().css('cursor', 'pointer');
  declineWindowHidden = true;
}

function fixDeclineWindowHeight(reasonMessage) {
  var thisDiv = document.getElementsByClassName('s-sign-decline ssign_lightning_sys')[0];
  var calculatedHeight = document.querySelector('.s-sign-decline--body .description').offsetHeight + 275;
  if (reasonMessage === 'provide') {
    calculatedHeight += document.getElementById('provide-reason').offsetHeight;
  }
  else if (reasonMessage === 'too-long') {
    calculatedHeight += document.getElementById('decline-reason-too-long').offsetHeight;
  }
  thisDiv.style.height = calculatedHeight + 'px';
}

function fixPrintWindowHeight() {
  var thisDiv = document.getElementsByClassName('s-sign-print ssign_lightning_sys')[0];
  var calculatedHeight = document.querySelector('.s-sign-print--body .description').offsetHeight + 175;
  thisDiv.style.height = calculatedHeight + 'px';
}

function togglePrintWindow() {
  if (printWindowHidden) {
    showPrintWindow();
  } else {
    hidePrintWindow(true);
  }
}

function showPrintWindow() {
  hideSignaturePad();
  hideToolbarLogo();
  j$("#print-window").show("fade", {}, SPAD_FADE_TIME);
  jquerySignatureImages().css('cursor', 'default');
  printWindowHidden = false;
}

function hidePrintWindow(fade) {
  showToolbarLogo();
  if (fade) {
    j$("#print-window").hide("fade", {}, SPAD_FADE_TIME);
  } else {
    j$("#print-window").hide();
  }
  j$("#ssign-toolbar-show-print-btn").html("{!tm['Print']}");
  jquerySignatureImages().css('cursor', 'pointer');
  printWindowHidden = true;
}

function getSSignInputFieldDivSelectors() {
  return j$('div[ssign-input-field]', j$('.sspdf-page-image-container'));
}

var currentInputFieldID = null;
var $currentInputField = null;
var lastUsedInputFieldID = null;
function prevInputField() {
  var prevIndex = ssignInputFieldIDs.indexOf(currentInputFieldID) - 1;
  if (prevIndex < 0) prevIndex = ssignInputFieldIDs.length - 1;
  finishNextPrevInputField(prevIndex);
}
function nextInputField() {
  if (!alertedNoInputsRemaining && !requiredInputsMissing(false)) {
    alert('{!tm["All required inputs have been completed. You may now submit!"]}')
    alertedNoInputsRemaining = true;
  }

  var nextIndex = ssignInputFieldIDs.indexOf(currentInputFieldID) + 1;
  if (nextIndex >= ssignInputFieldIDs.length) nextIndex = 0;
  finishNextPrevInputField(nextIndex);
}
function finishNextPrevInputField(newIndex) {
  setCurrentInputFieldID(ssignInputFieldIDs[newIndex]);
  setCurrentSSignInputField();
}
function setCurrentInputFieldID(newID) {
  lastUsedInputFieldID = currentInputFieldID;
  currentInputFieldID = newID;
}
function setCurrentSSignInputField() {
  selectCurrentInputField();
  setViewingInputMessage();
  var currentInputField = ssignInputFields[currentInputFieldID];
  var currentFieldType = currentInputField['fieldType'];
  if (!isSignatureOrInitials(currentFieldType)) {
    hideSignaturePad();
  } else {
    refreshSignatureOrInitialImage();
    if (signaturePadHidden){
      showSignaturePad();
    }
  }

  if (currentInputFieldTextToSignature() || {!useTextToSigByDefault}) {
    j$('#text-to-signature-checkbox').prop('checked', true);
  } else {
    j$('#text-to-signature-checkbox').prop('checked', false);
  }
  if ({!ei.SSTemplate__r.Prevent_Signature_Method_Toggle__c}) {
    j$('[id$="text-to-signature-panel"]').prop('hidden', true);
  }

  checkboxAction();

  if(j$('#text-to-signature-checkbox').is(':checked') && (j$("#signer-name").val() !== "")){
    j$('.add-signature-btn').prop('disabled', false);
  }
  //if (!j$('#text-to-signature-checkbox').is(':checked') && sPadNotClicked == false) {
  disableSubmitIfDataMissing();
  //}
  if ($currentInputField) {
    j$('html, body').animate({
      scrollTop: $currentInputField.offset().top - 100
    }, 200);
  }
}
function refreshSignatureOrInitialImage() {
  /* Load last signature or initials image into signature pad as appropriate.
  e.g. if the user just added a signature to the document,
  and now they selected an Initials input field, this will 
  clear the signature from the pad and fill the pad with
  the last captured Initials image */

  // Don't reset sPadNotClicked if the current input field is the same type as the previous one
  var resetSPadNotClicked = false;
  if (lastUsedInputFieldID !== null) {
    resetSPadNotClicked = ssignInputFields[currentInputFieldID].fieldType !== ssignInputFields[lastUsedInputFieldID].fieldType;
  }
  sPadClear(resetSPadNotClicked);

  var lastImgDataURL = lastImgDataURLDict[getCurrentFieldType()];
  if (lastImgDataURL !== null) {
    var canvas = document.getElementById('sPad');
    var ctx = canvas.getContext('2d');
    var img = new Image;
    var $sPad = j$('#sPad');
    var width = parseFloat($sPad.width());
    var height = parseFloat($sPad.height());
    img.onload = function(){
      ctx.drawImage(img,0,0,width,height);
    };
    img.src = lastImgDataURL;
    j$('.add-signature-btn').prop('disabled', true);
  }
  var typeAdjusted;
  if (getCurrentFieldType() === 'signature') typeAdjusted = "{!tm['Signature']}"; 
  else if (getCurrentFieldType() === 'initials') typeAdjusted = "{!tm['Initials']}";
  j$('#draw-signature-here').text("{!tm['Draw Signature Here']}".replace("{!tm['Signature']}", typeAdjusted));
  j$('#add-signature-simple-btn').text("{!tm['Add Signature']}".replace("{!tm['Signature']}", typeAdjusted));
  j$('#add-signature-and-next-btn').text("{!tm['Add Signature & Go To Next Input']}".replace("{!tm['Signature']}", typeAdjusted));
  j$('#add-signature-and-submit-btn').text("{!tm['Add Signature & Submit Document']}".replace("{!tm['Signature']}", typeAdjusted));
}

function setViewingInputMessage() {
  var inputNumOneIndexed = ssignInputFieldIDs.indexOf(currentInputFieldID) + 1;
  var newMsg = "{!tm['Viewing input']} " + inputNumOneIndexed + ' / ' + ssignInputFieldIDs.length;
  j$('#ssign-toolbar-viewing-input-message').text(newMsg);
}
function selectCurrentInputField() {
  getSSignInputFieldDivSelectors().each(function() {
    var $thisInput = j$(this);
    var $dragDropDiv;
    var hasDragDropDiv = false;
    if ('{!isPDFUploadTemplate || isOneOff}' === 'true') {
      $dragDropDiv = $thisInput.find('.draggable-dropped');
      hasDragDropDiv = $dragDropDiv[0] !== undefined;
    }
    if ($thisInput.attr('ssign-input-field') === currentInputFieldID) {
      if (hasDragDropDiv) {
        $dragDropDiv.css('border-style', 'solid');
        $dragDropDiv.css('border-width', '2px');
      } else {
        $thisInput.css('border', '2px solid #29AAE2');
        $thisInput.css('border-radius', '4px');
      }
      $currentInputField = $thisInput;
      focusOnElement($thisInput);
    }
    else {
      if (hasDragDropDiv) {
        $dragDropDiv.css('border-style', 'dashed');
        $dragDropDiv.css('border-width', '1px');
      } else {
        $thisInput.css('border', '');
      }
    }
  });
}
function focusOnElement(element) {
  try {
    element.children()[0].focus();
  } catch(err) {}
}

function isSignatureOrInitials(fieldType) {
  return fieldType === 'signature' || fieldType === 'initials';
}
function getCurrentFieldType() {
  return ssignInputFields[currentInputFieldID]['fieldType'];
}
/* ========================================================================= */
/* END JS: Toolbar                                                           */
/* ========================================================================= */

/* ========================================================================= */
/* START JS: Load PDF                                                        */
/* ========================================================================= */
var isMobileOrTablet = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
    || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4));

/* Removed. Increments percentage rapidly 1% at a time from percentageOld to percentageNew.
The code works, but you can only see the effect on desktop (which doesn't matter because
updateLoadingPercentage only applies to mobile); the processing freezes up on mobile
due to the heavy PDF image processing and as a result it's the same visual effect as
just directly updating the loading percentage from percentageOld to percentageNew
without displaying any values in-between the two percentage values */
/*var percentageOld = 0;
var currentPercentage = 0;
function updateLoadingPercentage(percentageNew) {
  if (isMobileOrTablet) {
    j$('#loading-div-message').show();
    getLoadingDivSpinner().hide();
    if (percentageNew - percentageOld <= 0) {
      updateLoadingPercentageHelper(percentageNew);
    } else {
      for (var i = 1; i < (percentageNew - percentageOld); i += 1) {
        (function(ind, percentForUpdate) {
            setTimeout(
              function() {
                if (percentForUpdate - currentPercentage > 0) {
                  updateLoadingPercentageHelper(percentForUpdate); 
                  currentPercentage = percentForUpdate;
                }
              }, 
              ind * 100
            );
        })(i, percentageOld + i);
      }
    }
    percentageOld = percentageNew;
  }
}

function updateLoadingPercentageHelper(percentageNew) {
  j$('#loading-div-message-percentage').text(percentageNew + '%');
}*/

const MIN_PAGES_FOR_UPDATE_PERCENTAGE = 20;
var isLargePDF = false;
function updateLoadingPercentage(percentageNew) {
  if (isMobileOrTablet || isLargePDF) {
    j$('#loading-div-message-percentage').text(percentageNew + '%');
  }
}

function initializeLoadingPercentage() {
  j$('#loading-div-message').show();
  getLoadingDivSpinner().hide();
}

function initPDF() {
  if (isMobileOrTablet) {
    initializeLoadingPercentage();
  }
  getSSignInputFieldsForThisSigner();
}

var ssignInputFields;
function getSSignInputFieldsForThisSigner() {
  updateLoadingPercentage(15);
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SSCreateSig.getSSignInputFieldsJSON}',
    '{!ei.HashId__c}',
    function(result, event) {
      if(!!result && event.status) {
        ssignInputFields = JSON.parse(result);
        return getSavedResponses();
      } else {
        alert('Error in parsing S-Sign input fields: ' + event.message);
      } 
      //Sfdc.canvas.publisher.publish({name:"publisher.close",payload:{refresh:"true"}});
    },{escape: false}
  );
}

var savedResponses;
function getSavedResponses() {
  updateLoadingPercentage(15);
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SSCreateSig.getSavedResponses}',
    '{!ei.HashId__c}',
    function(result, event) {
      if(!!result && event.status) {
        savedResponses = JSON.parse(result);
        return getPreviousSignersResponsesHTML();
      } else {
        alert('Error in parsing S-Sign saved responses: ' + event.message);
      } 
      //Sfdc.canvas.publisher.publish({name:"publisher.close",payload:{refresh:"true"}});
    },{escape: false}
  );
}

var previousSignersResponsesHTML;
function getPreviousSignersResponsesHTML() {
  updateLoadingPercentage(23);
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SSCreateSig.getPreviousSignersResponsesHTML}',
    '{!ei.HashId__c}',
    function(result, event) {
        if(!!result && event.status) {
          previousSignersResponsesHTML = JSON.parse(result);
          if (shouldShowInfoBox()) {
            showInfoBox(true);
          } else {
            createPDFImagesAndPlaceClickableElements();
          }
        } else {
          alert('Error in getting previous signer\'s responses: ' + event.message);
        } 
      //Sfdc.canvas.publisher.publish({name:"publisher.close",payload:{refresh:"true"}});
    },{escape: false}
  );
  return
}

var downloadDocument;
var downloadFilename;
function downloadSignedDocument() {
  downloadDocument = '';
  showLoadingDivTransparent();
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SSCreateSig.getSignedDoc}',
    '{!ei.HashId__c}',
    '{!profileHashID}',
    function(result, event) {
      if(!!result && event.status) {
        var ssignDoc = JSON.parse(result);
        var chunkingMap = JSON.parse(ssignDoc.ssignDocBody);
        downloadFilename = ssignDoc.ssignDocName;
        downloadDocument += chunkingMap[0].VersionData;
        if (chunkingMap[0].finalChunk !== true) {
          getDocument(ssignDoc.fileId, 1);
        } else {
          downloadDocumentHelper();
        }
      } else {
        alert('Error in downloading unsigned document: ' + event.message);
      } 
    },{escape: false}
  );
}


function downloadUnsignedDocument() {
  downloadDocument = '';
  showLoadingDivTransparent();
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SSCreateSig.getUnsignedDoc}',
    '{!ei.HashId__c}',
    '{!profileHashID}',
    function(result, event) {
      if(!!result && event.status) {
        var ssignDoc = JSON.parse(result);
        var chunkingMap = JSON.parse(ssignDoc.ssignDocBody);
        downloadFilename = ssignDoc.ssignDocName;
        downloadDocument += chunkingMap[0].VersionData;
        if (chunkingMap[0].finalChunk !== true) {
          getDocument(ssignDoc.fileId, 1);
        } else {
          downloadDocumentHelper();
        }
      } else {
        alert('Error in downloading unsigned document: ' + event.message);
      } 
    },{escape: false}
  );
}

function getDocument(fileId, chunk) {
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SSCreateSig.getDocumentInChunks}',
    fileId,
    chunk,
    function(result, event) {
        if(!!result && event.status) {
          var resultsMap = JSON.parse(result);
          downloadDocument += resultsMap[0].VersionData;
          if (resultsMap[0].finalChunk !== true) {
            resultsMap = null;
            getDocument(fileId, chunk + 1);
          } else {
            resultsMap = null;
            downloadDocumentHelper();
          }
        } else {
          alert('Error in retrieving PDF document: ' + event.message);
        } 
      //Sfdc.canvas.publisher.publish({name:"publisher.close",payload:{refresh:"true"}});
    },{escape: false}
  );
}

function downloadDocumentHelper() {
  var element = document.createElement('a');
  var blob = dataURItoBlob('data:application/pdf;base64,' + downloadDocument);
  var url = URL.createObjectURL(blob);
  element.setAttribute('href', url);
  element.setAttribute('download', downloadFilename);
  element.style.display = 'none';
  document.body.appendChild(element);

  element.click();

  document.body.removeChild(element);
  hideLoadingDiv();
}

function shouldShowInfoBox() {
  return signerAlreadySigned() || "{!CONTAINS(ei.SSign__Status__c, 'Voided')}" === 'true' || "{!CONTAINS(ei.SSign__Status__c, 'Printed')}" === 'true' || "{!CONTAINS(ei.SSign__Status__c, 'Declined')}" === 'true' || "{!CONTAINS(ei.SSign__Status__c, 'Expired')}" === 'true' || "{!CONTAINS(ei.SSign__Status__c, 'Invalidated')}" === 'true';
}

function signerAlreadySigned() {
  if ('{!ei.Active_Signer__c == null}' === 'true' && "{!ei.Active_Signer_Email__c != 'LEGACY'}" === 'true' ) {
    return true;
  }
  for (var inputFieldID in ssignInputFields) {
    if (ssignInputFields.hasOwnProperty(inputFieldID)) {
      if (ssignInputFields[inputFieldID]['profile'] === '{!csd.profileName}' && !previousSignersResponsesHTML.hasOwnProperty(inputFieldID)) {
        return false;
      }
    }
  }
  return true;
}


function createPDFImagesAndPlaceClickableElements() {
  updateLoadingPercentage(34);
  pdfContent = '';
  getPDFBase64('{!ei.hashID__c}', 0);
}

var pdfContent;

function getPDFBase64(hashId, chunk) {
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SSCreateSig.getPDFBase64}',
    hashId,
    chunk,
    function(result, event) {
        if(!!result && event.status) {
          var resultsMap = JSON.parse(result);
          if (resultsMap[0].finalChunk !== true) {
            pdfContent += resultsMap[0].VersionData;
            resultsMap = null;
            getPDFBase64(hashId, chunk + 1);
          } else {
            pdfContent += resultsMap[0].VersionData;
            resultsMap = null;
            readPDFAndStartProcessing('data:application/pdf;base64,' + pdfContent);
          }
        } else {
          alert('Error in retrieving PDF document: ' + event.message);
        } 
      //Sfdc.canvas.publisher.publish({name:"publisher.close",payload:{refresh:"true"}});
    },{escape: false}
  );
}

function readPDFAndStartProcessing(pdfBase64) {
  updateLoadingPercentage(42);
  file = dataURItoBlob(pdfBase64);
  fileReader = new FileReader();
  fileReader.readAsArrayBuffer(file);
  fileReader.onload = function(ev) {
    var pdf = PDFJS.getDocument(fileReader.result);
    return pdf.then(
      function getPdf(pdf) {
        pdfGetPageHelper(pdf);
      }, function(error){
        console.log(error);
      }
    );
  };
}

/* The bulk of the processing time on mobile occurs in this function, especially
during the parts where we render the page to a canvas.
Hence we use updateLoadingPercentage() a lot here to update the loading percentage 
frequently enough to give the user a sensation of progress throughout the 10+ seconds of loading time */
function pdfGetPageHelper(pdf) {
  var currentPageLoading = 0;
  var loadingPercentagePagesStart = 60;
  function updateLoadingPercentageForPages() {
    var numTimesThisFunctionIsReferencedInTheCode = 4;
    currentPageLoading += 1 / numTimesThisFunctionIsReferencedInTheCode;
    if (isMobileOrTablet) {
      updateLoadingPercentage( parseInt((currentPageLoading / maxPages) * (100 - loadingPercentagePagesStart) ) + loadingPercentagePagesStart );
    } else if (maxPages > MIN_PAGES_FOR_UPDATE_PERCENTAGE) {
      updateLoadingPercentage( parseInt((currentPageLoading / maxPages) * 100));
    }
  }
  
  updateLoadingPercentage(loadingPercentagePagesStart);
  var maxPages = pdf.pdfInfo.numPages;
  if (maxPages >= MIN_PAGES_FOR_UPDATE_PERCENTAGE) {
    isLargePDF = true;
    initializeLoadingPercentage();
  }
  var iteratePagesPromises = []; // collecting all page promises
  for (var j = 1; j <= maxPages; j++) {
    var page = pdf.getPage(j);

    var pagesData = [];
    iteratePagesPromises.push(page.then(function(page) { // add page promise
      // Increase this to increase the resolution of the PDF page images
      var scale = 2.5;
      var mobileScale = '{!ei.SSTemplate__r.Mobile_PDF_Scale__c}';
      if (!mobileScale) {
        mobileScale = '1.0';
      }
      if (isMobileOrTablet) scale = parseFloat(mobileScale);
      
      var viewport = page.getViewport(scale);

      // Prepare canvas using PDF page dimensions
      var canvas = document.createElement('canvas');
      var context = canvas.getContext('2d');

      // Later on maybe create canvas elements via JS and set their width's based
      // on the document's actual page width
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      // Render PDF page into canvas context
      updateLoadingPercentageForPages();
      var task = page.render({canvasContext: context, viewport: viewport});
      updateLoadingPercentageForPages();
      return task.promise.then(function(maxPages){
        updateLoadingPercentageForPages();
        var pageImageDataURL = canvas.toDataURL('image/png');
        updateLoadingPercentageForPages();
        pagesData[page.pageIndex + 1] = {"page" : page, "pageImageDataURL" : pageImageDataURL};
      });
    }));
  }

  /* Getting a PDF page is asynchronous. Creating a canvas and placing a PDF page on it in
  order to convert that page to an image is also asynchronous. Hence, we do all of that above
  and, for each PDF page, we store the pdf.js page object and the pageImageDataURL in an object
  at the (page_number+1)-th index of the pagesData array. We then use Promise.all in order to operate
  on this array once all asynchronous operations have completed. The main two operations are
  1) add PDF page image to DOM in the correct spot, and 2) find location of [[[SIGNATURE]]] 
  and overlay SIGN HERE image on top of it */
  Promise.all(iteratePagesPromises).then(function() {
    j$('#loading-div-message').hide();
    
    for (var j = 1; j <= maxPages; j++) {
      var page = pagesData[j]["page"];
      var pageImageDataURL = pagesData[j]["pageImageDataURL"];

      var pageImageContainer = j$('<div class="sspdf-page-image-container" id="sspdf-page-image-container-' + j + '">');
      pageImageContainer.appendTo('#sspdf-pages-container');
      var imgPage = j$('<img onclick="hideSignaturePad()" class="sspdf-page-image undraggable" unselectable="on">');
      imgPage.attr('src', pageImageDataURL);
      imgPage.appendTo(pageImageContainer);

      if('{!isOneOff}' !== 'true'){
        placeSignHereImagesStandard(page, pageImageContainer);
      }
    }
    //We want to iterate through the inputFields if it's Drag and Drop
    //So that we can determine which page to place the sign heres on
    if('{!isOneOff}' === 'true'){
      placeSignHereImagesPDFUploadOneOff();
    }

    /* Use Promise.all in order to run initializeAfterPDFImagesDone() a single time once
    all asynchronous page.getTextContent().then() calls have completed (initializeAfterPDFImagesDone() operates
    on the images that are inserted in placeSignHereImages() so we must wait for all
    asynchronous page.getTextContent().then() calls to finish before running it) */
    Promise.all(placeImagesPromises).then(function() {
      initializeAfterPDFImagesDone();
      notifyNonexistentIDs();
    });

  });
}

function notifyNonexistentIDs() {
  if (Array.isArray(nonexistentIDs) && nonexistentIDs.length) {
    var strToAlert = 'The following S-Sign Field(s) has/have ID(s) which do not exist:\n';
    for (let id = 0; id < nonexistentIDs.length; id++) {
      strToAlert += 'ID: ' + nonexistentIDs[id] + '\n';
    }
    strToAlert += 'This can be caused by [[SSIGN_INPUT ID=N]] being referenced in the template body but not having a field with ID=N defined in the S-Sign Fields panel of the template editor.';
    alert(strToAlert);
  }
}

function getNumOptionsToShow (numOptionsToShow, optionsArrLength) {
  // Default will be 4 options shown for multi picklists (or if there are less than 4, that length)
  if (numOptionsToShow !== undefined && numOptionsToShow !== null
      && numOptionsToShow !== '' && !isNaN(numOptionsToShow)) {
        return numOptionsToShow;
  } else if (optionsArrLength < 4) {
    return '' + optionsArrLength;
  } else {
    return '4';
  }
}

function getPicklistHTML (isMultiPicklist, optionsList, numOptionsToShow, inputFieldID, defaultValue) {
  optionsList = optionsList.replace(/##NEW_LINE##/g, '\n');
  var ssignInputField = ssignInputFields[inputFieldID];
  var textWidth = (ssignInputField['textWidth'] != null && ssignInputField['textWidth'] !== "") ? 'width: ' + ssignInputField['textWidth'].escapeHTML()  : 'max-width: 150px;';
  var optionsArr = optionsList.split('\n');
  var multipleStr = isMultiPicklist ? ' multiple' : '';
  var sizeStr = isMultiPicklist ? getNumOptionsToShow(numOptionsToShow, optionsArr.length) : '1';
  var styleStr = isMultiPicklist ? '' : textWidth;
  var picklistHTML = '<select style="' + styleStr + '" id="ssign-picklist-' + inputFieldID +
                     '" name="picklist" size="' + sizeStr + '"' + multipleStr + '>';
  var defaultValueList;
  if (defaultValue != null) {
    defaultValueList = defaultValue.split(';');
  }
  for (let i = 0; i < optionsArr.length; i++) {
    option = optionsArr[i].trim();
    var value = option;
    var label = option;
    if (option.includes('{!FIELD_BASED_PICKLIST_VALUE_LABEL_SPLITTER}')) {
      var valueAndLabel = option.split('{!FIELD_BASED_PICKLIST_VALUE_LABEL_SPLITTER}');
      if (valueAndLabel.length != 2) {
        alert('ERROR WITH S-SIGN FIELD BASED PICKLIST: ' + inputFieldID);
      }
      value = valueAndLabel[0];
      label = valueAndLabel[1];
    }
    var selected = '';
    if (defaultValueList != null && defaultValueList.indexOf(value) > -1) {
      selected = 'selected';
    }
    var valueDoubleQuoteEscaped = value.replace(/"/g,'&quot;');
    picklistHTML += '<option write-back-value="' + valueDoubleQuoteEscaped + '" ' + selected + '>' + label + '</option>';
  }
  picklistHTML += '</select>';
  return picklistHTML;
}

function getFieldBasedPicklistHTML (fieldBasedPicklist, numMultiPicklistOptions, inputFieldID, defaultValue) {
  // TODO: Get the write back to merge field, the if isMultiPicklist, and the actual options
  // fieldBasedPicklist => T/F|mergeField|picklistOptions
  var fieldBasedPicklistArr = fieldBasedPicklist.split('{!FIELD_BASED_PICKLIST_STRING_SPLITTER}');
  if (fieldBasedPicklistArr.length !== 3) {
    alert('ERROR WITH S-SIGN FIELD BASED PICKLIST: ' + inputFieldID);
    return '';
  }
  var writeToField = fieldBasedPicklistArr[0];
  var optionsList = fieldBasedPicklistArr[1];
  var isMultiPicklist = fieldBasedPicklistArr[2] === 'true';
  return getPicklistHTML(isMultiPicklist, optionsList, numMultiPicklistOptions, inputFieldID, defaultValue);
}

var __entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
};

String.prototype.escapeHTML = function() {
    return String(this).replace(/[&<>"'\/]/g, function (s) {
        return __entityMap[s];
    });
}

function getHtmlToAdd(inputFieldID){
  var ssignInputField = ssignInputFields[inputFieldID];
  var fieldType = ssignInputField['fieldType'];
  //We're going to add the textDefault as a value if it is null anyway. But, we want it to be
  //a blank string rather than null for when we add it as the value attribute to the text field
  //ABM
  var savedResponse = savedResponses[inputFieldID];
  var defaultValue = (ssignInputField['defaultValue'] != null) ? ssignInputField['defaultValue'].escapeHTML()  : "";
  var inputFieldGroup = (ssignInputField['inputFieldGroup'] != null) ? ssignInputField['inputFieldGroup'].escapeHTML()  : "";
  var preformatting =  (ssignInputField['preformatting'] != null) ? ssignInputField['preformatting'].escapeHTML()  : "";
  var currencyName =  (ssignInputField['currencyName'] != null) ? ssignInputField['currencyName'].escapeHTML()  : "";
  var textHeight = (ssignInputField['textHeight'] != null) ? ssignInputField['textHeight'].escapeHTML()  : "";
  var textWidth = (ssignInputField['textWidth'] != null) ? ssignInputField['textWidth'].escapeHTML()  : "";
  var additionalStyle = (ssignInputField['additionalStyle'] != null) ? ssignInputField['additionalStyle'].escapeHTML()  : "";
  var height = ssignInputField['height'];
  var width = ssignInputField['width'];
  var profileName = ssignInputField['profile'];
  var mergeFieldValue = ssignInputField['mergeFieldValue'];
  var mergeFieldStyle = ssignInputField['mergeFieldStyle'];
  var textBasedPicklist = ssignInputField['textBasedPicklist'];
  var isMultiPicklist = ssignInputField['isMultiPicklist'];
  var fieldBasedPicklist = ssignInputField['fieldBasedPicklist'];
  var numMultiPicklistOptionsShown = (ssignInputField['numMultiPicklistOptionsShown'] != null) ? ssignInputField['numMultiPicklistOptionsShown'].escapeHTML() : "";
  var disabled = ssignInputField['disabled'];
  var allowNewLines = ssignInputField['allowNewLines'];
  /* format="..." on an <input type="date"> will not change how the date is rendered on SSCreateSig
  as that is always determined by the user's locale. However, it is required to format the date
  properly based on the template settings prior to sending it to the backend upon submit. */
  var formatting = (ssignInputField['dateFormat'] != null) ? ssignInputField['dateFormat'].escapeHTML().replaceAll('&#x2F;', '/') : "";
  var htmlToAdd = null;
  var style = '';
  if (fieldType === 'signature' || fieldType === 'initials') {
    var styleHeight = height;
    if (styleHeight == null) {
      styleHeight = '{!signatureImageHeight}'; // default 64px
    }
    style = ' style="height: ' + styleHeight + 'px;" ';
  }
  if (profileName === '{!csd.profileName}') { 
    if (!ssignInputFieldIDs.includes(inputFieldID)) {
      ssignInputFieldIDs.push(inputFieldID);
      if (ssignInputFieldIDs.length > 1) {
        j$('#ssign-toolbar-next-input-btn').show();
        j$('#ssign-toolbar-prev-input-btn').show();
      }
    }
    var ssignInputHTMLContents = '';
    if (fieldType === 'signature' || fieldType === 'initials') {
      if (savedResponse != null) {
        ssignInputHTMLContents = savedResponse;
      } else {
        numSignatureInputsRemaining += 1;
        var actionVerb = 'Sign';
        if (fieldType === 'initials') {
          actionVerb = 'Initial';
        }
        var signatureStyle = '';
        if (width != null && height != null) {

          // copied from SSCreateRequest3.page
          var fontToHeightRatio = 0.45;
          if (fieldType == 'initials') {
            fontToHeightRatio = 0.35;
          }
          var fontSize = height * fontToHeightRatio;
          if (fontSize > 16) fontSize = 16;
          
          signatureStyle = ' style="width: ' + width + 'px; height: ' + height + 'px; font-size: ' + fontSize + 'px;" ';
        }
        // Sign Here / Initial Here div
        ssignInputHTMLContents = '<div ' + signatureStyle + ' class="draggable-dropped draggable-dropped--signature ssign_lightning_sys">' + actionVerb + ' Here <span class="required-text">*</span></div>';
      }
    } else if (fieldType === 'text') {
      var textValue = (savedResponse != null) ? savedResponse : defaultValue;
      var placeholder = ' ';
      var currencyStyle = '';
      if (currencyName != '') {
        placeholder = getCurrencyFormatHTML(currencyName, inputFieldID);
        currencyStyle = 'text-align: right;';
      } else if (preformatting != '') {
        placeholder = getPlaceholderHTML(preformatting, inputFieldID);
      }
      var styleHeight = 'height:15px;';
      var styleWidth = 'width:127px;';
      if (textHeight !== '') {
        styleHeight = "height:" + textHeight + ';';
      }
      if (textWidth !== '') {
        styleWidth = 'width:' + textWidth + ';';
      } 
      var textStyle = 'style="font-family:arial;resize:none;' + currencyStyle + styleHeight + styleWidth + '"';
      if (allowNewLines) {
        ssignInputHTMLContents = '<textarea type="text" ' + placeholder + textStyle + '>' + textValue + '</textarea>';
      } else {
        ssignInputHTMLContents = '<input type="text" value="' + textValue + '"' + placeholder + textStyle + '/>';
      }
    } else if (fieldType === 'checkbox') {
      var checked;
      if (savedResponse != null) {
        checked = savedResponse === 'true';
      } else {
        checked = defaultValue === 'true';
      }
      ssignInputHTMLContents = '<input class="input-checkbox" type="checkbox" ';
      if (checked) ssignInputHTMLContents += 'checked="true" ';
      if (additionalStyle) ssignInputHTMLContents += 'style="' + additionalStyle + '" ';
      ssignInputHTMLContents += '/>';
    } else if (fieldType === 'date') {
      if (disabled === 'true' || disabled === true) {
        ssignInputHTMLContents = '<input type="date" format="' + formatting + '" value="' + getCurrentDate() + '" disabled ';
      } else if (savedResponse) {
        ssignInputHTMLContents = '<input type="date" format="' + formatting + '" value="' + formatDateForValueAttribute(savedResponse, formatting) + '"';
      } else if (defaultValue) {
        ssignInputHTMLContents = '<input type="date" format="' + formatting + '" value="' + defaultValue + '"';
      } else {
        ssignInputHTMLContents = '<input type="date" format="' + formatting + '"';
      }
      var styleForDate = '';
      if (textHeight) {
        styleForDate += ' height:' + textHeight + ';';
      }
      if (textWidth) {
        styleForDate += ' width:' + textWidth + ';';
      }
      if (additionalStyle) {
         styleForDate += additionalStyle;
      }
      if (styleForDate) {
        ssignInputHTMLContents += ' style="' + styleForDate + '" />';
      } else {
        ssignInputHTMLContents += ' />';
      }
    } else if (fieldType === 'text-based-picklist') {
      ssignInputHTMLContents = getPicklistHTML(isMultiPicklist, textBasedPicklist, numMultiPicklistOptionsShown, inputFieldID, defaultValue);
    } else if (fieldType === 'field-based-picklist') {
      ssignInputHTMLContents = getFieldBasedPicklistHTML(fieldBasedPicklist, numMultiPicklistOptionsShown, inputFieldID, defaultValue);
    }
    
    //We want to add style to this div if it has been provided
    //for which we need to make a special case, as we need to edit the style of the div
    if(fieldType === 'mergeField'){
      htmlToAdd = '<div class="ssign-input-field sspdf-html-overlay" style="'
                  + mergeFieldStyle + '" ssign-input-field="' 
                  + inputFieldID + '" textToSignature="false" curValue="" >'
                  + mergeFieldValue + '</div>';
    }
    else {
      htmlToAdd = '<div class="ssign-input-field sspdf-html-overlay" ssign-input-field="' 
        + inputFieldID + '" textToSignature="false" curValue="" ' + style + '>' + ssignInputHTMLContents + '</div>';
    }
  } else {
    /* prevSignerHTML is undefined if this field hasn't been captured yet, 
    i.e. the person the field was assigned to has not signed yet */
    var prevSignerHTML = previousSignersResponsesHTML[inputFieldID];
    if (prevSignerHTML !== undefined) {
      htmlToAdd = '<div class="sspdf-html-overlay previous-signer-response"'
        + 'title="This value was provided by the signer assigned to the role of ' + profileName + '" ' + style + '>' 
        + prevSignerHTML + '</div>';
    }
  }
  return htmlToAdd;
}

function useCustomSignHereText() {
  return "{!tm['SIGN HERE']}" !== "SIGN HERE" || "{!tm['INITIAL HERE']}" !== "INITIAL HERE";
}

function getSignHereImg(fieldType) {
  var imgName; var textDiv;
  if (useCustomSignHereText()) {
    imgName = 'sign_here_transparent_no_text';
    var imgText;
    if (fieldType === 'signature') imgText = "{!tm['SIGN HERE']}";
    else if (fieldType === 'initials') imgText = "{!tm['INITIAL HERE']}";
    else alert('unsupported fieldType');
    textDiv = '<div class="sign-here-text-div">' + imgText + '</div>';
  }
  else {
    textDiv = '';
    if (fieldType === 'signature') imgName = 'sign_here_transparent';
    else if (fieldType === 'initials') imgName = 'initial_here_transparent';
    else alert('unsupported fieldType');
  }

  var imgUrl = '{!siteDomainNoEndSlash}/resource/1542136076000/{!namespacePrefix}SSign_Images/' + imgName + '.png';
  return getSignHereImgHTML(imgUrl) + textDiv;
}

function getSignHereImgHTML(imgUrl) {
  return '<img height="64" class="ssign-sign-here-img undraggable" src="' + imgUrl + '" unselectable="on" />';
}

function getPlaceholderHTML(preformatting, inputFieldID) {
  return 'placeholder="' + preformatting + '"'
          + ' onkeyup="checkPreformattingText(event, \'' + preformatting + '\', \'' + inputFieldID + '\', undefined);"'
          + ' class="preformatted-text-input-' + inputFieldID + '" ';
}

function checkPreformattingText(event, format, inputFieldID) {
  let input = j$('.preformatted-text-input-' + inputFieldID)[0];
  checkPreformatting(event, format, input, undefined);
}

function getCurrencyFormatHTML(currencyName, inputFieldID) {
  let currencyNameToFormatMap = JSON.parse('{!currencyNameToFormatMapJSON}');
  return 'placeholder="' + currencyNameToFormatMap[currencyName] + '"'
          + ' onkeyup="formatCurrency(event, \'' + currencyName + '\', \'' + inputFieldID + '\');"'
          + ' onfocus="removeCurrencySymbolRight(\'' + inputFieldID + '\');"'
          + ' onblur="addCurrencySymbolRightAndFixDecimals(\'' + currencyName + '\', \'' + inputFieldID + '\');"'
          + ' class="currency-text-input-' + inputFieldID + '" ';
}

function formatCurrency(event, currencyName, inputFieldID) {
  let input = j$('.currency-text-input-' + inputFieldID)[0];
  let inputVal = input.value;
  let currencyNameToFormatMap = JSON.parse('{!currencyNameToFormatMapJSON}');
  let currencyFormat = currencyNameToFormatMap[currencyName];
  let currencyNameToSymbolMap = JSON.parse('{!currencyNameToSymbolMapJSON}');
  let currencySymbol = currencyNameToSymbolMap[currencyName];

  let thousandsChar = currencyFormat[currencyFormat.indexOf('###') - 1];
  let decimalChar = currencyFormat[currencyFormat.indexOf('###') + 3];
  let symbolToLeft = currencyFormat.indexOf(currencySymbol) == 0;
  let includeSpace = symbolToLeft ? currencyFormat[currencyFormat.indexOf('#' + thousandsChar) - 1] == ' ' : currencyFormat[currencyFormat.indexOf(decimalChar + '##') + 3] == ' ';

  if (inputVal.length == 0) return;

  inputVal = removeCurrencySymbolLeft(inputVal.replaceAll(thousandsChar, ''), currencySymbol, symbolToLeft, includeSpace);
  if (((event.keyCode || event.charCode) == 8) && !symbolToLeft) {
    inputVal = inputVal.substring(0, inputVal.length - 1);
  }  
  let i = inputVal.length - 1;
  if (inputVal.includes(decimalChar)) {
    if (inputVal.indexOf(decimalChar) < inputVal.length - 3) {
      inputVal = inputVal.substring(0, inputVal.indexOf(decimalChar) + 3);
    }
    i = inputVal.indexOf(decimalChar) - 1;
  }
  let count = 0;
  for (i; i >= 0; --i) {
    if (inputVal[i] >= '0' && inputVal[i] <= '9') {
      ++count;
      if (count == 4) {
        inputVal = inputVal.substring(0, i + 1) + thousandsChar + inputVal.substring(i + 1, inputVal.length);
        count = 1;
      }
    }
    else if (inputVal[i] != thousandsChar) {
      inputVal = inputVal.substring(0, i) + inputVal.substring(i + 1, inputVal.length);
    }
    else if (inputVal[i] == thousandsChar) {
      count = 0;
    }
  }
  input.value = addCurrencySymbolLeft(inputVal, currencySymbol, symbolToLeft, includeSpace);
}

function removeCurrencySymbolLeft(inputVal, currencySymbol, symbolToLeft, includeSpace) {
  if (inputVal.length == 0) return '';
  if (!symbolToLeft) return inputVal;

  let spaceStr = includeSpace ? ' ' : '';
  let symbolStr = currencySymbol + spaceStr;
  return inputVal.replace(symbolStr, '');
}

function addCurrencySymbolLeft(inputVal, currencySymbol, symbolToLeft, includeSpace) {
  if (inputVal.length == 0) return '';
  if (!symbolToLeft) return inputVal;

  let spaceStr = includeSpace ? ' ' : '';
  return currencySymbol + spaceStr + inputVal;
}

function removeCurrencySymbolRight(inputFieldID) {
  let input = j$('.currency-text-input-' + inputFieldID)[0];
  let inputVal = input.value;
  if (inputVal.length == 0) return;

  if (inputVal[0] >= '0' && inputVal[0] <= '9') {
    let i = inputVal.length - 1;
    while (inputVal[i] < '0' || inputVal[i] > '9') {
      --i;
    }
    input.value = inputVal.substring(0, i + 1);
  }
}

function addCurrencySymbolRightAndFixDecimals(currencyName, inputFieldID) {
  let input = j$('.currency-text-input-' + inputFieldID)[0];
  let inputVal = input.value;
  if (inputVal.length == 0) return;

  let currencyNameToFormatMap = JSON.parse('{!currencyNameToFormatMapJSON}');
  let currencyFormat = currencyNameToFormatMap[currencyName];
  let currencyNameToSymbolMap = JSON.parse('{!currencyNameToSymbolMapJSON}');
  let currencySymbol = currencyNameToSymbolMap[currencyName];
  let symbolToLeft = currencyFormat.indexOf(currencySymbol) == 0;

  let thousandsChar = currencyFormat[currencyFormat.indexOf('###') - 1];
  let decimalChar = currencyFormat[currencyFormat.indexOf('###') + 3];
  let includeSpace = currencyFormat[currencyFormat.indexOf(decimalChar + '##') + 3] == ' ';
  let spaceStr = includeSpace ? ' ' : '';

  if (!inputVal.includes(decimalChar)) {
    inputVal = inputVal + decimalChar + '00';
  }
  else if (inputVal.indexOf(decimalChar) > inputVal.length - 2) {
    inputVal = inputVal + '00';
  }
  else if (inputVal.indexOf(decimalChar) > inputVal.length - 3) {
    inputVal = inputVal + '0';
  }

  if (symbolToLeft) {
    input.value = inputVal;
  }
  else {
    input.value = inputVal + spaceStr + currencySymbol;
  }
}

// Re-formats the date into YYYY-MM-DD so that the date inputs can properly save
function formatDateForValueAttribute(inputDate, formatting) {
  let splitChar = '';
  if (formatting.includes('/')) splitChar = '/';
  else if (formatting.includes('.')) splitChar = '.';
  else if (formatting.includes('-')) splitChar = '-';

  let formattingSplit = formatting.split(splitChar);
  let order = [];
  if (formattingSplit[0] == 'yyyy') order.push(0);
  else if (formattingSplit[1] == 'yyyy') order.push(1);
  else order.push(2);

  if (formattingSplit[0] == 'mm') order.push(0);
  else if (formattingSplit[1] == 'mm') order.push(1);
  else order.push(2);

  if (formattingSplit[0] == 'dd') order.push(0);
  else if (formattingSplit[1] == 'dd') order.push(1);
  else order.push(2);

  let inputDateSplit = inputDate.split(splitChar);
  return inputDateSplit[order[0]] + '-' + inputDateSplit[order[1]] + '-' + inputDateSplit[order[2]];
}

function placeFieldHtml(pageImageContainer, htmlToAdd, x, y, metric) {
  var ssignInputHTML = j$(htmlToAdd);
  ssignInputHTML.css('left', x + metric);
  ssignInputHTML.css('top', y + metric);
  ssignInputHTML.appendTo(pageImageContainer);
}

var ssignInputFieldIDs = [];
var placeImagesPromises = [];
var numSignatureInputsRemaining = 0;

function placeSignHereImagesPDFUploadOneOff(){
  for (var inputFieldID in ssignInputFields) {
    if (ssignInputFields.hasOwnProperty(inputFieldID)) {
      var htmlToAdd = getHtmlToAdd(inputFieldID);

      /* Ideally these remain 0.
      Before adjusting these, note that SSCreateSig.page and SSCreateRequest3.page
      use the same HTML structure to represent page images and field overlays, so in theory,
      no offset should be required. If it is required, that means there is probably a deeper
      issue like extra padding on one page that isn't on the other, or differences in page 
      dimensions (width/height), and this should be addressed directly rather than using offsets 
      as a workaround. You can use the Computed Styles view in Chrome's dev tools to see if there
      are any size/padding/margin differences between these two VF pages. */
      var offsetX = 0;
      var offsetY = 0;

      var x = ssignInputFields[inputFieldID].coordinateX + offsetX;
      var y = ssignInputFields[inputFieldID].coordinateY + offsetY;
      //The pageImageContainer in our case will be based on the pageNumber recorded
      //on SSPDFUpload (after Dragged and Dropped).
      var pageImageContainer = j$('#sspdf-page-image-container-' 
                                  + ssignInputFields[inputFieldID].pageNumber);
      //alert(x + '|' + y + '|' + pageImageContainer);
      placeFieldHtml(pageImageContainer, htmlToAdd, x, y, 'px');
    }
  }
}

var nonexistentIDs = [];
function placeSignHereImagesStandard(page, pageImageContainer) {
  placeImagesPromises.push(page.getTextContent().then(function (textContent) {
    return textContent.items.forEach(function (textItem, index, items) {
      var isLegacySSignInput = textItem.str.toLowerCase().includes('[[signature]]');
      if (textItem.str.startsWith('[[SSIGN_INPUT') || isLegacySSignInput) {
        var idToCheck = textItem.str;
        if (textItem.str === '[[SSIGN_INPUT') {
          if (index + 1 < items.length) {
            idToCheck = items[index + 1].str;
          }
        }
        var inputFieldID;
        if (isLegacySSignInput) inputFieldID = '1';
        else inputFieldID = substringBetween(idToCheck, 'ID=', ']]');
        var ssignInputField = ssignInputFields[inputFieldID];
        if (ssignInputField != null) {
          var fieldType = ssignInputField['fieldType'];
          var profileName = ssignInputField['profile'];
          var mergeFieldValue = ssignInputField['mergeFieldValue'];
          var mergeFieldStyle = ssignInputField['mergeFieldStyle'];
          var additionalStyle = ssignInputField['additionalStyle'];
          var htmlToAdd = null;
          var htmlToAdd = getHtmlToAdd(inputFieldID);

          if (htmlToAdd !== null) {
            var viewport = page.getViewport(1);
            var tx = PDFJS.Util.transform(viewport.transform, textItem.transform);
            // the matrix returns PDF Units, not pixels. PDF Units are 1/72 inches.
            var x = tx[4] / 72;
            var y = (tx[5] / 72);

            // arbitrary height/width adjustments
            if ('{!isPDFUploadTemplate}' === 'true') {
              y -= (14.34666666 / 96.0);
            }
            
            if (isSignatureOrInitials(fieldType) && '{!isPDFUploadTemplate}' === 'false') {
              y -= .53;
            }
            else if (fieldType === 'text' ||
                    fieldType === 'text-based-picklist' ||
                    fieldType === 'field-based-picklist') { 
              y -= .05;
              if ('{!NOT(isPDFUploadTemplate)}' === 'true') {
                x += .1;
              }
            }
            else if (fieldType === 'checkbox') {
              
              var cssMap = cssToMap(additionalStyle);
              
              if (cssMap['height']) {
                y -= checkboxAdjustment(cssMap['height']);
              } else {
                y -= .035;
              }
              if ('{!NOT(isPDFUploadTemplate)}' === 'true') {
                x += .1;
              }
            }

            placeFieldHtml(pageImageContainer, htmlToAdd, x, y, 'in');
          }
        }
        else {
          nonexistentIDs[nonexistentIDs.length] = inputFieldID;
        }
      }
    });
  }));
}

function cssToMap(cssStyle) {
  var cssMap = {};
  if (cssStyle) {
    var attributes = cssStyle.split(';');
    console.log(attributes);
    for (var i = 0; i < attributes.length; i++) {
      if (attributes[i]) {
        var attribute = attributes[i].split(':');
        cssMap[attribute[0]] = attribute[1];
      }
    }
  }
  return cssMap;
}

function checkboxAdjustment(height) {
  var height = parseFloat(height.replace('px', ''));
  // convert to inches
  height = height * 0.0104166667;
  return height * .4;
}


// Originally returned a File. However the File() constructor is not supported in 
// IE or Edge. Now returns a Blob which seems to work in all browsers.
// Source: https://stackoverflow.com/questions/12168909/blob-from-dataurl
function dataURItoBlob(dataURI) {
  // convert base64 to raw binary data held in a string
  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
  var byteString = atob(dataURI.split(',')[1]);

  // separate out the mime component
  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]

  // write the bytes of the string to an ArrayBuffer
  var ab = new ArrayBuffer(byteString.length);

  // create a view into the buffer
  var ia = new Uint8Array(ab);

  // set the bytes of the buffer to the correct values
  for (var i = 0; i < byteString.length; i++) {
      ia[i] = byteString.charCodeAt(i);
  }

  // write the ArrayBuffer to a blob, and you're done
  var blob = new Blob([ab], {type: mimeString});
  return blob;
}

function substringBetween(str, start, end) {
  return str.substring(
    str.lastIndexOf(start) + start.length, 
    str.lastIndexOf(end)
  );
}

// 'string'.startsWith('some other string') method polyfill for IE
if (!String.prototype.startsWith) {
  Object.defineProperty(String.prototype, 'startsWith', {
    value: function(search, pos) {
      return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
  });
}

// 'string'.includes('some other string') method polyfill for IE
if (!String.prototype.includes) {
  Object.defineProperty(String.prototype, 'includes', {
    value: function(search, start) {
      if (typeof start !== 'number') start = 0;
      if (start + search.length > this.length) return false;
      else return this.indexOf(search, start) !== -1;
    }
  })
}

// ['a', 'b', 'c'].includes('b')
if (!Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    value: function(valueToFind, fromIndex) {

      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      // 1. Let O be ? ToObject(this value).
      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      var len = o.length >>> 0;

      // 3. If len is 0, return false.
      if (len === 0) {
        return false;
      }

      // 4. Let n be ? ToInteger(fromIndex).
      //    (If fromIndex is undefined, this step produces the value 0.)
      var n = fromIndex | 0;

      // 5. If n ≥ 0, then
      //  a. Let k be n.
      // 6. Else n < 0,
      //  a. Let k be len + n.
      //  b. If k < 0, let k be 0.
      var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

      function sameValueZero(x, y) {
        return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));
      }

      // 7. Repeat, while k < len
      while (k < len) {
        // a. Let elementK be the result of ? Get(O, ! ToString(k)).
        // b. If SameValueZero(valueToFind, elementK) is true, return true.
        if (sameValueZero(o[k], valueToFind)) {
          return true;
        }
        // c. Increase k by 1. 
        k++;
      }

      // 8. Return false
      return false;
    }
  });
}

function showInfoBox(showAlreadySignedMessage) {
  if (showAlreadySignedMessage) {
    if ("{!(csd.isLastSigner || ei.Active_Signer__c == null) && NOT(isZeroClick)}" === 'true') {
      j$('#last-signer-msg').text("{!tm['You have already signed this document.']}" + " {!tm['All signers have finished signing.']}");
    } else if ("{!CONTAINS(ei.SSign__Status__c, 'Declined')}" === 'true') {
      j$("#info-box-decline-msg").html("{!tm['This E-Signature request has been declined and is no longer able to be signed.']}");
    } else {
      j$('#non-last-signer-msg').text("{!tm['You have already signed this document.']}");
    }
    j$('#auto-signing-message').hide();
    j$('#auto-signed-last-signer').show();
  }
  j$('#info-box-popup').show();
  hideLoadingDiv();
}

/* ========================================================================= */
/* START JS: Load PDF                                                        */
/* ========================================================================= */

/* ========================================================================= */
/* START JS: Signature Pad                                                   */
/* ========================================================================= */
var signaturePad;
var canvas;
var rId = '{!JSENCODE($CurrentPage.parameters.rId)}';
var iId = '{!JSENCODE($CurrentPage.parameters.iId)}';
var requestMethod = 'inPerson';
if (rId){
 requestMethod='remote'; 
}
var hashId = '{!ei.hashID__c}';

var signatureData;
/*Sfdc.canvas.publisher.subscribe({name: "publisher.showPanel",
  onData:function(e) {
    Sfdc.canvas.publisher.publish({name:"publisher.setValidForSubmit", payload:"true"});
  }});

Sfdc.canvas.publisher.subscribe({ 
  name:"publisher.post",
  onData: function(e){
    uploadSignature();
  }    
})*/

function onLoad(){
  if (window.jQuery) {  
    //alert("jQuery loaded");
  }
  else{
   alert ("jquery not loaded");
  }
  canvas = document.getElementById('sPad');
  resizeCanvas();
  signaturePad = new SignaturePad(canvas);
}

function sPadClear(resetSPadNotClicked) {
  if (resetSPadNotClicked) {
    sPadNotClicked = true;
  }
  signaturePad.clear();
  j$('#text-as-signature-span').html('');
  if (j$('#text-to-signature-checkbox').is(':checked')) {
    //j$("#signer-name").val('');
    j$('#signature-name-in-font').text('');
    j$('#listbox-unique-id').css('display', 'none');
  }
  setDisableSubmitIfDataMissing();

  if (usingTopazForSigningProcess) {
    clearTopazPad();
    j$("#signer-name").val('');
  }
}

function getTimestamp() {
  var datetimeNow = moment(new Date());
  var timezone = moment.tz.guess();
  var timestamp = datetimeNow.tz(timezone).format('YYYY-MM-DD h:m:s z');
  return timestamp;
}

function getTimestampFull() {
  var datetimeNow = moment(new Date());
  var timezone = moment.tz.guess();
  var timestamp = datetimeNow.tz(timezone).format('YYYY-MM-DD hh:mm:ss z');
  return timestamp;
}

function resizeCanvas() {
  var ratio =  Math.max(window.devicePixelRatio || 1, 1);
  canvas.width = canvas.offsetWidth * ratio;
  canvas.height = canvas.offsetHeight * ratio;
  canvas.getContext("2d").scale(ratio, ratio);
//             signaturePad.clear(); 
}

var count = 0;
function divToImg(div_id, lastSignature){
  var currentInputFieldIDLocal = currentInputFieldID;
  html2canvas(document.getElementById(div_id), {
      // This allows for scale, making the rendered image not blurry!
      scale: 2,
      onrendered: function (canvas) {
          dataURL = canvas.toDataURL("image/png",1.0);
          var $signatureInput = j$('div[ssign-input-field="' + currentInputFieldIDLocal + '"]');
          $signatureInput.find('img').attr('src', dataURL);
      }
  }).then(function() {
    if (lastSignature) {
      submitSignatures();
    }
  });
}

function addSignature() {
  addSignature(null);
}

function nameEntered () {
  var signerName = j$("#signer-name").val();
  return signerName !== undefined && signerName != null && signerName != "";
}

var lastImgDataURLDict = { 'signature' : null, 'initials' : null };
function addSignature(type) {
  if (!nameEntered()) {
    j$("#no-name-added-error-msg").css("visibility", "visible");
    return false;
  }
  j$("#no-name-added-error-msg").css("visibility", "hidden");
  lastImgDataURLDict[ssignInputFields[currentInputFieldID]['fieldType']] = signaturePad.toDataURL('image/png');
  var $signatureInput = j$('div[ssign-input-field="' + currentInputFieldID + '"]');
  var $signatureImg = $signatureInput.find('img');
  if ($signatureImg[0] === undefined) {
    $signatureInput.empty(); // Remove "Sign Here" div
    $signatureInput.append(getSignHereImgHTML('')); // Add image with empty src
    $signatureImg = $signatureInput.find('img'); // Get img selector
  }
  if(j$('#text-to-signature-checkbox').is(':checked')) {
    setTextAsSignatureSpanAsSignerName();
    if (type == 'submit') {
      divToImg('text-as-signature', true);
    }
    else {
      divToImg('text-as-signature', false);
    }
    //$currentInputField.find('img').attr('src', divToImg('text-as-signature'));
  }
  else{
    //var signaturePadClone = signaturePad.cloneNode(true);
    //var signaturePadClone = document.createElement('canvas');
    //var cloneContext = signaturePadClone.getContext('2d');
    //signaturePadClone.width = document.getElementById("sPad").width * 3;
    //signaturePadClone.height = document.getElementById("sPad").height * 3;
    //cloneContext.scale(2,2);
    //cloneContext.drawImage(document.getElementById("sPad"), 0, 0, document.getElementById("sPad").width * 2, document.getElementById("sPad").height * 2);
    $signatureImg.attr('src', signaturePad.toDataURL());
    /*$signatureImg.attr('width', '{!signatureImageWidth}');*/
    var height = ssignInputFields[currentInputFieldID].height;
    if (height != null) {
      $signatureImg.attr('height', height + 'px');
    } else {
      $signatureImg.attr('height', '{!signatureImageHeight}');
    }
  }
  $signatureInput.attr('signer-name-provided', j$("#signer-name").val());
  $signatureInput.attr('signature-provided', 'true');
  $signatureInput.attr('timestamp', getTimestampFull());
  if (useCustomSignHereText()) {
    // remove the div that contains the translation for SIGN HERE or INITIAL HERE
    $signatureInput.find('div').remove();
  }
  hideSignaturePad(true);

  if (usingTopazForSigningProcess) {
    resetTopazPad();
  }

  numSignatureInputsRemaining = 0;
  j$('.ssign-input-field').each(function() {
    var $inputFieldInLoop = j$(this);
    var inputFieldID = $inputFieldInLoop.attr('ssign-input-field');
    if (isSignatureOrInitials(ssignInputFields[inputFieldID]['fieldType'])) {
      if ($inputFieldInLoop.attr('signature-provided') !== 'true' && savedResponses[inputFieldID] == null) {
        numSignatureInputsRemaining += 1;
      }
    }
  });
  toggleAddSignatureGoNextWithSubmitDoc();
  
  return true;
}

function addSignatureAndGoToNextInput() {
  if (!addSignature()) {
    return;
  }
  nextInputField();
}

function addSignatureAndSubmitSignedDocument() {
  if (!addSignature('submit')) {
    return;
  }
  if (!j$('#text-to-signature-checkbox').is(':checked')) {
    submitSignatures();
  }
}

function toggleAddSignatureGoNextWithSubmitDoc() {
  if (numSignatureInputsRemaining <= 1) {
    if (numSignatureInputsRemaining == 0) {
      j$('#ssign-toolbar-submit-btn').css('background-color', '#0070D2');
      j$('#ssign-toolbar-submit-btn').css('color', 'white');
      j$('#ssign-toolbar-next-input-btn').css('background-color', 'white');
      j$('#ssign-toolbar-next-input-btn').css('color', '#0070D2');
    }
    j$('#add-signature-and-next-btn').hide();
    /* Mobile/Tablet sometimes doesn't display toolbar. In this case,
    provide user the option to submit the document via signature pad.
    Don't include on desktop as there is a Submit button in the toolbar. */
    j$('#add-signature-and-submit-btn').show();
  } else {
    j$('#add-signature-and-next-btn').show();
    j$('#add-signature-and-submit-btn').hide();
  }
}

/* Removed in 2.67. If a user tries submitting before providing all required inputs, 
they will be notified that required inputs remains, and the required inputs will have 
red text saying “Required” next to them. */
/*var alreadyAlertedAllRequiredInputsProvidedMsg = false;
function alertIfAllRequiredInputsProvided() {
  var requiredTextPresent = false;
  var allRequiredTextInputsProvided = true;
  for (var i = 0; i < ssignInputFieldIDs.length; i++) {
    var ssignInputField = ssignInputFields[ssignInputFieldIDs[i]];
    if (ssignInputField['required'] === true) {
      requiredTextPresent = true;
      if (ssignInputField.fieldType === 'text') {
        var val = j$('div[ssign-input-field="' + ssignInputFieldIDs[i] + '"] input').val();
        if (val === '' || val === 'undefined') {
          allRequiredTextInputsProvided = false;
        }
      } else {
        var val = j$('div[ssign-input-field="' + ssignInputFieldIDs[i] + '"] input').prop('checked');
        if (val === false) {
          allRequiredTextInputsProvided = false;
        }
      }
    }
  }
  if (requiredTextPresent && !alreadyAlertedAllRequiredInputsProvidedMsg) {
    if (allRequiredTextInputsProvided && (numSignatureInputsRemaining === 0)) {
      alreadyAlertedAllRequiredInputsProvidedMsg = true;
      alert('removed required message');
    }
  }
}*/

/* For translation values like tm['This has "quotes".'], we cannot put ' or "
around the string and we cannot escape the quote characters or else we get key errors.
We also cannot use ` in place of " or ' because Internet Explorer does not support 
this character to open/close strings. So for translation values that have double quotes,
we need to pass them into this function as a regex pattern like /this is a regex/ and
then this will convert that pattern to an ordinary string */
function getTranslationWithQuotes(translationValueRegex) {
  translationValueStr = String(translationValueRegex);
  return translationValueStr.substring(1, translationValueStr.length - 1);
}

var alertedNoInputsRemaining = false;

function requiredInputsMissing(isSubmit) {
  if (isSubmit === undefined) isSubmit = true;

  removeMessagesNextToInputFields();

  if (numSignatureInputsRemaining > 0) {
    if (isSubmit) {
      alert(getTranslationWithQuotes(/{!tm['There are still signature inputs that have not been signed. You can use the "Previous Input" and "Next Input" buttons to jump to these inputs.']}/));
    }
    return true;
  }
  var requiredInputsRemaining = false;
  var checkedInEachGroupMap = new Map();
  var totalInEachGroupMap = new Map();
  var numInputFieldGroups = '{!numInputFieldGroups}';
  var inputFieldGroups = unescapeIFGNameHTML(numInputFieldGroups, JSON.parse('{!JSENCODE(inputFieldGroupsJSON)}'));
  // NOTE: ssignInputFieldIDs is the IDs for this signer
  for (var i = 0; i < ssignInputFieldIDs.length; i++) {
    var ssignInputField = ssignInputFields[ssignInputFieldIDs[i]];
    if (ssignInputField['inputFieldGroup'] !== null && ssignInputField['inputFieldGroup'] !== 'None') {
      var inputFieldGroup = ssignInputField['inputFieldGroup'];
      var htmlInput = getInputFieldsFromId(ssignInputFieldIDs[i]);
      totalInEachGroupMap.set(ssignInputField['inputFieldGroup'], totalInEachGroupMap.get(ssignInputField['inputFieldGroup']) + 1);
      if (checkedInEachGroupMap.get(ssignInputField['inputFieldGroup']) === undefined) {
        checkedInEachGroupMap.set(ssignInputField['inputFieldGroup'], 0);
        totalInEachGroupMap.set(ssignInputField['inputFieldGroup'], 0);
      }
      if (htmlInput.prop('checked')) {
        checkedInEachGroupMap.set(ssignInputField['inputFieldGroup'], checkedInEachGroupMap.get(ssignInputField['inputFieldGroup']) + 1);
      }
    } else if (ssignInputField['required'] === true) {
      var htmlInput = getInputFieldsFromId(ssignInputFieldIDs[i]);
      var inputProvided = false;
      if (ssignInputField.fieldType === 'text' || ssignInputField.fieldType === 'date') {
        inputProvided = htmlInput.val() !== '' && htmlInput.val() !== 'undefined';
      } else if (ssignInputField.fieldType === 'checkbox') {
        inputProvided = htmlInput.prop('checked');
      }
      if (!inputProvided) {
        requiredInputsRemaining = true;
        if (isSubmit) {
          addMessagesNextToInputField(ssignInputFieldIDs[i], "{!tm['Required']}");
        }
      }
    }
  }
  if (isSubmit) {
    var ifgRequirementsErrorMessage = checkForIFGNotMeetingRequirements(numInputFieldGroups, checkedInEachGroupMap, inputFieldGroups, totalInEachGroupMap);
    if (ifgRequirementsErrorMessage !== '') {
      alert(ifgRequirementsErrorMessage);
      return true;
    }
    var preformattingErrorMessage = checkForPreformattingNotMeetingRequirements();
    if (preformattingErrorMessage !== '') {
      alert(preformattingErrorMessage);
      return true;
    }
    if (requiredInputsRemaining) {
      alert(getTranslationWithQuotes(/{!tm['Please provide all required inputs before submitting. You can use the "Previous" and "Next" buttons to jump to these inputs.']}/));
      return true;
    }
  }
  return false;
}

function checkForIFGNotMeetingRequirements(numInputFieldGroups, checkedInEachGroupMap, inputFieldGroups, totalInEachGroupMap) {
  //check if any input fields do not meet the requirements. If not, display error messages and return true
  var alertMessage = '';
  for (var i = 0; i < numInputFieldGroups; ++i) {
    var numberCheckedInGroup = checkedInEachGroupMap.get(inputFieldGroups[i].name);
    if (numberCheckedInGroup !== undefined) {
      let numCheckedIsRestricted = true;
      if (
        numberCheckedInGroup < inputFieldGroups[i].minRequired ||
        numberCheckedInGroup > inputFieldGroups[i].maxRequired
      ) {
        alertMessage += getIFGAlertMessage(numberCheckedInGroup, inputFieldGroups[i]);
      } else {
        numCheckedIsRestricted = false;
      }
      if (numCheckedIsRestricted) {
        var message = '';
        if (inputFieldGroups[i].customErrorMessage !== '') {
          message = inputFieldGroups[i].customErrorMessage;
        }
        else {
          message = getIFGErrorMessage(inputFieldGroups[i], totalInEachGroupMap.get(inputFieldGroups[i].name));
        }
        for (var j = 0; j < ssignInputFieldIDs.length; ++j) {
          var ssignInputField = ssignInputFields[ssignInputFieldIDs[j]];
          if (ssignInputField['inputFieldGroup'] !== undefined && ssignInputField['inputFieldGroup'] === inputFieldGroups[i].name && inputFieldGroups[i].suppressFormLevelErrors != true) {
            if (inputFieldGroups[i].customErrorMessageStyle !== undefined &&
                inputFieldGroups[i].customErrorMessageStyle !== '') {
              addMessagesNextToInputFieldStyled(ssignInputFieldIDs[j], message, inputFieldGroups[i].customErrorMessageStyle);
            }
            else {
              addMessagesNextToInputField(ssignInputFieldIDs[j], message);
            }
          }
        }
      }
    }
  }
  return alertMessage;
}

function getIFGAlertMessage(numberCheckedInGroup, inputFieldGroup) {
  if (inputFieldGroup.customWarningMessage !== null && inputFieldGroup.customWarningMessage !== '') {
    return inputFieldGroup.customWarningMessage;
  }
  else if (numberCheckedInGroup < inputFieldGroup.minRequired) {
    return 'You must have at least ' + inputFieldGroup.minRequired + ' input field(s) completed for input field group ' + inputFieldGroup.name + '.\n';
  } else if (numberCheckedInGroup > inputFieldGroup.maxRequired) {
    return 'You must have at most ' + inputFieldGroup.maxRequired + ' input field(s) completed for input field group ' + inputFieldGroup.name + '.\n';
  }
}

function unescapeIFGNameHTML(numInputFieldGroups, inputFieldGroups) {
  for (var i = 0; i < numInputFieldGroups; ++i) {
    inputFieldGroups[i].name = inputFieldGroups[i].name.replace('&#39;', "'").replace('&quot;', '"');
  }
  return inputFieldGroups;
}

function getIFGErrorMessage(inputFieldGroup, numInGroup) {
  var message = 'Group: ' + inputFieldGroup.name;
  if (inputFieldGroup.minRequired != 0 && inputFieldGroup.maxRequired != 0) {
    message += ' (minimum: ' + inputFieldGroup.minRequired + ', maximum: ' + inputFieldGroup.maxRequired + ')';
  } else if (inputFieldGroup.minRequired > 0) {
    message += ' (minimum: ' + inputFieldGroup.minRequired + ')';
  } else if (inputFieldGroup.maxRequired < numInGroup) {
    message += ' (maximum: ' + inputFieldGroup.maxRequired + ')';
  }
  return message;
}

function checkForPreformattingNotMeetingRequirements() {
  let alertMessage = '';
  let badFieldIDs = [];
  for (let i = 0; i < ssignInputFieldIDs.length; ++i) {
    let ssignInputField = ssignInputFields[ssignInputFieldIDs[i]];
    if (ssignInputField.fieldType === 'text' && ssignInputField.preformatting !== null && ssignInputField.currencyName == null) {
      let htmlInput = getInputFieldsFromId(ssignInputFieldIDs[i]);
      // checks if the field wasn't entirely completed
      if (htmlInput.val().length < ssignInputField.preformatting.length) {
        alertMessage += 'Preformatted text field with S-Sign Input Field ID ' + (i + 1) + ' not completed (highlighted in red).\n\n';
        if (!badFieldIDs.includes[i]) {
          badFieldIDs.push(i);
        }
      }
      // This should never be true as the input checks overfill, but just in case
      else if (htmlInput.val().length < ssignInputField.preformatting.length) {
        alertMessage += 'Preformatted text field with S-Sign Input Field ID ' + (i + 1) + ' has too many characters (highlighted in red).\n\n';
        if (!badFieldIDs.includes[i]) {
          badFieldIDs.push(i);
        }
      }
      // checks for non-digits where the format calls for one
      for (let j = 0; j < htmlInput.val().length; ++j) {
        if (ssignInputField.preformatting[j] == '#' && (htmlInput.val()[j] < '0' || htmlInput.val()[j] > '9')) {
          alertMessage += 'Preformatted text field with S-Sign Input Field ID ' + (i + 1) + ' expected 0-9 digit where there was not (highlighted in red).\nExpected format: ' + ssignInputField.preformatting + '\nYou entered: ' + htmlInput.val() + '\n\n';
          if (!badFieldIDs.includes[i]) {
            badFieldIDs.push(i);
          }
          break;
        }
      }
    }
  }
  for (let i = 0; i < ssignInputFieldIDs.length; ++i) {
    let htmlInput = getInputFieldsFromId(ssignInputFieldIDs[i]);
    if (badFieldIDs.includes(i)) {
      htmlInput.css('border', 'solid red 1px');
    }
    else {
      htmlInput.css('border', ' solid black 1px');
    }
  }
  return alertMessage;
}

function getInputFieldsFromId(inputFieldId) {
  return j$('div[ssign-input-field="' + inputFieldId + '"] input, div[ssign-input-field="' + inputFieldId + '"] textarea')
}

function submitInputFieldAnswers() {
  return submitInputFieldAnswers(true);
}

function submitInputFieldAnswers(isFinalSubmit) {
  if (isFinalSubmit === null || isFinalSubmit === undefined) {
    isFinalSubmit = true;
  }
  if (isFinalSubmit) {
    if (requiredInputsMissing()) {
      return;
    }
  }
  showLoadingDivTransparent();
  showSSignItemsContainer();
  completingSSignProcessJS = true;
  var ssignInputFieldCaptures = {};
  getSSignInputFieldDivSelectors().each(function() {
    var $thisInput = j$(this);
    var inputFieldID = $thisInput.attr('ssign-input-field');
    ssignInputFieldCaptures[inputFieldID] = {};
    var ssignInputField = ssignInputFields[inputFieldID];
    var fieldType = ssignInputField['fieldType'];
    var multiPicklistDelimiter = ssignInputField['multiPicklistDelimiter'];

    // Multi picklist delimiter defualt
    if (multiPicklistDelimiter == undefined || 
        multiPicklistDelimiter == '' ||
        multiPicklistDelimiter == null) {
          multiPicklistDelimiter = ';';
    }

    if (isSignatureOrInitials(fieldType)) {
      var signatureImg = $thisInput.find('img')[0];
      if (signatureImg !== null && signatureImg !== undefined) {
        var signatureData = signatureImg.src.replace(/^data:image\/(png|jpg);base64,/, "");
        if (!signatureData.includes('/resource/')) {
          ssignInputFieldCaptures[inputFieldID]['signatureImage'] = signatureData;
        } else {
          ssignInputFieldCaptures[inputFieldID]['signatureImage'] = null;
        }
        //this is if the signer signed since the last save - addSignature will have attached the attributes to the surrounding div
        if ($thisInput.attr('signer-name-provided') !== undefined && $thisInput.attr('timestamp') !== undefined) {
          ssignInputFieldCaptures[inputFieldID]['signatureName'] = $thisInput.attr('signer-name-provided');
          ssignInputFieldCaptures[inputFieldID]['timestamp'] = $thisInput.attr('timestamp');
        }
        //this is if the signer saved after signing earlier - getSavedResponses will have attached the attributes directly to the image
        else {
          ssignInputFieldCaptures[inputFieldID]['signatureName'] = $thisInput.find('img').attr('signer-name-provided');
          ssignInputFieldCaptures[inputFieldID]['timestamp'] = $thisInput.find('img').attr('timestamp');
        }
      }
    } else if (fieldType === 'text' || fieldType === 'checkbox' || fieldType === 'date') {
      var input = $thisInput.find('input')[0];
      var inputValue;
      if (fieldType === 'checkbox') {
        inputValue = input.checked;
      } else if (fieldType === 'date') { 
        inputValue = getDateValue(input, input.getAttribute('format'));
      } else {
        if (!input) input = $thisInput.find('textarea')[0];
        inputValue = input.value;
      }
      ssignInputFieldCaptures[inputFieldID]['valueProvided'] = inputValue;
    } else if (fieldType === 'text-based-picklist' || fieldType === 'field-based-picklist') {
      var selectList = j$('#ssign-picklist-' + inputFieldID).val() + '';
      var selectListOptions = document.getElementById('ssign-picklist-' + inputFieldID).options;
      var selectedIndex = selectListOptions.selectedIndex;
      var writeBackValue = selectListOptions[selectedIndex].attributes['write-back-value'].value;
      if (j$('#ssign-picklist-' + inputFieldID).attr('multiple') === 'multiple') {
        // Places a space between the commas for better readability
        var selectListArr = [];
        var writeBackArr = [];
        j$('#ssign-picklist-' + inputFieldID + ' :selected').map(function(i, el) {
          selectListArr.push(j$(el).val());
          writeBackArr.push(el.attributes['write-back-value'].value);
        });
        selectList = selectListArr.join(multiPicklistDelimiter);
        writeBackValue = writeBackArr.join(multiPicklistDelimiter);
      }
      
      ssignInputFieldCaptures[inputFieldID]['valueProvided'] = selectList;
      if (fieldType === 'field-based-picklist') {
        ssignInputFieldCaptures[inputFieldID]['valueProvided'] += '{!FIELD_BASED_PICKLIST_VALUE_LABEL_SPLITTER}' + writeBackValue;
      }
    }
  });
  var signerName = j$('[id$="csdSignerName"]').val();
  var nameProvided = j$('#signer-name').val();
  if (nameProvided !== null && nameProvided !== undefined && nameProvided !== '') {
    signerName = nameProvided;
  }
  Visualforce.remoting.Manager.invokeAction(
    '{!$RemoteAction.SSCreateSig.submitInputFieldResponses}',
    isFinalSubmit,
    ssignInputFieldCaptures, 
    {
      'signMethod' : requestMethod,
      'signerEmail' : getSignerEmail(),
      'signerIP' : '{!signerIP}',
      'timestamp' : getTimestamp(),
      'ssedId' : '{!ei.Id}',
      'profileHashID' : '{!profileHashID}',
      'profileName' : '{!csd.profileName}',
      'nameProvided' : signerName
    },
    function(result, event){
      if(!!result && event.status){
        var res = JSON.parse(result);
        if (isFinalSubmit) {
          if (res.validationErrors != null) {
            hideLoadingDiv();
            currentInputFieldID = res.validationErrors[0]['inputFieldID'];
            setCurrentSSignInputField();
            for (var i = 0; i < res.validationErrors.length; i++) {
              var validationError = res.validationErrors[i];
              addMessagesNextToInputField(validationError['inputFieldID'], validationError['errorMessage']);
            }
          } else if (!res.success) {
            alert('Error:' +  res.message);
          } else {
            if ('{!csd.isLastSigner}' === 'true') {
              completeSSignProcess();
            } else {
              sendEmails();
            }
          }
        } else {
          if (res.success) {
            hideLoadingDiv();
            alert('Saved responses');
          } else {
            alert('Error:' +  res.message);
          }
          completingSSignProcessJS = false;
        }
      } else {
        alert('Error in calling controller to upload signature: ' + event.message);
      }
      //Sfdc.canvas.publisher.publish({name:"publisher.close",payload:{refresh:"true"}});
    },
    {escape: false}
  );
}

function getDateValue(input, format) {
  if (input === null || input.value === null || input.value === '') {
    return '';
  } else {
    return formatDate(input.value, format);
  }
}

function formatDate(date, format) {
  if (!format) {
    format = 'mm/dd/yyyy';
  }
  if (format === 'MMM d, yyyy') {
    return formatComplexDate(date, format);
  } else {
    var dateStringArray = date.split('-');
    var year = dateStringArray[0];
    var month = dateStringArray[1];
    var day = dateStringArray[2];
    return format.replace('dd', day).replace('mm', month).replace('yyyy', year);
  }
}

function formatComplexDate(date, format){
    var month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var dateJS = new Date(date);
    if (format === 'MMM d, yyyy') {
      return (month[dateJS.getMonth()] + 
      " " +  dateJS.getDate() +
      ", " +  dateJS.getFullYear());
    } 
    return date
}

function formatDateForInput(date) {
  var d = new Date(date),
    month = '' + (d.getMonth() + 1),
    day = '' + d.getDate(),
    year = d.getFullYear();

  if (month.length < 2) { 
    month = '0' + month;
  }
  if (day.length < 2) {
    day = '0' + day;
  }
  
  return [year, month, day].join('-');
}

function getCurrentDate() {
  var todayDate = new Date();
  return formatDateForInput(todayDate);
}

function addMessagesNextToInputField(inputFieldID, msg) {
  j$('div[ssign-input-field="' + inputFieldID + '"]').append(
    '<span class="validation-error ssign_lightning_sys" style="color:red;background-color:white;">&nbsp;*' 
    + msg + '&nbsp;</span>' );
}

function addMessagesNextToInputFieldStyled(inputFieldID, msg, style) {
  // default color should be red unless otherwise specified
  if (!style.includes('color:')) {
    style = 'color: red;' + style;
  }
  j$('div[ssign-input-field="' + inputFieldID + '"]').append(
    '<span class="validation-error ssign_lightning_sys" style="' + style + '">&nbsp;*' 
    + msg + '&nbsp;</span>' );
}

function removeMessagesNextToInputFields() {
  j$('span[class="validation-error ssign_lightning_sys"]').remove();
}

function initializeSignaturePad() {
  onLoad();
  api = j$('.sigPad').signaturePad();
  setDisableSubmitIfDataMissing();
  toggleAddSignatureGoNextWithSubmitDoc();
  hideSignaturePad(false);
}

sPadNotClicked = true;
function setDisableSubmitIfDataMissing() {
  j$('.add-signature-btn').prop('disabled', true);
  j$('#signer-name').keyup(function(){
    j$("#no-name-added-error-msg").css("visibility", "hidden");
    disableSubmitIfDataMissing();
  });
  // j$('#sPad').on('mousedown touchstart', function(){
  //   //This should unselect anything, and prevent the error where images are
  //   //being dragged and preventing users to be able to draw signature
  //   //Essentially, when you went to mousedown to start drawing image, it would
  //   //drag the whole image of the page, so we just have to deselect everything when we go to sign
  //   if (window.getSelection) {window.getSelection().removeAllRanges();}
  //   else if (document.selection) {document.selection.empty();}
  //   sPadNotClicked = false;
  //   disableSubmitIfDataMissing();
  // })
}

/* Signature must have been drawn and name 
must have been typed for "Submit Signature" to show */
function disableSubmitIfDataMissing() {
  j$('.add-signature-btn').prop(
      'disabled', 
      (isCanvasBlank(document.getElementById('sPad')) &&
       !j$('#text-to-signature-checkbox').is(':checked'))
      ? true : false
  );
}

// returns true if all color channels in each pixel are 0 (or "blank")
function isCanvasBlank(canvas) {
  return !canvas.getContext('2d')
    .getImageData(0, 0, canvas.width, canvas.height).data
    .some(function(channel) { return channel !== 0; });
    /* Update 2020-02-26: replaced
    .some(channel => channel !== 0);
    with
    .some(function(channel) { return channel !== 0; });
    which is equivalent, but also works in IE (arrow functions are not supported in IE).
    See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions*/
}

/* This polyfill for .some() is necessary for the Uint8ClampedArray returned by getImageData()
in isCanvasBlank() since .some() is not supported out-of-the-box for Uint8ClampedArray on IE */
// Production steps of ECMA-262, Edition 5, 15.4.4.17
// Reference: http://es5.github.io/#x15.4.4.17
if (!Uint8ClampedArray.prototype.some) {
  Uint8ClampedArray.prototype.some = function(fun, thisArg) {
    'use strict';

    if (this == null) {
      throw new TypeError('Uint8ClampedArray.prototype.some called on null or undefined');
    }

    if (typeof fun !== 'function') {
      throw new TypeError();
    }

    var t = Object(this);
    var len = t.length >>> 0;

    for (var i = 0; i < len; i++) {
      if (i in t && fun.call(thisArg, t[i], i, t)) {
        return true;
      }
    }

    return false;
  };
}

/* ========================================================================= */
/* END JS: Signature Pad                                                     */
/* ========================================================================= */

function onLoadSSCreateSig(isZeroClick) {
  if (isZeroClick) {
    zeroClickSigningProcess();
  } else if ('{!hasErrors}' !== 'true') {
    j$('#ssign-toolbar-prev-input-btn').hide();
    j$('#ssign-toolbar-next-input-btn').css('background-color', '#0070D2');
    j$('#ssign-toolbar-next-input-btn').css('color', 'white');
    showLoadingDiv();
    initPDF();
  }
}

/* ========================================================================= */
/* START JS: Decline                                                         */
/* ========================================================================= */
function initializeDeclineWindow() {
  hideDeclineWindow();
}

function confirmDecline(fade) {
  hideLoadingDiv();
  j$("#decline-window").hide();
  j$("#ssign-toolbar-show-decline-btn").hide();
  jquerySignatureImages().off( "mousedown touchstart");
  showInfoBox(false);
}
/* ========================================================================= */
/* END JS: Decline                                                           */
/* ========================================================================= */

/* ========================================================================= */
/* START JS: Print                                                           */
/* ========================================================================= */
function initializePrintWindow() {
  hidePrintWindow();
}

function confirmPrint(fade) {
  j$("#print-window").hide();
  j$("#ssign-toolbar-show-print-btn").hide();
  jquerySignatureImages().off( "mousedown touchstart");
  showInfoBox(false);
}
/* ========================================================================= */
/* END JS: Print                                                             */
/* ========================================================================= */

/* ========================================================================= */
/* START JS: Window Onload                                                   */
/* ========================================================================= */
var api;
j$( window ).on( "load", function() {
  addViewAuditEvent();
  if (zeroClick) {
    var success = initZeroClick();
    if (success) {
      onLoadSSCreateSig(true);
    }
  } else {
    var success = initialization();
    if (success) {
      onLoadSSCreateSig(false);
    }
  }
});

function initialization() {
  initializeInfoBox();
  hideLoadingDiv();
  return true;
}

function initZeroClick() {
  initializeInfoBox();
  hideLoadingDiv();
  zeroClickSigningProcess();
  return true;
}

function initializeInfoBox() {
  j$('#info-box-popup').hide();
}

/* PDF images need to be created and signature images need to be placed
before we can perform the following onload processing */
function initializeAfterPDFImagesDone() {
  initializeSSignInputFieldDivs();
  initializeSignaturePad();
  initializeDeclineWindow();
  initializePrintWindow();
  initUpdateDuplicateFields();
  hideLoadingDiv();
  if (zeroClick) {
    zeroClickSigningProcessHelper();
  }
}

function initializeSSignInputFieldDivs() {
  getSSignInputFieldDivSelectors().click(function() {
    var $thisInput = j$(this);
    setCurrentInputFieldID($thisInput.attr('ssign-input-field'));
    setCurrentSSignInputField();
    disableSubmitIfDataMissing();
  });
}

function initUpdateDuplicateFields() {
  j$('.ssign-input-field input[type="checkbox"]').on('change', function(){
    updateDuplicateFields(this.checked, true, getFieldIDForUpdateDuplicates(this));
  });
  j$('.ssign-input-field textarea [type="text"]').on('keyup', function(){
    updateDuplicateFields(this.value, false, getFieldIDForUpdateDuplicates(this));
  });
}

function updateDuplicateFields(newValue, isCheckbox, fieldID) {
  getInputFieldsFromId(fieldID).each(function() {
    if (isCheckbox) this.checked = newValue;
    else this.value = newValue;
  });
}

/* Use this instead of currentInputFieldID in initUpdateDuplicateFields just to be safe */
function getFieldIDForUpdateDuplicates(htmlElement) {
  return j$(htmlElement).parent().attr('ssign-input-field');
}

window.onbeforeunload = function() {
  return checkIfCompletingProcess() ? "By closing this tab, this E-Signature request's data may become corrupted. Do you wish to continue?" : undefined;
};

/* ========================================================================= */
/* END JS: Window Onload                                                     */
/* ========================================================================= */
</script>
</apex:outputPanel>
</apex:outputPanel>


<!-- ==============================================================================================================-->
<!-- START LOAD STATUS                                                                                             -->
<!-- ==============================================================================================================-->
  <style>
    #loading-div {
      top: 0;
      left: 0;
      position: fixed;
      width: 100%;
      height: 100%;
      z-index: 2000;
      background-color: white;
    }
    .loading-div-content {
      position: fixed;
      text-align: center;
      width: 100%;
      bottom: 50%;
      z-index: 2001;
    }
    #loading-div-message {
      font-size: 32px;
      font-weight: bold;
      font-family: sans-serif;
      color: #797B7D;
      text-align: center;
    }
    #ssign-items {
      text-align: center;
    }
    #loading-div-message-percentage {
      font-size: 36px;
      /* #29AAE2 for S-Sign Blue. #0070D2 for Loading Spinner Blue. */
      color:#29AAE2;
    }
    .ssign-item-data {
      text-align: left;
      padding: 8px 0;
    }
    .ssign-item-label {
      width: 40px !important;
      text-align: left;
      color: rgb(40,118,255);
      font-size: 20pt;
    }
    .ssign-item-warning {
      text-align: center;
      color: rgb(0, 0, 0);
    }

    .html2canvas-container { 
      width: 3000px !important; 
      height: 3000px !important; 
    }

  </style>

<script type="text/javascript">

  var completingSSignProcessJS = '{!completingSSignProcess}' === 'true';

  function checkIfCompletingProcess() {
    return completingSSignProcessJS === true;
  }

</script>

  <apex:actionFunction name="submitSignatures"
    action="{!setSSignItemListForComplete}"
    reRender="ssign-items"
    oncomplete="submitInputFieldAnswers();"
  />
  <apex:actionFunction name="saveSignatures"
    action="{!setSSignItemListForSave}"
    reRender="ssign-items"
    oncomplete="submitInputFieldAnswers(false);"
  />

  <div id="loading-div">
    <div class="loading-div-content">
      <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SSign_Images,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
      <div id="loading-div-message" style="display:none;">{!tm['Loading Document...']}<br /><br /><span id="loading-div-message-percentage">0%</span></div>
      <apex:outputPanel rendered="{!NOT(isZeroClick)}">
        <div id="ssign-item-message-container" style="display:none;">
          <apex:outputPanel id="ssign-items" rendered="{!NOT(hasErrors)}">
            <div class="info-box-popup-inner" style="font-family: sans-serif; height: fit-content; padding-bottom: 0;">
              <div class="info-box-message-container" style="margin-top: auto !important;">
                <apex:pageBlock >
                  <apex:pageBlockSection collapsible="false" showHeader="false" columns="1">
                    <apex:repeat value="{!ssignSubmitItemList}" var="item">
                      <apex:pageBlockSectionItem dataStyleClass="ssign-item-data" labelStyleClass="ssign-item-label">
                        <apex:outputLabel style="margin-right: 20px;">
                          <apex:outputPanel rendered="{!item.isComplete}" style="padding-left: 8px;">
                            &#10003;
                          </apex:outputPanel>
                          <apex:outputPanel rendered="{!item.isRunning}">
                            <img
                              width="40"
                              src="{!URLFOR($Resource.SSign_Images,'lightning_spinner.gif')}"
                              class="undraggable"
                              unselectable="on"
                              style="vertical-align:middle"
                            />
                          </apex:outputPanel>
                        </apex:outputLabel>
                        <apex:outputText value="{!item.itemText}"/>
                      </apex:pageBlockSectionItem>
                    </apex:repeat>
                  </apex:pageBlockSection>
                </apex:pageBlock>
              </div>
              <h4 class="ssign-item-warning">{!tm['Do not close this tab']}</h4>
            </div>
          </apex:outputPanel>
        </div>
      </apex:outputPanel>
    </div>
  </div>
<!-- ==============================================================================================================-->
<!-- END LOAD STATUS                                                                                               -->
<!-- ==============================================================================================================-->

<!-- ==============================================================================================================-->
<!-- END RENDERED ON PAGE LOAD JS                                                                                  -->
<!-- ==============================================================================================================-->
<apex:outputPanel id="error_messages">
  <apex:outputPanel rendered="{!hasErrors}">
    <apex:actionFunction action="{!doNothing}" name="reRenderSSCreateSig" reRender="ssign_html_css,ssign_js" oncomplete="" />
    <style type="text/css">
      .error-popup {
        z-index: 1000;
        width:100%;
        height:100%;
        display:inline;
        position:fixed;
        top:0px;
        left:0px;
        background:#6B6B6B;
        overflow: scroll;
      }

      .error-popup-inner {
        max-width:700px;
        width:90%;
        padding:40px;
        position:absolute;
        top:50%;
        left:50%;
        -webkit-transform:translate(-50%, -50%);
        transform:translate(-50%, -50%);
        box-shadow:0px 2px 6px rgba(0,0,0,1);
        border-radius:3px;
        background:#fff;
      }
    </style>
    <div class="error-popup">
      <div class="error-popup-inner" style="font-family: sans-serif;">
        <apex:pageMessages escape="false" />
      </div>
    </div>
    <script>
      reRenderSSCreateSig();
      errorJ$ = jQuery.noConflict();
      errorJ$('#loading-div').hide();
    </script>
  </apex:outputPanel>
</apex:outputPanel>


<!-- ==============================================================================================================-->
<!-- START TOOLBAR                                                                                                 -->
<!-- ==============================================================================================================-->


<apex:outputPanel id="ssign_html_css">
<apex:outputPanel rendered="{!NOT(hasErrors)}">
<div class="ssign-toolbar ssign_lightning_sys">
  <div id="ssign-toolbar-logo-container">
    <a href="https://www.sdocs.com/s-sign/" target="_blank">
      <apex:outputPanel rendered="{!NOT(customLogo == null)}">
        <img id="ssign-toolbar-logo" src="{!customLogo}" class="undraggable" unselectable="on" style="height: 37.5px !important;width:auto;" />
      </apex:outputPanel>
      <apex:outputPanel rendered="{!NOT(customLogo != null)}">
        <img id="ssign-toolbar-logo" width="64" src="{!URLFOR($Resource.SSign_Images,'s-sign_logo.png')}" class="undraggable" unselectable="on" />
      </apex:outputPanel>
    </a>
  </div>

  <!-- These buttons expand to fit the width of the container div.
  If the formatting of these buttons ever gets messed up, it's due to the width of
  the containing div. To fix, adjust the width in the CSS definition for #ssign-toolbar-btns-container -->
  <div id="ssign-toolbar-btns-container" class="slds-grid slds-m-around--small">
    <apex:outputPanel layout="none" rendered="{!downloadForPrintAndEndSigning}">
      <div id="ssign-toolbar-download-for-print-btn" class="ssign-toolbar-btn slds-col slds-m-bottom--small slds-button slds-button--neutral" 
    onclick="handleDownload();">{!tm['Download For Print']}</div>
    </apex:outputPanel>
    <div id="ssign-toolbar-show-decline-btn" class="ssign-toolbar-btn slds-col slds-m-bottom--small slds-button slds-button--neutral"
      onclick="toggleDeclineWindow();fixDeclineWindowHeight();">{!tm['Decline Signature']}</div>
    <div id="ssign-toolbar-prev-input-btn" class="ssign-toolbar-btn slds-col slds-m-bottom--small slds-button--neutral slds-button"
    onclick="prevInputField();">{!tm['Previous Input']}</div>
    <div id="ssign-toolbar-next-input-btn" class="ssign-toolbar-btn slds-col slds-m-bottom--small slds-button--neutral slds-button"
    onclick="nextInputField();">{!tm['Next Input']}</div>
    <div
      id="ssign-toolbar-submit-btn"
      class="ssign-toolbar-btn slds-col slds-m-bottom--small slds-button slds-button--neutral"
      onclick="submitSignatures();"
    >{!tm['Submit']}</div>
    <apex:outputPanel layout="none" rendered="{!enableSaving}">
      <div
        id="ssign-toolbar-save-btn"
        class="ssign-toolbar-btn slds-col slds-m-bottom--small slds-button slds-button--neutral"
        onclick="saveSignatures();"
      >{!tm['Save']}</div>
    </apex:outputPanel>
    <!--<div class="ssign-toolbar-btn slds-col slds-m-bottom--small slds-button slds-button--neutral"  
    onclick="previewPDF();">Preview Final PDF</div>-->
    <apex:outputPanel layout="none" rendered="{!printingAllowed}">
      <div id="ssign-toolbar-show-print-btn" class="ssign-toolbar-btn slds-col slds-m-bottom--small slds-button slds-button--neutral"
      onclick="togglePrintWindow();" >{!tm['Print']}</div>
    </apex:outputPanel>
  </div>
  <div id="ssign-toolbar-viewing-input-message" style="right:116px;position:absolute;z-index:-1000;">
  </div>

</div>
<style>
.ssign-toolbar {
  border-bottom: 2px solid #29AAE2;
  overflow: hidden;
  background-color: white;
  z-index: 100;
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 48px;
  box-shadow: 8px 8px 8px 8px rgba(0, 0, 0, 0.2), 8px 8px 8px 8px rgba(0, 0, 0, 0.19);
  text-align: right;
}

#ssign-toolbar-logo-container {
  position: absolute; 
  top: 0px; 
  left: 24px;
  padding: 6px;
}

#ssign-toolbar-viewing-input-message {
  font-size: 16px;
  color: #797B7D;
  position: absolute; 
  top: 16px; 
  left: 400px;
}

#ssign-toolbar-btns-container {
  padding: 6px;
  margin: auto;
  width: 50%;
  /*border: 3px solid red;*/
}

#ssign-toolbar-strong-btns-container {
  padding: 6px;
  margin: auto;
  width: 50%;
  /*border: 3px solid red;*/
}

.ssign-toolbar-btn {
  /*text-align: center;
  padding-top: 20px;
  width: 256px;
  height: 100px;
  background: #29AAE2;
  display: inline block;
  float: left;
  color: white;
  font-family: sans-serif;
  cursor: pointer;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  border: 1px solid black;*/
  cursor: pointer;
}

.ssign-toolbar-btn:hover {
  /*background: #ddd;
  color: black;*/
}
</style>
<!-- ==============================================================================================================-->
<!-- END TOOLBAR                                                                                                   -->
<!-- ==============================================================================================================-->




<!-- ==============================================================================================================-->
<!-- START PDF SIMULATOR                                                                                           -->
<!-- ==============================================================================================================-->

<!-- ======================================================================-->
<!-- START JAVASCRIPT                                                      -->
<!-- ======================================================================-->
<apex:includeScript value="{!URLFOR($Resource.SSign__SSign,'/resources/js/pdf.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SSign__SSign,'/resources/js/pdf.worker.js')}" />

<!-- ======================================================================-->
<!-- END JAVASCRIPT                                                        -->
<!-- ======================================================================-->

<!-- ======================================================================-->
<!-- START CSS                                                             -->
<!-- ======================================================================-->
<apex:outputPanel rendered="{!isPDFUploadTemplate || isOneOff}" >
  <style>
    .sspdf-page-image-container {
      padding: 0 !important;
    }
  </style>
</apex:outputPanel>

<apex:outputPanel rendered="{!isOneOff}" >
  <style>
    .input-checkbox {
      margin: 0;
      /* Setting display to block prevents the parent div from being taller than the checkbox.
      Source: https://stackoverflow.com/questions/27834039/html-css-div-is-3px-taller-than-child */
      display: block;
    }
  </style>
</apex:outputPanel>

<style>
body {
  /*background-color: #c8d6e5;*/
  /*background-color: #d2dae2;*/
  /*background-color: white;*/
  background-color: #6B6B6B;
}
#sspdf-pages-container {
  width: 100%;
  margin-top: 60px;
}
.sspdf-page-image-container {
  position: relative;
  padding: .1in; 
  margin: 0 auto;
  margin-bottom: .1in;
  background-color: #FFF;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  /* width and height are set in pageDimensionsCSS */
}
.sspdf-page-image {
  /* width and height are set in pageDimensionsCSS */
}
.sspdf-html-overlay {
  position: absolute; 
  z-index: 10;
  box-sizing: border-box;
}
.previous-signer-response {
  border: 2px solid #f1c40f;
  border-radius: 2px;
}
/* Source: https://stackoverflow.com/questions/12906789/preventing-an-image-from-being-draggable-or-selectable-without-using-js */
.undraggable {
  user-drag: none; 
  user-select: none;
  -moz-user-select: none;
  -webkit-user-drag: none;
  -webkit-user-select: none;
  -ms-user-select: none;
}
.sign-here-text-div {
  position:absolute;
  top:30px;
  left:24px;
  font-family:Arial,sans-serif;
  color:#2f3542;
  font-size:10px;
  font-weight:bold;
  cursor:pointer;
}

/* 
  FOR MULTI PICKLISTS:
  If a user would like for their
  multi-picklist to only show a few
  elements, we want to make sure it
  is known there are other elements
  by having the presence of a scrollbar.
*/
select::-webkit-scrollbar {
  -webkit-appearance: none;
  width: 7px;
}

select::-webkit-scrollbar-thumb {
  border-radius: 4px;
  background-color: rgba(0, 0, 0, .5);
  box-shadow: 0 0 1px rgba(255, 255, 255, .5);
}

/* -------- START: Field styling from SSCreateRequest3.page -------- */
.draggable-dropped--signature, .draggable-dropped--initials {
  height: {!defaultSignatureHeight}px;
  width: {!defaultSignatureWidth}px;
  background-color: rgba(9, 133, 227, 0.5);
  font-weight: bold;
  font-style: italic;
  border-color: rgb(9, 132, 227);
  cursor: pointer;
}
.draggable-dropped--date {
  height: 40px;
  width: 120px;
}
.draggable-dropped--text {
  height: 40px;
  width: 120px;
}
.draggable-dropped--checkbox {
  height: 40px;
  width: 40px;
}
.draggable-dropped {
  border-style: dashed;
  border-width: 1px;
  user-select: none;
  /* Ensures consistency between SSCreateRequest3.page and SSCreateSig.page,
  by ensuring that the width/height of the box does not vary depending on
  whether the border width/height is added to the overall elements width/height
  or not (border-box makes it so that the box is always 64px including border,
  regardless of border-width) */
  box-sizing: border-box;

  /* Centers content within div */
  align-items: center;
  justify-content: center;
  display: flex;
  flex-direction: row;
}
.required-text {
  color: red;
}
/* -------- END: Field styling from SSCreateRequest3.page -------- */

</style>
<apex:dynamicComponent componentValue="{!pageDimensionsCSS}" />
<apex:dynamicComponent componentValue="{!signatureCSS}" />
<!-- ======================================================================-->
<!-- END CSS                                                               -->
<!-- ======================================================================-->

<!-- ======================================================================-->
<!-- START HTML                                                            -->
<!-- ======================================================================-->
<div id="sspdf-document-container">
  <div id="sspdf-pages-container" onclick="hideSignaturePad(false);"></div>
</div>
<!-- ======================================================================-->
<!-- END HTML                                                              -->
<!-- ======================================================================-->


<!-- ==============================================================================================================-->
<!-- END PDF SIMULATOR                                                                                             -->
<!-- ==============================================================================================================-->

<!-- ==============================================================================================================-->
<!-- START SIGNATURE PAD                                                                                           -->
<!-- ==============================================================================================================-->
<style>

#signature-pad {
  /*position: relative;*/
  position: fixed;
  height: 320px;
  width: 720px;
  bottom: 225px;
  left: 26.5%;
  z-index: 50;
}

.s-sign-pad {
  /*ORIGINAL DISTANCE FROM BOTTOM
  bottom: 128px; */
  bottom: 225px;
  display: block;
  left: 26.5%;
  position: fixed;
  margin-left:auto;
  margin-right:auto;
  font-size: 14px;
  width: 700px;
  min-height: 320px;
  border: 10px solid #e8e8e8;
  background-color: #fff;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  border-radius: 12px;
}

#sPad {
  border: 1px solid #797B7D;
}

.s-sign-pad--body {
  margin-top: 45px;
  position: absolute;
  left: 20px;
  right: 20px;
  top: 20px;
  /*bottom: 150px;*/
}

.s-sign-pad--body
canvas {
  position: absolute;
 left: 0;
 top: 0;
 width: 100%;
 height: 100%;
 border-radius: 4px;
 box-shadow: 0 0 5px rgba(0, 0, 0, 0.02) inset;
}
.s-sign-pad--footer
.btns {
  width: 100%;
  /*position: absolute;*/
  bottom:0px;
  text-align: center;
  margin-top: 3em;
}

.s-sign-pad--footer
.description {
 color: #A9A9A9;
   color: #C3C3C3;
 text-align: center;
 font-size: 1.2em;
 margin-top: 4em;
 margin-bottom: 4em;
}

#pdf-iframe-container {
  z-index: -10; 
  left:0; 
  top:0; 
  width: 100%;
  height: 100%;
  position: fixed;
}

#pdf-iframe {
  background-color:#ffffff;
  z-index: -10;
  left:0;
  top:0;
  position: absolute; 
}

.undraggable {
  -moz-user-select: -moz-none;
  -khtml-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
</style>
<!-- Everything in this stylesheet should be prefaced with the class .ssign_lightning_sys, so
the classes in this style sheet should only be applied to elements that are children of an element
with class ssign_lighnting_sys. On the off chance that some of the selectors in this style sheet are
not prefaced with .ssign_lighnting_sys, those styles will be applied to ALL matching elements on this page,
rather than just the matching elements contained within an element with class .ssign_lighnting_sys.
If any weird visual errors occur on this page, consider looking here.  

Consider using this instead of any issues occur: https://tools.lightningdesignsystem.com/css-customizer -->
<apex:stylesheet value="{!URLFOR($Resource.SSign__SSign_CSS,'assets/styles/salesforce-lightning-design-system.css')}"/> 

<!-- Rerender this to trigger redirect rather than using an oncomplete,
since oncomplete's often trigger the browser's pop-up blocker -->

<style type="text/css">
.info-box-message-container {
  text-align: center;
  font-size: 20px;
  padding: 16px;
  border: 1px solid #D8DDE6;
  border-radius: 4px;
  margin-top: 110px;
}

.multiDocLink {
  text-decoration: none;
  color:#29AAE2;
}

/* mouse over link */
.multiDocLink:hover {
  color:rgb(7, 118, 165);
}

.ssign_logo_div {
  margin: 0 auto;
  text-align: center;
}

</style>
<apex:outputPanel id="info-box-popup-panel">
<apex:outputPanel rendered="{!NOT(hasErrors)}">
  <script>
    function setSubmitRedirect(url) {
      var $infoBoxAll = j$('.info-box-clickable');
      $infoBoxAll.css('cursor', 'pointer');
      $infoBoxAll.on(
        'click',
        function() {
          window.location.replace(url);
        }
      );
    }
  </script>
  <div id="info-box-popup">
    <div class="info-box-popup info-box-clickable">
      <div class="info-box-popup-inner info-box-clickable" style="font-family: sans-serif; height:400px;">
        <div style="margin: 0 auto; width: 80px;">
          <a href="https://www.sdocs.com/s-sign/" target="_blank">
            <apex:outputPanel rendered="{!NOT(customLogo == null)}">
              <img id="custom-logo-thank-you" src="{!customLogo}" class="undraggable" unselectable="on" style="height: 75px !important;width:auto;"  />
              <script>
                var element = document.getElementById('custom-logo-thank-you');
                element.setAttribute('style', 'height: 75px !important;width:auto; margin-left: calc(50% - ' + (element.offsetWidth / 2) + 'px); margin-right: auto;');
              </script>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!NOT(customLogo != null)}">
              <img width="125" src="{!URLFOR($Resource.SSign_Images,'s-sign_logo.png')}" class="undraggable" unselectable="on" />
            </apex:outputPanel>
          </a>
        </div>
        <apex:outputPanel rendered="{!(csd.isLastSigner && nextSignatureCaptureURL != null)}">
          <div class="info-box-message-container">
            {!tm['Thank you for signing!']} {!tm['Click below to view this signed document or to sign the next document.']}
            <br/>
            <br />
            <div id="clickToViewSignedDocMulti" class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                <apex:commandLink styleClass="multiDocLink"
                  style="font-weight: bold;"
                  value="{!tm['Download Signed Document']}"
                  oncomplete=""
                  reRender=""
                >
                  <apex:actionSupport event="onclick"
                    oncomplete="downloadSignedDocument(); return false;"
                    reRender=""
                  />
                </apex:commandLink>
            </div>
            <div id="clickToViewSignedDocMulti" class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                <a class="multiDocLink" href="{!nextSignatureCaptureURL}"><strong>{!tm['Sign Next Document']}</strong></a>
            </div>
          </div>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!(NOT(csd.isLastSigner) && nextSignatureCaptureURL != null)}">
          <div class="info-box-message-container">
            <script>
              setSubmitRedirect('{!nextSignatureCaptureURL}');
            </script>
            {!tm['Thank you for signing!']} {!tm['Please click anywhere to sign the next document.']}
          </div>
        </apex:outputPanel>
        <apex:outputPanel id="info-box-messages"
          rendered="{!NOT(CONTAINS(ei.SSign__Status__c, 'Voided')) && NOT(CONTAINS(ei.SSign__Status__c, 'Declined')) && NOT(CONTAINS(ei.SSign__Status__c, 'Expired')) && NOT(CONTAINS(ei.SSign__Status__c, 'Invalidated')) && NOT(CONTAINS(ei.SSign__Status__c, 'Printed')) && nextSignatureCaptureURL == null}"
        >
          <apex:outputPanel rendered="{!NOT(redirectToURL) || NOT(csd.isLastSigner)}">
            <apex:outputPanel id="zero-click-info-box-messages" rendered="{!isZeroClick}">
              <div id="auto-signing-message" class="info-box-message-container">
                <apex:outputPanel id="zero-click-message-container">
                  {!zeroClickMessage}
                </apex:outputPanel>
                <br/>
                <br/>
                <div class="info-box-loading-container">
                  <img width="80" id="info-loading-spinner" src="{!URLFOR($Resource.SSign_Images,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
                  <div id="info-loading-message" style="display:none;">{!tm['Loading Document...']}<br /><br /><span id="loading-div-message-percentage">0%</span></div>
                </div>
              </div>
              <div class="info-box-message-container" id="auto-signed-last-signer">
                <span id="last-signer-msg">{!tm['Thank you for signing!']} {!tm['You will receive a confirmation email shortly.']}</span>
                <br />
                <br />
                <div class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                  <apex:commandLink styleClass="multiDocLink"
                    style="font-weight: bold;"
                    value="{!tm['Download Signed Document']}"
                    oncomplete=""
                    reRender=""
                  >
                    <apex:actionSupport event="onclick"
                      oncomplete="downloadSignedDocument(); return false;"
                      reRender=""
                    />
                  </apex:commandLink>
                </div>
              </div>
            </apex:outputPanel>
            <apex:outputPanel id="non-zero-click-info-box-messages" rendered="{!NOT(isZeroClick)}">
              <apex:outputPanel rendered="{!NOT(csd.isLastSigner) && isSignInPersonDefault && ei.SSign__Active_Signer__c != null}">
                <div class="info-box-message-container">
                  <script>
                    setSubmitRedirect('{!nextSignInPersonURL}');
                  </script>
                  {!tm['Thank you for signing!']} {!tm['Please click anywhere when the next signer is ready to sign the document.']}
                </div>
              </apex:outputPanel>

              <apex:outputPanel rendered="{!NOT(csd.isLastSigner) && NOT(isSignInPersonDefault) && ei.SSign__Active_Signer__c != null}">
                <div class="info-box-message-container" style="margin-top: 74px;">
                  <span id="non-last-signer-msg">{!tm['Thank you for signing!']}</span> {!tm[csd.numSignersRemainingMessage]}
                  <br />
                  <br />
                  {!tm['You may now close this tab.']}
                </div>
              </apex:outputPanel>

              <apex:outputPanel rendered="{!(csd.isLastSigner || ei.SSign__Active_Signer__c == null) && isSignInPersonDefault}">
                <div class="info-box-message-container">
                  <span id="last-signer-msg">{!tm['Thank you for signing!']} {!tm['You will receive a confirmation email shortly.']}</span>
                  <br />
                  <br />
                  <div class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                    <apex:commandLink styleClass="multiDocLink"
                      style="font-weight: bold;"
                      value="{!tm['Download Signed Document']}"
                      oncomplete=""
                      reRender=""
                    >
                      <apex:actionSupport event="onclick"
                        oncomplete="downloadSignedDocument(); return false;"
                        reRender=""
                      />
                    </apex:commandLink>
                  </div>
                  <apex:outputPanel rendered="{!NOT(redirectToURL)}">
                    <apex:outputPanel rendered="{!NOT(returnToRecord)}">
                      <br />
                      {!tm['You may now close this tab.']}
                    </apex:outputPanel>
                    <apex:outputPanel rendered="{!returnToRecord}">
                      <div class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                          <a class="multiDocLink" href="{!baseRecordURL}"><strong>{!tm['Return to Record']}</strong></a>
                      </div>
                    </apex:outputPanel>
                  </apex:outputPanel>
                  <apex:outputPanel rendered="{!redirectToURL}">
                    <div class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                        <a class="multiDocLink" href="{!redirectURL}"><strong>{!tm['Click here to leave this page']}</strong></a>
                    </div>
                  </apex:outputPanel>
                </div>
              </apex:outputPanel>

              <apex:outputPanel rendered="{!(csd.isLastSigner || ei.SSign__Active_Signer__c == null) && NOT(isSignInPersonDefault)}">
                <div class="info-box-message-container">
                  <span id="last-signer-msg">{!tm['Thank you for signing!']} {!tm['You will receive a confirmation email shortly.']}</span>
                  <br />
                  <br />
                  <div class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                    <apex:commandLink styleClass="multiDocLink"
                      style="font-weight: bold;"
                      value="{!tm['Download Signed Document']}"
                      oncomplete=""
                      reRender=""
                    >
                      <apex:actionSupport event="onclick"
                        oncomplete="downloadSignedDocument(); return false;"
                        reRender=""
                      />
                    </apex:commandLink>
                  </div>
                </div>
              </apex:outputPanel>
            </apex:outputPanel>
          </apex:outputPanel>
          <apex:outputPanel rendered="{!AND(redirectToURL, csd.isLastSigner)}">
            <div class="info-box-message-container">
              Redirecting to {!redirectURLShort}...
            </div>
          </apex:outputPanel>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!CONTAINS(ei.SSign__Status__c, 'Voided')}">
          <div class="info-box-message-container" style="">
            {!tm['This E-Signature request has been voided and is no longer able to be signed.']}
          </div>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!CONTAINS(ei.SSign__Status__c, 'Declined')}">
          <div class="info-box-message-container">
            <div id="info-box-decline-msg">
              {!tm['E-Signature Declined. An email will be sent to you and the sender.']}
              <br />
              <br />
              {!tm['You may now close this tab.']}
            </div>
          </div>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!CONTAINS(ei.SSign__Status__c, 'Expired')}">
          <div class="info-box-message-container" style="">
            {!tm['This E-Signature request has expired and is no longer able to be signed.']}
          </div>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!CONTAINS(ei.SSign__Status__c, 'Invalidated')}">
          <div class="info-box-message-container">
            {!tm['This E-Signature request has been invalidated and is no longer able to be signed.']} {!tm['Reason: Too many failed verification code attempts.']}
          </div>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!CONTAINS(ei.SSign__Status__c, 'Printed')}">
          <div class="info-box-message-container">
            {!tm['This contract has been downloaded for printing and is no longer available for E-Signature.']}
          </div>
          <apex:outputPanel >
            <div class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                <apex:commandLink styleClass="multiDocLink"
                  style="font-weight: bold;"
                  value="{!tm['Download Again']}"
                  oncomplete=""
                  reRender=""
                >
                  <apex:actionSupport event="onclick"
                    oncomplete="downloadUnsignedDocument(); return false;"
                    reRender=""
                  />
                </apex:commandLink>
            </div>
          </apex:outputPanel>
          <apex:outputPanel >
            <div class="info-box-message-container" style="border: 0px solid #29AAE2; margin: 0 auto; width: 50%; color:#29AAE2">
                <a class="multiDocLink" href="{!baseRecordURL}"><strong>{!tm['Return to Record']}</strong></a>
            </div>
          </apex:outputPanel>
        </apex:outputPanel>
      </div>
    </div>
  </div>
</apex:outputPanel>
</apex:outputPanel>

<apex:outputPanel id="check-for-documents">
  <script type="text/javascript">
    if ('{!documentsFinishedGenerating}' === 'true') {
      sendEmails();
    }
  </script>
  <apex:outputPanel rendered="{!completingSSignProcess && NOT(documentsFinishedGenerating) }">
    <apex:actionPoller interval="5" action="{!checkSSignDocumentsGeneration}" reRender="check-for-documents,ssign-items,error_messages,zero-click-message-container" />
  </apex:outputPanel>
</apex:outputPanel>

<apex:actionFunction action="{!completeSSignProcess}"
  name="completeSSignProcess"
  oncomplete=""
  reRender="check-for-documents,error_messages,controller-variables,ssign-items,zero-click-message-container"
/>

<apex:actionFunction action="{!createSDocsForEmails}" name="sendEmails" oncomplete="completeSendEmails();" reRender="error_messages" />
<apex:actionFunction action="{!sendEmails}" name="completeSendEmails" oncomplete="postSigningActions();" reRender="error_messages,signingFunctionsPanel" />
<apex:actionFunction action="{!showInfoBoxFinal}" name="showInfoBoxFinal" oncomplete="showInfoBox(false);j$('#auto-signing-message').remove();completingSSignProcessJS=false;redirectSignerToURL();" reRender="error_messages,info-box-popup-panel,ssign-items,zero-click-message-container" />
<apex:actionFunction action="{!addViewAuditEvent}" name="addViewAuditEvent" oncomplete="refreshSSCreateSig();" reRender="" />
<apex:actionFunction action="{!doNothing}" name="refreshSSCreateSig" oncomplete="" reRender="error_messages" />
<apex:actionFunction action="{!downloadGeneratedDocument}" name="downloadDocumentForPrint" oncomplete="downloadUnsignedDocument(); postSigningActions();" reRender="error_messages,signingFunctionsPanel" />

<apex:outputPanel id="controller-variables">
<script>
function getSignerEmail() {
  return '{!JSENCODE(csd.signerEmail)}';
}
function getVerified() {
  return '{!verified}' === 'true';
}
function getNumberOfFailures() {
  return '{!JSENCODE(TEXT(numberOfFailures))}';
}

function confirmDownloadAction() {
  return confirm(
    'This will download the contract for ' +
    'printing and prevent you from being able ' +
    'to e-sign it in the future. Are you sure you ' +
    'want to do this?'
  );
}

function handleDownload() {
  if (confirmDownloadAction()) {
    downloadDocumentForPrint();
  }
}
</script>
</apex:outputPanel>

<style>
#no-name-added-error-msg {
  visibility: hidden;
  color: red;
  padding-left: 13px;
  position: absolute;
}

#text-as-signature {
  margin-left: 0px;
  text-align: center;
  height:120px;
  font-size: 45px;
  /*margin-top: 25px;*/
  font-family: '{!textToSignatureFont}';
}


#text-as-signature-span {
  height:120px;
  padding:30px;
  margin-top: 15px;
  padding-top: 20px;
  /*text-align: center;*/
  display: inline-block;
}

#textToSignatureCheckbox {

}

.tooltiptext {
  visibility: hidden;
  width: 240px;
  background-color: white;
  border: 2px solid rgb(41, 170, 226);
  border-radius: 4px;
  text-align: center;

  /* Position the tooltip */
  position: absolute;
  z-index: 1;
}

.text-to-signature-info:hover .tooltiptext {
  visibility: visible;
}

.slds-listbox__item:hover {
  background-color: #f4f6f9 !important;
}

</style>

<style>

  /* #sPad and #text-as-signature must have the same height, width, and margins so that
  #text-as-signature falls into the same location as the canvas. This ensures that the
  text-to-signature image will always have the exact same dimensions as the canvas,
  regardless of the length of the signer name, and hence ensure height/width consistency
  across all signature images (text or drawn) added to the document */
  #sPad, #text-as-signature {
    height: 160px;
    width: 400px;
    margin-left: 130px;
  }
  #draw-signature-here {
    top: 65px;
  }

  #sPad {
    /* Height, width, and margins are set in the combined [#sPad, #text-as-signature] CSS rule.
    It is important for #sPad and #text-as-signature to share these same values
    so that the signature images they produce have the same dimensions */
    border: 1px solid #797B7D;
  }
  #text-as-signature {
    /* Height, width, and margins are set in the combined [#sPad, #text-as-signature] CSS rule.
    It is important for #sPad and #text-as-signature to share these same values
    so that the signature images they produce have the same dimensions */
    text-align: center;
    font-family: '{!textToSignatureFont}';
    padding-top: 32px;
    font-size: {!initTextToSignatureFontSize}px;
  }
  #text-as-signature-span {
    padding: 0;
  }
  #draw-signature-here {
    position: relative;
    z-index:-5;
  }
</style>

<div id="signature-pad">
  <div class="s-sign-pad ssign_lightning_sys" style="display: flex; justify-content: center;">
    <a href="https://www.sdocs.com/s-sign/" target="_blank">
      <apex:outputPanel rendered="{!NOT(customLogo == null)}">
        <img id="custom-logo-sign-pad" src="{!customLogo}" class="undraggable" unselectable="on" style="height: 50px !important;width:auto; z-index: 11; position: absolute; top: 8px; left: 325px;" />
        <script>
          var element = document.getElementById('custom-logo-sign-pad');
          element.setAttribute('style', 'height: 50px !important;width:auto; z-index: 11; position: absolute; top: 8px; left: calc(50% - ' + (element.offsetWidth / 2) + 'px);');
        </script>
      </apex:outputPanel>
      <apex:outputPanel rendered="{!NOT(customLogo != null)}">
        <img width="80" src="{!URLFOR($Resource.SSign_Images,'s-sign_logo.png')}" class="undraggable" unselectable="on" style="z-index: 11; position: absolute; top: 8px; left: 325px;" />
      </apex:outputPanel>
    </a>
    <div class="s-sign-pad--body">
      <canvas id="sPad"></canvas>
      <div id="text-as-signature"><span id="text-as-signature-span"> </span></div> 
    </div>
    <div class="s-sign-pad--footer" style="width: 100%; align-self:flex-end;">
      <div id="draw-signature-here" class="description unselectable undraggable" unselectable="on">{!tm['Draw Signature Here']}</div>
      <button style="top: -115px; left: 643px;" class="slds-col slds-m-bottom--small slds-button" onclick="sPadClear(true);sPadClear(true);return false;">{!tm['Clear']}</button>
      <div class="btns" style="border: 1px solid #797B7D;"> 
        <table width="100%">
          <tr>
            <td width="40%" style="padding: 10px 12px;">
              <apex:outputPanel id="text-to-signature-panel" rendered="{!NOT(disableTextToSignature)}">
                <label class="ssign-checkbox-container" style="width: 100%;">
                  <div class="text-to-signature" style="display:inline-block; font-size: 16px; padding-top: 4px">{!tm['Text-To-Signature']}
                    <div class="text-to-signature-info" style="display:inline-block;height:20px;float:right;">
                      <img src="{!URLFOR($Resource.SSign_Images, 'info.png')}" style="height:15px"/> 
                      <span class="tooltiptext">{!CLICK_TEXT_TO_SIGNATURE}</span>
                    </div>
                  </div>
                  <input id="text-to-signature-checkbox" type="checkbox" onchange="checkboxAction()" />
                  <span class="ssign-checkmark" style="float:left"></span>
                </label>
              </apex:outputPanel>
              <input type="text" id="signer-name" placeholder="{!tm['Type Name']}" class="slds-input" />
              <!--<apex:inputText id="name2" value="{!SSEnvelope_Document__c.id}" html-placeholder="Type Name" />-->
            </td>
          </tr>
          <tr>
            <td style="padding-top: 10px; padding-bottom: 12px;">
              <span id="no-name-added-error-msg">
                {!tm['Please enter your name before adding your signature']}
              </span>
              <div class="slds-grid slds-m-around--small" style="padding-top:12px; margin-bottom: 0px;">
                <button id="add-signature-simple-btn" class="add-signature-btn slds-col slds-m-bottom--small slds-button slds-button--neutral" onclick="addSignature();return false;" style="margin-bottom: 0px;"><apex:outputText value="{!tm['Add Signature']}" /></button>
                <button id="add-signature-and-next-btn" class="add-signature-btn slds-col slds-m-bottom--small slds-button slds-button--neutral" onclick="addSignatureAndGoToNextInput();return false;" style="margin-bottom: 0px;"><apex:outputText value="{!tm['Add Signature & Go To Next Input']}" /></button>
                <button id="add-signature-and-submit-btn" class="add-signature-btn slds-col slds-m-bottom--small slds-button slds-button--neutral" onclick="addSignatureAndSubmitSignedDocument();return false;" style="margin-bottom: 0px;"><apex:outputText value="{!tm['Add Signature & Submit Document']}" /></button>
              </div>
            </td>
          </tr>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
//Signature font menu function
//This will be called on when the checkbox for text-to-signature is checked and when the input text is not empty
//The menu will disappear if the checkbox becomes unchecked or the text inside the text box is erased
var nameLengthOld = 0;
var initTextToSignatureFontSize = parseInt('{!initTextToSignatureFontSize}');
var textToSignatureFontSize = initTextToSignatureFontSize;
var threshold = 20;
function signatureMenu() {
  /* Since the text-to-signature div has the same width as the canvas, it's important
  to set canvasWidth to be slightly narrower than the div, that way our span's length
  can exceed that width before hitting the wall of its div and being broken onto
  the next line by the browser */
  var canvasWidth = j$('#sPad').width() - threshold; 
  var textWidth = j$('#text-as-signature-span').width();
  var $textToSignatureSpan = j$('#text-as-signature-span');
  var $textAsSignature = j$('#text-as-signature');

  // Reset font-size if the user reduced the length of the name field (backspace, etc.)
  var nameLengthNew = j$('#signer-name').val().length;
  if (nameLengthNew < nameLengthOld) {
    // Try incrementally bigger font sizes (up to initTextToSignatureFontSize) until the signature text is at maximum while still inside the canvas
    while (textToSignatureFontSize < initTextToSignatureFontSize && $textToSignatureSpan.width() < canvasWidth) {
      textToSignatureFontSize++;
      setFontSize($textAsSignature, textToSignatureFontSize);
    }
  }
  nameLengthOld = nameLengthNew;

  // Try incrementally smaller font sizes until the signature text fits inside the canvas
  while ($textToSignatureSpan.width() > canvasWidth) {
    textToSignatureFontSize--;
    if (textToSignatureFontSize <= 0) {
      alert('Error: Name field too large');
      return;
    }
    setFontSize($textAsSignature, textToSignatureFontSize);
  }
}

function setFontSize($html, fontSize) {
  $html.css('font-size', fontSize + 'px');
}

function getInitials(signerName) {
  if (signerName) {
    // Separates by word boundaries followed by spaces, or by periods 
    var names = signerName.split(/\b(?=\s)|\./);
    var initials = '';
    if (Array.isArray(names) && names.length) {
      for (var i = 0; i < names.length; i += 1) {
        if (names[i].trim()[0]) {
          initials += names[i].trim()[0] + '.';
        }
      }
    }
    return initials;
  }
  return signerName;
}

function setTextAsSignatureSpanAsSignerName() {
  var signatureName = j$('#signer-name').val().trim();
  /*
  This section is commented out based on an urgent demand from a client. We can re-evaluate this
  at a later date as the default option here comes with it's own set of caveats. 
  */
  /*
  if (signatureName && getCurrentFieldType() === 'initials') {
    //signatureName = getInitials(signatureName);
  }
  */
  j$('#text-as-signature-span').html(signatureName);
  signatureMenu();
  sPadNotClicked = true;
  signaturePad.clear();
}

//Checkbox function
// This will be called on change of this checkbox for text-to-signature
// If it was unchecked and becomes checked, we want to insert the current name
//    and anytime a new character is added to the signer-name div, we must make the change to the text-as-signature-span
// If it was checked and becomes unchecked, then we need to remove the onkeyup functionality and set the
//    text-as-signature to nothing.
function checkboxAction () {
  if (j$('#text-to-signature-checkbox').is(':checked')) {
    j$('#draw-signature-here').css('visibility','hidden');
    j$('#text-as-signature-span').html(j$('#signer-name').val());
    disableSubmitIfDataMissing();
    sPadNotClicked = true;
    signaturePad.clear();
    j$('#sPad').attr("onclick", "signaturePad.clear(); sPadNotClicked = true;");
    j$('#signer-name').attr("onkeyup", "setTextAsSignatureSpanAsSignerName();");
    setTextAsSignatureSpanAsSignerName();
  } else {
    j$('#sPad').removeAttr("onclick");
    j$('#draw-signature-here').css('visibility','visible');
    j$('#signer-name').removeAttr("onkeyup");
    disableSubmitIfDataMissing();
    j$('#text-as-signature-span').html('');
  }
}

//End Checkbox function

</script>

<!-- ==============================================================================================================-->
<!-- END SIGNATURE PAD                                                                                             -->
<!-- ==============================================================================================================-->

  <style>
  .info-box-popup {
    z-index: 1000;
    width:100%;
    height:100%;
    display:inline;
    position:fixed;
    top:0px;
    left:0px;
    background:#6B6B6B;
    overflow: scroll;
  }

  .info-box-popup-inner {
    max-width:700px;
    width:90%;
    padding:40px;
    position:absolute;
    top:50%;
    left:50%;
    -webkit-transform:translate(-50%, -50%);
    transform:translate(-50%, -50%);
    box-shadow:0px 2px 6px rgba(0,0,0,1);
    border-radius:3px;
    background:#fff;
  }

  .ssign-checkbox-container {
    display: block;
    position: relative;
    padding-left: 35px;
    margin-bottom: 12px;
    cursor: pointer;
    font-size: 22px;
    font-family: sans-serif;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Hide the browser's default checkbox */
  .ssign-checkbox-container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }

  /* Create a custom checkbox */
  .ssign-checkmark {
    position: absolute;
    top: 0;
    left: 0;
    height: 25px;
    width: 25px;
    background-color: #eee;
  }

  /* On mouse-over, add a grey background color */
  .ssign-checkbox-container:hover input ~ .ssign-checkmark {
    background-color: #ccc;
  }

  /* When the checkbox is checked, add a blue background */
  .ssign-checkbox-container input:checked ~ .ssign-checkmark {
    background-color: #29AAE2;
  }

  /* Create the checkmark/indicator (hidden when not checked) */
  .ssign-checkmark:after {
    content: "";
    position: absolute;
    display: none;
  }

  /* Show the checkmark when checked */
  .ssign-checkbox-container input:checked ~ .ssign-checkmark:after {
    display: block;
  }

  /* Style the checkmark/indicator */
  .ssign-checkbox-container .ssign-checkmark:after {
    left: 9px;
    top: 5px;
    width: 5px;
    height: 10px;
    border: solid white;
    border-width: 0 3px 3px 0;
    -webkit-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    transform: rotate(45deg);
  }
  </style>

<!-- ==============================================================================================================-->
<!-- START DECLINE SIGNATURE                                                                                       -->
<!-- ==============================================================================================================-->


<style>
/* ========================================================================= */
/* START CSS: DECLINE                                                        */
/* ========================================================================= */

#decline-window {
  position: fixed; 
  height: 500px;
  width: 100%;
  bottom: 0;
  z-index: 50;
}

.s-sign-decline {
  bottom: 128px;
  display: block;
  position: relative;
  margin-left:auto;
  margin-right:auto;
  font-size: 14px;
  width: 700px;
  height: 300px;
  border: 10px solid #e8e8e8;
  background-color: #fff;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  border-radius: 12px;
}

.s-sign-decline--body {
  margin-top: 45px;
  position: absolute;
  left: 20px;
  right: 20px;
  top: 20px;
  bottom: 150px;
}

.s-sign-decline--body
canvas {
  position: absolute;
 left: 0;
 top: 0;
 width: 100%;
 height: 100%;
 border-radius: 4px;
 box-shadow: 0 0 5px rgba(0, 0, 0, 0.02) inset;
}

.s-sign-decline--body
.description {
 color: #7A7A7A;
 text-align: center;
 vertical-align: middle;
 font-size: 2em;
}

.s-sign-decline--footer
.btns {
  width: 100%;
  position: absolute;
  bottom:0;
  text-align: center;
  margin-top: 5em;
}


/* ========================================================================= */
/* END CSS: DECLINE                                                          */
/* ========================================================================= */
</style>

<!-- ====================================================================== -->
<!-- START HTML: DECLINE                                                    -->
<!-- ====================================================================== -->
<script type="text/javascript">
function tryDecline() {
  showLoadingDivTransparent();
  hideErrorDeclineMsg();
  var declineReason = j$('[id$="decline-reason"]').val();
  if (declineReasonHasProblem(declineReason)) {
    if (declineReasonBlank(declineReason)) {
      j$('#decline-reason-error-msg').append(
        '<span id="provide-reason" class="ssign_lightning_sys" style="color:red;">*{!tm["Please provide a reason for declining the signature."]}</span>' );
      fixDeclineWindowHeight('provide');
    }
    if (declineReasonTooLong(declineReason)) {
      j$('#decline-reason-error-msg').append(
        '<span id="decline-reason-too-long" class="ssign_lightning_sys" style="color:red;">*{!tm["Decline reason must be fewer than 256 characters."]}</span>' );
      fixDeclineWindowHeight('too-long');
    }
    hideLoadingDiv();
  } else {
    notifyOfDecline();
  }
}
function declineReasonBlank(declineReason) {
  return declineReason === null || declineReason === '' || declineReason === undefined;
}
function declineReasonTooLong(declineReason) {
  return declineReason.length > parseInt('{!DECLINE_REASON_MAX_LENGTH}');
}
function declineReasonHasProblem(declineReason) {
  if (declineReasonBlank(declineReason)) return true;
  if (declineReasonTooLong(declineReason)) return true;
  return false;
}
function hideErrorDeclineMsg() {
  j$('#decline-reason-error-msg').empty();
}
</script>
<div id="decline-window">
  <div class="s-sign-decline ssign_lightning_sys" style="margin: 0 auto; text-align: center;">
    <div class="ssign_logo_div">
      <a href="https://www.sdocs.com/s-sign/" target="_blank">
        <apex:outputPanel rendered="{!NOT(customLogo == null)}">
          <img src="{!customLogo}" id="custom-logo-decline" class="undraggable" unselectable="on"  style="height: 50px !important;width:auto; z-index: 11; position: absolute; top: 8px;"  />
          <script>
            var element = document.getElementById('custom-logo-decline');
            element.setAttribute('style', 'height: 50px !important;width:auto; z-index: 11; position: absolute; top: 8px; right: calc(50% - ' + (element.offsetWidth / 2) + 'px);');
          </script>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!NOT(customLogo != null)}">
          <img width="80" src="{!URLFOR($Resource.SSign_Images,'s-sign_logo.png')}" class="undraggable" unselectable="on"  style="z-index: 11; position: absolute; top: 8px;" />
        </apex:outputPanel>
      </a>
    </div>
  <div class="s-sign-decline--body">
    <div class="description">{!tm['Are you sure you want to decline this signature?']}</div>
    <br />
    <div style="width: 90%; margin: 0 auto;">
      <h5 class="description" style="text-align: left; font-size: .75em;">{!DECLINE_REASON_STATIC_TEXT}</h5>
      <apex:inputTextarea id="decline-reason" style="width: 100%; overflow: scroll; resize: none;" styleClass="ssign_lightning_sys" rows="4" value="{!reasonForDecline}"/>
    </div>
    <div id="decline-reason-error-msg" />
    <br />
    <br />
  </div>
  <div class="s-sign-decline--footer">                  
    <div class="btns">
      <table  border="0" width="100%">
        <tr>
          <td width="50%">
            <div class="slds-grid slds-m-around--small" style="bottom:0">
              <button id="confirm-decline-btn" class="slds-col slds-m-bottom--small slds-button slds-button--neutral" onclick="tryDecline();return false;">{!tm['Yes']}</button>
            </div>
          </td>
          <td>
            <div class="slds-grid slds-m-around--small" style="bottom:0">
              <button id="cancel-decline-btn" class="slds-col slds-m-bottom--small slds-button slds-button--neutral" onclick="hideErrorDeclineMsg();hideDeclineWindow();return false">{!tm['No']}</button>
            </div>
          </td>
        </tr>
      </table>    
    </div>
  </div>
</div>
</div>
<apex:actionFunction action="{!createSDocsForEmails}" name="notifyOfDecline" oncomplete="completeNotifyOfDecline();" reRender="error_messages" />
<apex:actionFunction action="{!notifyOfDecline}" name="completeNotifyOfDecline" oncomplete="confirmDecline();" reRender="error_messages,info-box-popup-panel" />

<!-- ====================================================================== -->
<!-- END HTML: DECLINE                                                      -->
<!-- ====================================================================== -->

<!-- ==============================================================================================================-->
<!-- END DECLINE SIGNATURE                                                                                         -->
<!-- ==============================================================================================================-->

<!-- ==============================================================================================================-->
<!-- START PRINT AND SIGN                                                                                          -->
<!-- ==============================================================================================================-->

<style>
/* ========================================================================= */
/* START CSS: PRINT AND SIGN                                                 */
/* ========================================================================= */

#print-window {
  position: fixed; 
  height: 500px;
  width: 100%;
  bottom: 0;
  z-index: 50;
}

.s-sign-print {
  bottom: 128px;
  display: block;
  position: relative;
  margin-left:auto;
  margin-right:auto;
  font-size: 14px;
  width: 700px;
  height: 200px;
  border: 10px solid #e8e8e8;
  background-color: #fff;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  border-radius: 12px;
}

.s-sign-print--body {
  margin-top: 45px;
  position: absolute;
  left: 20px;
  right: 20px;
  top: 20px;
  bottom: 150px;
}

.s-sign-print--body
canvas {
  position: absolute;
 left: 0;
 top: 0;
 width: 100%;
 height: 100%;
 border-radius: 4px;
 box-shadow: 0 0 5px rgba(0, 0, 0, 0.02) inset;
}

.s-sign-print--body
.description {
 color: #7A7A7A;
 text-align: center;
 vertical-align: middle;
 font-size: 2em;
}

.s-sign-print--footer
.btns {
  width: 100%;
  position: absolute;
  bottom:0;
  text-align: center;
  margin-top: 5em;
}


/* ========================================================================= */
/* END CSS: print                                                          */
/* ========================================================================= */
</style>

<!-- ====================================================================== -->
<!-- START HTML: PRINT AND SIGN                                             -->
<!-- ====================================================================== -->

<!-- ====================================================================== -->
<!-- START JS FOR SIGNATURE PAD TO LOOK BETTER                              -->
<!-- ====================================================================== -->
<script>
/*!
 * Signature Pad v3.0.0-beta.3 | https://github.com/szimek/signature_pad
 * (c) 2018 Szymon Nowak | Released under the MIT license
 */

//This will initialize the signature pad
var ssignCanvas = document.getElementById('sPad');
var ssignSignaturePad = new SignaturePad(ssignCanvas, {
  backgroundColor: 'rgb(255, 255, 255)'
});

 (function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global.SignaturePad = factory());
}(this, (function () { 'use strict';

  var Point = (function () {
      function Point(x, y, time) {
          this.x = x;
          this.y = y;
          this.time = time || Date.now();
      }
      Point.prototype.distanceTo = function (start) {
          return Math.sqrt(Math.pow(this.x - start.x, 2) + Math.pow(this.y - start.y, 2));
      };
      Point.prototype.equals = function (other) {
          return this.x === other.x && this.y === other.y && this.time === other.time;
      };
      Point.prototype.velocityFrom = function (start) {
          return this.time !== start.time
              ? this.distanceTo(start) / (this.time - start.time)
              : 0;
      };
      return Point;
  }());

  var Bezier = (function () {
      function Bezier(startPoint, control2, control1, endPoint, startWidth, endWidth) {
          this.startPoint = startPoint;
          this.control2 = control2;
          this.control1 = control1;
          this.endPoint = endPoint;
          this.startWidth = startWidth;
          this.endWidth = endWidth;
      }
      Bezier.fromPoints = function (points, widths) {
          var c2 = this.calculateControlPoints(points[0], points[1], points[2]).c2;
          var c3 = this.calculateControlPoints(points[1], points[2], points[3]).c1;
          return new Bezier(points[1], c2, c3, points[2], widths.start, widths.end);
      };
      Bezier.calculateControlPoints = function (s1, s2, s3) {
          var dx1 = s1.x - s2.x;
          var dy1 = s1.y - s2.y;
          var dx2 = s2.x - s3.x;
          var dy2 = s2.y - s3.y;
          var m1 = { x: (s1.x + s2.x) / 2.0, y: (s1.y + s2.y) / 2.0 };
          var m2 = { x: (s2.x + s3.x) / 2.0, y: (s2.y + s3.y) / 2.0 };
          var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
          var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
          var dxm = m1.x - m2.x;
          var dym = m1.y - m2.y;
          var k = l2 / (l1 + l2);
          var cm = { x: m2.x + dxm * k, y: m2.y + dym * k };
          var tx = s2.x - cm.x;
          var ty = s2.y - cm.y;
          return {
              c1: new Point(m1.x + tx, m1.y + ty),
              c2: new Point(m2.x + tx, m2.y + ty)
          };
      };
      Bezier.prototype.length = function () {
          var steps = 10;
          var length = 0;
          var px;
          var py;
          for (var i = 0; i <= steps; i += 1) {
              var t = i / steps;
              var cx = this.point(t, this.startPoint.x, this.control1.x, this.control2.x, this.endPoint.x);
              var cy = this.point(t, this.startPoint.y, this.control1.y, this.control2.y, this.endPoint.y);
              if (i > 0) {
                  var xdiff = cx - px;
                  var ydiff = cy - py;
                  length += Math.sqrt(xdiff * xdiff + ydiff * ydiff);
              }
              px = cx;
              py = cy;
          }
          return length;
      };
      Bezier.prototype.point = function (t, start, c1, c2, end) {
          return (start * (1.0 - t) * (1.0 - t) * (1.0 - t))
              + (3.0 * c1 * (1.0 - t) * (1.0 - t) * t)
              + (3.0 * c2 * (1.0 - t) * t * t)
              + (end * t * t * t);
      };
      return Bezier;
  }());

  function throttle(fn, wait) {
      if (wait === void 0) { wait = 250; }
      var previous = 0;
      var timeout = null;
      var result;
      var storedContext;
      var storedArgs;
      var later = function () {
          previous = Date.now();
          timeout = null;
          result = fn.apply(storedContext, storedArgs);
          if (!timeout) {
              storedContext = null;
              storedArgs = [];
          }
      };
      return function wrapper() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          var now = Date.now();
          var remaining = wait - (now - previous);
          storedContext = this;
          storedArgs = args;
          if (remaining <= 0 || remaining > wait) {
              if (timeout) {
                  clearTimeout(timeout);
                  timeout = null;
              }
              previous = now;
              result = fn.apply(storedContext, storedArgs);
              if (!timeout) {
                  storedContext = null;
                  storedArgs = [];
              }
          }
          else if (!timeout) {
              timeout = window.setTimeout(later, remaining);
          }
          return result;
      };
  }

  var SignaturePad = (function () {
      function SignaturePad(canvas, options) {
          if (options === void 0) { options = {}; }
          var _this = this;
          this.canvas = canvas;
          this.options = options;
          this._handleMouseDown = function (event) {
            //This should unselect anything, and prevent the error where images are
    //being dragged and preventing users to be able to draw signature
    //Essentially, when you went to mousedown to start drawing image, it would
    //drag the whole image of the page, so we just have to deselect everything when we go to sign
    if (window.getSelection) {window.getSelection().removeAllRanges();}
    else if (document.selection) {document.selection.empty();}
    sPadNotClicked = false;
    disableSubmitIfDataMissing();
              if (event.which === 1) {
                  _this._mouseButtonDown = true;
                  _this._strokeBegin(event);
              }
          };
          this._handleMouseMove = function (event) {
              if (_this._mouseButtonDown) {
                  _this._strokeMoveUpdate(event);
              }
          };
          this._handleMouseUp = function (event) {
            disableSubmitIfDataMissing();
              if (event.which === 1 && _this._mouseButtonDown) {
                  _this._mouseButtonDown = false;
                  _this._strokeEnd(event);
              }
          };
          this._handleTouchStart = function (event) {
              event.preventDefault();
              //This should unselect anything, and prevent the error where images are
    //being dragged and preventing users to be able to draw signature
    //Essentially, when you went to mousedown to start drawing image, it would
    //drag the whole image of the page, so we just have to deselect everything when we go to sign
    if (window.getSelection) {window.getSelection().removeAllRanges();}
    else if (document.selection) {document.selection.empty();}
    sPadNotClicked = false;
    disableSubmitIfDataMissing();
              if (event.targetTouches.length === 1) {
                  var touch = event.changedTouches[0];
                  _this._strokeBegin(touch);
              }
          };
          this._handleTouchMove = function (event) {
              event.preventDefault();
              var touch = event.targetTouches[0];
              _this._strokeMoveUpdate(touch);
          };
          this._handleTouchEnd = function (event) {
              var wasCanvasTouched = event.target === _this.canvas;
              if (wasCanvasTouched) {
                  event.preventDefault();
                  var touch = event.changedTouches[0];
                  _this._strokeEnd(touch);
              }
          };
          this.velocityFilterWeight = options.velocityFilterWeight || 0.7;
          this.minWidth = options.minWidth || 0.5;
          this.maxWidth = options.maxWidth || 2.5;
          this.throttle = ('throttle' in options ? options.throttle : 16);
          this.minDistance = ('minDistance' in options
              ? options.minDistance
              : 5);
          if (this.throttle) {
              this._strokeMoveUpdate = throttle(SignaturePad.prototype._strokeUpdate, this.throttle);
          }
          else {
              this._strokeMoveUpdate = SignaturePad.prototype._strokeUpdate;
          }
          this.dotSize =
              options.dotSize ||
                  function dotSize() {
                      return (this.minWidth + this.maxWidth) / 2;
                  };
          this.penColor = options.penColor || 'black';
          this.backgroundColor = options.backgroundColor || 'rgba(0,0,0,0)';
          this.onBegin = options.onBegin;
          this.onEnd = options.onEnd;
          this._ctx = canvas.getContext('2d');
          this.clear();
          this.on();
      }
      SignaturePad.prototype.clear = function () {
          var ctx = this._ctx;
          var canvas = this.canvas;
          ctx.fillStyle = this.backgroundColor;
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          ctx.fillRect(0, 0, canvas.width, canvas.height);
          this._data = [];
          this._reset();
          this._isEmpty = true;
      };
      SignaturePad.prototype.fromDataURL = function (dataUrl, options, callback) {
          var _this = this;
          if (options === void 0) { options = {}; }
          var image = new Image();
          var ratio = options.ratio || window.devicePixelRatio || 1;
          var width = options.width || this.canvas.width / ratio;
          var height = options.height || this.canvas.height / ratio;
          this._reset();
          image.onload = function () {
              _this._ctx.drawImage(image, 0, 0, width, height);
              if (callback) {
                  callback();
              }
          };
          image.onerror = function (error) {
              if (callback) {
                  callback(error);
              }
          };
          image.src = dataUrl;
          this._isEmpty = false;
      };
      SignaturePad.prototype.toDataURL = function (type, encoderOptions) {
          if (type === void 0) { type = 'image/png'; }
          switch (type) {
              case 'image/svg+xml':
                  return this._toSVG();
              default:
                  return this.canvas.toDataURL(type, encoderOptions);
          }
      };
      SignaturePad.prototype.on = function () {
          this.canvas.style.touchAction = 'none';
          this.canvas.style.msTouchAction = 'none';
          if (window.PointerEvent) {
              this._handlePointerEvents();
          }
          else {
              this._handleMouseEvents();
              if ('ontouchstart' in window) {
                  this._handleTouchEvents();
              }
          }
      };
      SignaturePad.prototype.off = function () {
          this.canvas.style.touchAction = 'auto';
          this.canvas.style.msTouchAction = 'auto';
          this.canvas.removeEventListener('pointerdown', this._handleMouseDown);
          this.canvas.removeEventListener('pointermove', this._handleMouseMove);
          document.removeEventListener('pointerup', this._handleMouseUp);
          this.canvas.removeEventListener('mousedown', this._handleMouseDown);
          this.canvas.removeEventListener('mousemove', this._handleMouseMove);
          document.removeEventListener('mouseup', this._handleMouseUp);
          this.canvas.removeEventListener('touchstart', this._handleTouchStart);
          this.canvas.removeEventListener('touchmove', this._handleTouchMove);
          this.canvas.removeEventListener('touchend', this._handleTouchEnd);
      };
      SignaturePad.prototype.isEmpty = function () {
          return this._isEmpty;
      };
      SignaturePad.prototype.fromData = function (pointGroups) {
          var _this = this;
          this.clear();
          this._fromData(pointGroups, function (_a) {
              var color = _a.color, curve = _a.curve;
              return _this._drawCurve({ color: color, curve: curve });
          }, function (_a) {
              var color = _a.color, point = _a.point;
              return _this._drawDot({ color: color, point: point });
          });
          this._data = pointGroups;
      };
      SignaturePad.prototype.toData = function () {
          return this._data;
      };
      SignaturePad.prototype._strokeBegin = function (event) {
          var newPointGroup = {
              color: this.penColor,
              points: []
          };
          if (typeof this.onBegin === 'function') {
              this.onBegin(event);
          }
          this._data.push(newPointGroup);
          this._reset();
          this._strokeUpdate(event);
      };
      SignaturePad.prototype._strokeUpdate = function (event) {
          var x = event.clientX;
          var y = event.clientY;
          var point = this._createPoint(x, y);
          var lastPointGroup = this._data[this._data.length - 1];
          var lastPoints = lastPointGroup.points;
          var lastPoint = lastPoints.length > 0 && lastPoints[lastPoints.length - 1];
          var isLastPointTooClose = lastPoint
              ? point.distanceTo(lastPoint) <= this.minDistance
              : false;
          var color = lastPointGroup.color;
          if (!lastPoint || !(lastPoint && isLastPointTooClose)) {
              var curve = this._addPoint(point);
              if (!lastPoint) {
                  this._drawDot({ color: color, point: point });
              }
              else if (curve) {
                  this._drawCurve({ color: color, curve: curve });
              }
              lastPoints.push({
                  time: point.time,
                  x: point.x,
                  y: point.y
              });
          }
      };
      SignaturePad.prototype._strokeEnd = function (event) {
          this._strokeUpdate(event);
          if (typeof this.onEnd === 'function') {
              this.onEnd(event);
          }
      };
      SignaturePad.prototype._handlePointerEvents = function () {
          this._mouseButtonDown = false;
          this.canvas.addEventListener('pointerdown', this._handleMouseDown);
          this.canvas.addEventListener('pointermove', this._handleMouseMove);
          document.addEventListener('pointerup', this._handleMouseUp);
      };
      SignaturePad.prototype._handleMouseEvents = function () {
          this._mouseButtonDown = false;
          this.canvas.addEventListener('mousedown', this._handleMouseDown);
          this.canvas.addEventListener('mousemove', this._handleMouseMove);
          document.addEventListener('mouseup', this._handleMouseUp);
      };
      SignaturePad.prototype._handleTouchEvents = function () {
          this.canvas.addEventListener('touchstart', this._handleTouchStart);
          this.canvas.addEventListener('touchmove', this._handleTouchMove);
          this.canvas.addEventListener('touchend', this._handleTouchEnd);
      };
      SignaturePad.prototype._reset = function () {
          this._lastPoints = [];
          this._lastVelocity = 0;
          this._lastWidth = (this.minWidth + this.maxWidth) / 2;
          this._ctx.fillStyle = this.penColor;
      };
      SignaturePad.prototype._createPoint = function (x, y) {
          var rect = this.canvas.getBoundingClientRect();
          return new Point(x - rect.left, y - rect.top, new Date().getTime());
      };
      SignaturePad.prototype._addPoint = function (point) {
          var _lastPoints = this._lastPoints;
          _lastPoints.push(point);
          if (_lastPoints.length > 2) {
              if (_lastPoints.length === 3) {
                  _lastPoints.unshift(_lastPoints[0]);
              }
              var widths = this._calculateCurveWidths(_lastPoints[1], _lastPoints[2]);
              var curve = Bezier.fromPoints(_lastPoints, widths);
              _lastPoints.shift();
              return curve;
          }
          return null;
      };
      SignaturePad.prototype._calculateCurveWidths = function (startPoint, endPoint) {
          var velocity = this.velocityFilterWeight * endPoint.velocityFrom(startPoint) +
              (1 - this.velocityFilterWeight) * this._lastVelocity;
          var newWidth = this._strokeWidth(velocity);
          var widths = {
              end: newWidth,
              start: this._lastWidth
          };
          this._lastVelocity = velocity;
          this._lastWidth = newWidth;
          return widths;
      };
      SignaturePad.prototype._strokeWidth = function (velocity) {
          return Math.max(this.maxWidth / (velocity + 1), this.minWidth);
      };
      SignaturePad.prototype._drawCurveSegment = function (x, y, width) {
          var ctx = this._ctx;
          ctx.moveTo(x, y);
          ctx.arc(x, y, width, 0, 2 * Math.PI, false);
          this._isEmpty = false;
      };
      SignaturePad.prototype._drawCurve = function (_a) {
          var color = _a.color, curve = _a.curve;
          var ctx = this._ctx;
          var widthDelta = curve.endWidth - curve.startWidth;
          var drawSteps = Math.floor(curve.length()) * 2;
          ctx.beginPath();
          ctx.fillStyle = color;
          for (var i = 0; i < drawSteps; i += 1) {
              var t = i / drawSteps;
              var tt = t * t;
              var ttt = tt * t;
              var u = 1 - t;
              var uu = u * u;
              var uuu = uu * u;
              var x = uuu * curve.startPoint.x;
              x += 3 * uu * t * curve.control1.x;
              x += 3 * u * tt * curve.control2.x;
              x += ttt * curve.endPoint.x;
              var y = uuu * curve.startPoint.y;
              y += 3 * uu * t * curve.control1.y;
              y += 3 * u * tt * curve.control2.y;
              y += ttt * curve.endPoint.y;
              var width = curve.startWidth + ttt * widthDelta;
              this._drawCurveSegment(x, y, width);
          }
          ctx.closePath();
          ctx.fill();
      };
      SignaturePad.prototype._drawDot = function (_a) {
          var color = _a.color, point = _a.point;
          var ctx = this._ctx;
          var width = typeof this.dotSize === 'function' ? this.dotSize() : this.dotSize;
          ctx.beginPath();
          this._drawCurveSegment(point.x, point.y, width);
          ctx.closePath();
          ctx.fillStyle = color;
          ctx.fill();
      };
      SignaturePad.prototype._fromData = function (pointGroups, drawCurve, drawDot) {
          for (var _i = 0, pointGroups_1 = pointGroups; _i < pointGroups_1.length; _i++) {
              var group = pointGroups_1[_i];
              var color = group.color, points = group.points;
              if (points.length > 1) {
                  for (var j = 0; j < points.length; j += 1) {
                      var basicPoint = points[j];
                      var point = new Point(basicPoint.x, basicPoint.y, basicPoint.time);
                      this.penColor = color;
                      if (j === 0) {
                          this._reset();
                      }
                      var curve = this._addPoint(point);
                      if (curve) {
                          drawCurve({ color: color, curve: curve });
                      }
                  }
              }
              else {
                  this._reset();
                  drawDot({
                      color: color,
                      point: points[0]
                  });
              }
          }
      };
      SignaturePad.prototype._toSVG = function () {
          var _this = this;
          var pointGroups = this._data;
          var ratio = Math.max(window.devicePixelRatio || 1, 1);
          var minX = 0;
          var minY = 0;
          var maxX = this.canvas.width / ratio;
          var maxY = this.canvas.height / ratio;
          var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
          svg.setAttribute('width', this.canvas.width.toString());
          svg.setAttribute('height', this.canvas.height.toString());
          this._fromData(pointGroups, function (_a) {
              var color = _a.color, curve = _a.curve;
              var path = document.createElement('path');
              if (!isNaN(curve.control1.x) &&
                  !isNaN(curve.control1.y) &&
                  !isNaN(curve.control2.x) &&
                  !isNaN(curve.control2.y)) {
                  var attr = "M " + curve.startPoint.x.toFixed(3) + "," + curve.startPoint.y.toFixed(3) + " " +
                      ("C " + curve.control1.x.toFixed(3) + "," + curve.control1.y.toFixed(3) + " ") +
                      (curve.control2.x.toFixed(3) + "," + curve.control2.y.toFixed(3) + " ") +
                      (curve.endPoint.x.toFixed(3) + "," + curve.endPoint.y.toFixed(3));
                  path.setAttribute('d', attr);
                  path.setAttribute('stroke-width', (curve.endWidth * 2.25).toFixed(3));
                  path.setAttribute('stroke', color);
                  path.setAttribute('fill', 'none');
                  path.setAttribute('stroke-linecap', 'round');
                  svg.appendChild(path);
              }
          }, function (_a) {
              var color = _a.color, point = _a.point;
              var circle = document.createElement('circle');
              var dotSize = typeof _this.dotSize === 'function' ? _this.dotSize() : _this.dotSize;
              circle.setAttribute('r', dotSize.toString());
              circle.setAttribute('cx', point.x.toString());
              circle.setAttribute('cy', point.y.toString());
              circle.setAttribute('fill', color);
              svg.appendChild(circle);
          });
          var prefix = 'data:image/svg+xml;base64,';
          var header = '<svg' +
              ' xmlns="http://www.w3.org/2000/svg"' +
              ' xmlns:xlink="http://www.w3.org/1999/xlink"' +
              (" viewBox=\"" + minX + " " + minY + " " + maxX + " " + maxY + "\"") +
              (" width=\"" + maxX + "\"") +
              (" height=\"" + maxY + "\"") +
              '>';
          var body = svg.innerHTML;
          if (body === undefined) {
              var dummy = document.createElement('dummy');
              var nodes = svg.childNodes;
              dummy.innerHTML = '';
              for (var i = 0; i < nodes.length; i += 1) {
                  dummy.appendChild(nodes[i].cloneNode(true));
              }
              body = dummy.innerHTML;
          }
          var footer = '</svg>';
          var data = header + body + footer;
          return prefix + btoa(data);
      };
      return SignaturePad;
  }());

  return SignaturePad;

})));
</script>
<!-- ====================================================================== -->
<!-- END JS FOR SIGNATURE PAD TO LOOK BETTER                                -->
<!-- ====================================================================== -->

<div id="print-window">
  <div class="s-sign-print ssign_lightning_sys" >
    <div class="ssign_logo_div">
      <a href="https://www.sdocs.com/s-sign/" target="_blank">
        <apex:outputPanel rendered="{!NOT(customLogo == null)}">
          <img id="custom-logo-print" src="{!customLogo}" class="undraggable" unselectable="on"  style="height: 50px !important;width:auto; z-index: 11; position: absolute; top: 8px; left: 290px;"  />
          <script>
            var element = document.getElementById('custom-logo-print');
            element.setAttribute('style', 'height: 50px !important;width:auto; z-index: 11; position: absolute; top: 8px; left: calc(50% - ' + (element.offsetWidth / 2) + 'px);');
          </script>
        </apex:outputPanel>
        <apex:outputPanel rendered="{!NOT(customLogo != null)}">
          <img width="80" src="{!URLFOR($Resource.SSign_Images,'s-sign_logo.png')}" class="undraggable" unselectable="on"  style="z-index: 11; position: absolute; top: 8px; left: 290px;" />
        </apex:outputPanel>
      </a>
    </div>
  <div class="s-sign-print--body">
    <div class="description">{!tm['Are you sure you want to print this document?']}</div>
    <br />
    <div style="width: 90%; margin: 0 auto;">
      <div class="description" style="font-size: .75em;">{!tm['Print Message']}</div>
    </div>
    <br />
    <br />
  </div>
  <div class="s-sign-print--footer">                  
    <div class="btns">
      <table  border="0" width="100%">
        <tr>
          <td width="50%">
            <div class="slds-grid slds-m-around--small" style="bottom:0">
              <button id="confirm-print-btn" class="slds-col slds-m-bottom--small slds-button slds-button--neutral" onclick="downloadUnsignedDocument();hidePrintWindow();return false;">{!tm['Yes']}</button>
            </div>
          </td>
          <td>
            <div class="slds-grid slds-m-around--small" style="bottom:0">
              <button id="cancel-print-btn" class="slds-col slds-m-bottom--small slds-button slds-button--neutral" onclick="hidePrintWindow();return false">{!tm['No']}</button>
            </div>
          </td>
        </tr>
      </table>    
    </div>
  </div>
  <script> 
    fixPrintWindowHeight();
  </script>
</div>
</div>
<apex:actionFunction name="notifyOfPrint" oncomplete="confirmPrint();" reRender="error_messages,info-box-popup-panel" />

<!-- ====================================================================== -->
<!-- END HTML: PRINT AND SIGN                                               -->
<!-- ====================================================================== -->

<!-- ==============================================================================================================-->
<!-- END PRINT AND SIGN                                                                                            -->
<!-- ==============================================================================================================-->

<!-- ==============================================================================================================-->
<!-- START WINDOW ONLOAD                                                                                           -->
<!-- ==============================================================================================================-->

<!-- ==============================================================================================================-->
<!-- END WINDOW ONLOAD                                                                                             -->
<!-- ==============================================================================================================-->

<!-- ==============================================================================================================-->
<!-- START ZERO CLICK                                                                                              -->
<!-- ==============================================================================================================-->
<script type="text/javascript">
var zeroClick = '{!isZeroClick}' == 'true';

function zeroClickSigningProcess() {
  showLoadingDiv();
  getSSignInputFieldsForThisSigner();
}

function autoFillZeroClickFields () {
  for (var inputFieldID in ssignInputFields) {
    var currentInputField = ssignInputFields[inputFieldID];
    var currentFieldType = currentInputField['fieldType'];
    if (isSignatureOrInitials(currentFieldType)) {
      setupZeroClickSignature(inputFieldID);
    }
  }
}

function zeroClickSigningProcessHelper() {
  j$('#auto-signed-last-signer').hide();
  showInfoBox();
  getLoadingDivSpinner().hide();
  if (signerAlreadySigned()) {
    showInfoBox(true);    
  } else {
    autoFillZeroClickFields();
    addSignature('submit');
  }
}

function setupZeroClickSignature(inputFieldID) {
  setCurrentInputFieldID(inputFieldID);
  addTextToSignature();
}

function addTextToSignature() {
  showSignaturePad();
  j$('#text-to-signature-checkbox').prop('checked', true);
  j$('#text-to-signature-checkbox').checked = true;
  checkboxAction();
  var signerNameInput = j$('#signer-name');
  signerNameInput.prop('value', j$('[id$="csdSignerName"]').val());
  j$('#text-as-signature-span').html(j$('#signer-name').val());
  addSignature();
}

function postSigningActions() {
  var autoSignMessage = j$('#auto-signing-message');
  if (autoSignMessage !== null && autoSignMessage !== undefined) {
    autoSignMessage.css('display', 'none !important');
  }
  showInfoBoxFinalHelper();
}

function redirectSignerToURL() {
  if (('{!AND(NOT(isSignInPersonDefault), NOT(enabledForCAC))}' === 'true' || ('{!csd.isLastSigner}' === 'true' && '{!nextSignatureCaptureURL == null}' === 'true')) && '{!redirectToURL}' === 'true') {
    window.location.replace('{!redirectURL}');
    console.log('Tried to redirect to {!redirectURL} but failed.');
    return;
  }
}

</script>

<apex:outputPanel id="signingFunctionsPanel">
  <script>
    function showInfoBoxFinalHelper () {
      if ('{!hasErrors}' !== 'true') {
        showInfoBoxFinal();
      }
    }
  </script>
</apex:outputPanel>

<!-- ==============================================================================================================-->
<!-- END ZERO CLICK                                                                                                -->
<!-- ==============================================================================================================-->

<apex:outputPanel rendered="{!usingTopazForSigningProcess}">
<!-- ==============================================================================================================-->
<!-- START TOPAZ JS                                                                                                -->
<!-- ==============================================================================================================-->
<script>

var tmr;
function initiateTopazPad () {
  var ctx = document.getElementById('sPad').getContext('2d');
  SetDisplayXSize( 500 );
  SetDisplayYSize( 100 );
  SetTabletState(0, tmr);
  SetJustifyMode(0);
  ClearTablet();
  if(tmr == null) {
    tmr = SetTabletState(1, ctx, 50);
  }
  else {
    SetTabletState(0, tmr);
    tmr = null;
    tmr = SetTabletState(1, ctx, 50);
  }
}

function clearTopazPad () {
  ClearTablet();
}

function resetTopazPad () {
  SetTabletState(0, tmr);
  SetSigCompressionMode(1);
}

initiateTopazPad();
</script>
<!-- ==============================================================================================================-->
<!-- END TOPAZ JS                                                                                                  -->
<!-- ==============================================================================================================-->
</apex:outputPanel>
</apex:outputPanel>
</apex:outputPanel>
</apex:form>
</apex:page>