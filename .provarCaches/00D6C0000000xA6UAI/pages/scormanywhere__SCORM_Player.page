<apex:page cache="false" docType="html-5.0" applyHtmlTag="false" controller="scormanywhere.PlayerController"
           sidebar="false" showHeader="false" standardStyleSheets="false" action="{!init}">
    <html style="overflow: auto" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en">
        <head>
            <!-- Primary Meta Tags -->
            <title>{!playerCourseWrapper.Title}</title>
            <meta name="title" property="og:title" content="{!playerCourseWrapper.Title}"/>
            <meta name="description" property="og:description" content="{!playerCourseWrapper.Description}"/>

            <!-- Open Graph / Facebook -->
            <meta property="og:title" content="{!playerCourseWrapper.Title}"/>
            <meta property="og:description" content="{!playerCourseWrapper.Description}"/>
            <meta property="og:image" content="{!playerCourseWrapper.ThumbPath}"/>
            <meta property="og:image:secure_url" content="{!playerCourseWrapper.ThumbPath}"/>
            <meta property="og:image:width" content="400"/>
            <meta property="og:image:height" content="400"/>
            <meta property="og:type" content="website" />

            <!-- Twitter -->
            <meta property="twitter:card" content="summary"/>
            <meta property="twitter:description" content="{!playerCourseWrapper.Description}"/>
            <meta property="twitter:image" content="{!playerCourseWrapper.ThumbPath}"/>
        </head>


        <body>
            <apex:slds />
            <script>
                window.onload = function(){
                    if ('{!playerSettings.isFromSimpleMedia}' === 'true' && '{!playerSettings.isLaunchInNewWindow}' === 'true'
                        && '{!playerCourseWrapper.PlayerType}' === 'interaction') {
                        if (window && window.opener) {
                            window.opener.postMessage(JSON.stringify({
                                playerOnLoadVT : true,
                                playerType     : '{!playerCourseWrapper.PlayerType}',
                                state          : '{!playerCourseWrapper.State}'
                            }), '*');
                        }
                    } else if ('{!playerSettings.isFromSimpleMedia}' === 'true') {
                        window.parent.postMessage(JSON.stringify({
                            playerOnLoadVT : true,
                            playerType     : '{!playerCourseWrapper.PlayerType}',
                            state          : '{!playerCourseWrapper.State}'
                        }), '*');
                    }
                };
            </script>
            <apex:outputpanel rendered="{!isShowBackLink}" styleClass="slds-scope">
                <a href="#" id="back_to_preview" onclick="goBackPreviousPage()" style="font-size: small; padding: 5px 5px 10px; display: block; background-color:#fff;">{!$Label.Back_To_Previous_Page}</a>
                <script>
                    function goBackPreviousPage(){
                        if('{!playerCourseWrapper.State}' == 'Enable'){
                            let isVideo = '{!playerCourseWrapper.PlayerType}' == 'video';
                            if(isVideo && videoLogic){
                                videoLogic.OnUnload();
                            }
                            let isAudio = '{!playerCourseWrapper.PlayerType}' == 'audio';
                            if(isAudio && audioLogic){
                                audioLogic.OnUnload();
                            }
							let isYoutube = '{!playerCourseWrapper.PlayerType}' == 'youtube';
                            if(isYoutube && youtubeLogic){
                                youtubeLogic.onUnload();
                            }
							let isVimeo = '{!playerCourseWrapper.PlayerType}' == 'vimeo';
                            if(isVimeo && vimeoLogic){
                                vimeoLogic.onUnload();
                            }
							let isVidyard = '{!playerCourseWrapper.PlayerType}' == 'vidyard';
                            if(isVidyard && vidyardLogic){
                                vidyardLogic.onUnload();
                            }
							
                        }

                        setTimeout(
                            function(){
                                if (sforce && sforce.one && sforce.one.navigateToSObject) {
                                    sforce.one.navigateToSObject('{!PlayerCourseWrapper.Id}');
                                } else {
                                    window.history.back();
                                }
                            }, 500
                        );
                    }
                </script>
                <style>
                    .vidyard_player {
                        top: 30px;
                    }
                </style>
            </apex:outputpanel>

            <apex:outputpanel rendered="{!playerSettings.isChatter == true}" layout="none">
                <script>
                    var win = window.parent;
                    var data = {
                        context: 'chatter',
                        domain: window.location.origin
                    };
                    function extractDomain(url) {
                        var domain;
                        if (url.indexOf("://") > -1) {
                          domain = url.split('/')[2];
                        }
                        else {
                          domain = url.split('/')[0];
                        }
                        domain = domain.split(':')[0];
                        return domain;
                    }
                    var domainExtracted = 'https://'+extractDomain(document.referrer);
                    win.postMessage(JSON.stringify(data), domainExtracted );
                </script>
            </apex:outputpanel>
            <apex:outputpanel rendered="{!OR((playerCourseWrapper.State == 'GeoDisable'),(playerCourseWrapper.State == 'Disable'))}" layout="none">
                <c:PlayerDisabled message="{!playerCourseWrapper.Message}"  inactive="{!playerCourseWrapper.State == 'Disable'}" />
            </apex:outputpanel>

            <apex:outputpanel rendered="{! AND(playerCourseWrapper.State == 'Enable', !playerCourseWrapper.isActive, !playerSettings.isTestLaunch, !playerSettings.isChatterSimpleMedia )}" layout="none">
                <c:PlayerDisabled message="{!playerCourseWrapper.Message}" inactive="true" />
            </apex:outputpanel>

            <apex:outputpanel rendered="{!playerCourseWrapper.State == 'Error'}" layout="none">
                <c:PlayerError message="{!playerCourseWrapper.Message}" visible="true" viewMessage="{!$Label.scormanywhere__we_have_technical_issues}" />
            </apex:outputpanel>

            <apex:outputpanel rendered="{!playerCourseWrapper.State == 'ConvertError'}" layout="none">
                <c:PlayerError message="{!playerCourseWrapper.Message}" visible="true" viewMessage="{!$Label.scormanywhere__media_upload_failed_delete_media_record}" />
            </apex:outputpanel>

            <apex:outputpanel rendered="{!playerCourseWrapper.State == 'InProgress'}" layout="none">
                <c:PlayerInProgress message="{!playerCourseWrapper.Message}" progress="{!playerCourseWrapper.Progress}" />
            </apex:outputpanel>

            <apex:outputpanel rendered="{! AND(playerCourseWrapper.State == 'Enable', OR(playerCourseWrapper.isActive, playerSettings.isTestLaunch, playerSettings.isChatterSimpleMedia))}" layout="none">
                <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType != 'interaction'}" layout="none">
                    <script>
                        var videoId = JSON.parse('{!playerCourseWrapper.LaunchData}').ManifestFile;
                    </script>
                </apex:outputpanel>
                <script>
                    var tPath = '{!JSENCODE(course.SCORM_Training_Path__c)}';
                    var uploadId = tPath.split('/')[0];
                    var courseId = tPath.split('/')[1];
                    var courseType = '{!playerCourseWrapper.PlayerType}';
                    var sessionData = '{!JSENCODE(sessionData)}';
                    var tmpTranscriptId = '{!JSENCODE(transcriptVFPId)}';
                    var tmpCourseId = '{!JSENCODE(courseVFPId)}';
                    var userName = '{!JSENCODE($User.FirstName + " " + $User.LastName)}';
                    var userFirstName = '{!JSENCODE($User.FirstName)}';
                    var userLastName =  '{!JSENCODE($User.LastName)}';
                    var userMail = '{!JSENCODE($User.email)}';
                    var userId = '{!userInfo.UserId}';
                    var isEnablePlayerControl = '{!playerSettings.isEnablePlayerControl}' == 'true';
                    var isPublicLink = '{!playerSettings.isPublicLink}' == 'true';
                    var isLRSPackageInstalled = {!isLRSPackageInstalled};
                    var isShowConsoleLog = false;
                    try{
                        let cookieName = 'vtShowConsoleLog';
                        var matches = document.cookie.match(new RegExp(
                            "(?:^|; )" + cookieName.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
                        ));
                        if(matches){
                            isShowConsoleLog = true;
                        }
                    }catch(Exx){

                    }

                    var sessionModel = {
                        bookmarkEnd: "",
                        progress: 0,
                        transcriptId: tmpTranscriptId,
                        courseId: tmpCourseId,
                        launchId: ""
                    }
                    var session = sessionData === '' ? sessionModel : JSON.parse(sessionData);
                    var courseTitle = '{!JSENCODE(playerCourseWrapper.Title)}';
                    session.state = session.state ? session.state : session.bookmarkEnd ? $.extend({}, session) : {};
                    session.state.launchId = '{!launchIdGuid}';
                    session.state.ip = '{!userInfo.IpAddress}';
                    session.state.userAgent = '{!JSENCODE(userInfo.MyUserAgent)}';
                    session.state.autoplay = JSON.parse('{!courseSettingsToJSON}').autoPlay;
                    if(isPublicLink && session.state){
                        session.state.bookmarkEnd = undefined;
                        session.state.interactive = undefined;
                    }

                    ADL.videoprofile.configure({
                        name: courseTitle,
                        description: courseTitle,
                        actor: {
                            objectType: "Agent",
                            name: userName
                        },
                        objectId: tmpCourseId,
                        registration: session.state.launchId
                    })
                    ADL.lrsEnabled = {!isLRSPackageInstalled};

                    function sendState(data, callbackHandler) {
                        if(isShowConsoleLog){
                            console.info('Post data called');
                            console.log(data);
                        }
                        //data.autoplay = 'true';
                        data.internalUrl = getParameterByName('internalUrl');
                        data.isExternalLaunch = getParameterByName('DisableVersioning');
                        data.isNewTranscriptStats  = getParameterByName('isCreateTranscriptStats');
                        let isFromSimpleMedia = '{!playerSettings.isFromSimpleMedia}';
                        let playerType = '{!playerCourseWrapper.PlayerType}';
                        if (document.referrer && isFromSimpleMedia === 'true'
                            && playerType === 'interaction' && window.opener) {
                            window.opener.postMessage(data, '*');
                        } else if (document.referrer && isFromSimpleMedia === 'true'){
                            pushDataPostMessage(data, document.referrer);
                        }
                        var changedData = JSON.stringify(data);
                        try {
                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.PlayerController.setState}', tmpTranscriptId, "org", changedData, function (result, event) {
                                if (event.type === 'exception') {
                                    if(isShowConsoleLog){
                                        console.log(event.message);
                                    }
                                    var jsonCallBack = { type: 'SFSetStateException', message: event.message, errorCode: '003', userMessage: "{!$Label.error1}" };
                                    var pattLogout = /Logged in/g;

                                    if (event.message.indexOf('List has no rows for') != -1) {
                                        //transcript or course was deleted
                                        jsonCallBack.errorCode = '001';
                                        jsonCallBack.userMessage = "{!$Label.error1}";
                                    }
                                    else if (pattLogout.test(event.message) == true) {
                                        //logout or session timeout
                                        jsonCallBack.errorCode = '002';
                                        jsonCallBack.userMessage = "{!$Label.error1}";
                                    }
                                    //callbackHandler(JSON.stringify(jsonCallBack));
                                } else if (!event.status) {
                                    if(isShowConsoleLog){
                                        console.error(event.message);
                                    }
                                }
                                if( '{!playerSettings.isTestLaunch}' == 'true'
                                            && '{!playerCourseWrapper.TrainingType}' == 'aicc'
                                            && isFromSimpleMedia == 'false'
                                            && data.isLmsFinished){
                                    if('{!isShowBackLink}' == 'true'){
                                        goBackPreviousPage();
                                    }else{
                                        window.close();
                                    }
                                }
                            },
                                { buffer: false, escape: true, timeout: 60000 });
                        }
                        catch (Exx) {
                            if(isShowConsoleLog){
                                console.log(Exx);
                            }
                        }
                    }
                    function sendStateFromLocalStorage(transcriptFromPath, data, callbackHandler){
                        if(isShowConsoleLog){
                           console.info('Post data called');
                        }
                        var rootActivityId = "org";
                        if(isShowConsoleLog){
                           console.log('rootActivityId = [%s]', rootActivityId);
                        }
                        var jsonData = JSON.parse(data);
                        var myAutoplay = JSON.parse('{!courseSettingsToJSON}').autoPlay;
                        jsonData.autoplay = myAutoplay;
                        jsonData.isExternalLaunch = getParameterByName('DisableVersioning');
                        var isExitClicked = false;
                        if (jsonData.isLmsFinished === true) {
                            isExitClicked = true;
                            jsonData.isLmsFinished = false;
                        }
                        data = JSON.stringify(jsonData);
                        var changedData = JSON.stringify(jsonData);
                        try {
                          Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.PlayerController.setState}', transcriptFromPath, rootActivityId , changedData, function(result, event) {
                            if (event.status) {
                              if(isShowConsoleLog){
                                console.info('Post data - OK!');
                                console.log(data);
                              }
                              if (isExitClicked && isPlaylist == false) {
                                 exitCourse();
                              }
                            } else if (event.type === 'exception') {
                                var jsonCallBack =  {type:'SFSetStateException', message : event.message, errorCode : '003', userMessage : "{!$Label.Error1}"};
                                var pattLogout = /Logged in/g;
                                if (event.message.indexOf('List has no rows for') != -1) {
                                    //transcript or course was deleted
                                    jsonCallBack.errorCode = '001';
                                    jsonCallBack.userMessage = "{!$Label.Error1}";
                                } else if (pattLogout.test(event.message) == true) {
                                    //logout or session timeout
                                    jsonCallBack.errorCode = '002';
                                    jsonCallBack.userMessage = "{!$Label.Error1}";
                                }
                                    callbackHandler(JSON.stringify(jsonCallBack));
                                } else {
                                  if(isShowConsoleLog){
                                    console.error(event.message);
                                  }
                                }
                               }, { buffer: false, escape: true, timeout: 60000 });
                        } catch (Exx) {
                            if(isShowConsoleLog){
                                console.log(Exx);
                            }
                        }
                    }

                    function myExtractDomain(url) {
                        var domainMyExtractDomain;
                        if (url.indexOf("://") > -1) {
                            domainMyExtractDomain = url.split('/')[2];
                        }
                        else {
                            domainMyExtractDomain = url.split('/')[0];
                        }
                        domainMyExtractDomain = domainMyExtractDomain.split(':')[0];
                        return domainMyExtractDomain;
                    }

                    function pushDataPostMessage(pmData, pmUrl) {
                        if(isShowConsoleLog){
                            console.log('pushDataPostMessage: ');
                            console.log('pmUrl: ' + pmUrl);
                            console.dir(pmData);
                        }

                        var winPushDataPostMessage = window.parent;
                        var domainExtracted = 'https://' + myExtractDomain(pmUrl);
                        winPushDataPostMessage.postMessage(JSON.stringify(pmData), domainExtracted);
                    }

                    function getParameterByName(name, url) {
                        if (!url) url = window.location.href;
                        name = name.replace(/[\[\]]/g, "\\$&");
                        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                            results = regex.exec(url);
                        if (!results) return null;
                        if (!results[2]) return '';
                        return decodeURIComponent(results[2].replace(/\+/g, " "));
                    }
                    var manifest = '{!JSENCODE(playerCourseWrapper.Manifest)}';
                        var contentAdlData = {};
                        if (manifest != '') {
                        try {
                           contentAdlData = JSON.parse(manifest);
                        } catch (err) {
                            contentAdlData = manifest;
                        }
                    }
                </script>

                <apex:outputpanel rendered="{!playerCourseWrapper.isFromArticle}" id="all">
                    <c:PlayerArticle courseInfo="{!playerCourseWrapper}" />
                </apex:outputpanel>

                <apex:outputpanel rendered="{!!playerCourseWrapper.isFromArticle}" layout="none">
                    <apex:includeScript value="{!URLFOR($Resource.scormanywhere__SCORM_Library, 'common/js/jquery-3.5.1.min.js')}" />
                    <apex:includeScript value="{!URLFOR($Resource.scormanywhere__SCORM_Library, 'common/js/sessiontracker.js')}" />
                    <apex:includeScript value="{!URLFOR($Resource.scormanywhere__SCORM_Player, 'xapi/videoprofile.js')}" />

                    <c:PlayerError message="{!playerCourseWrapper.Message}" visible="false" viewMessage="{!$Label.scormanywhere__we_have_technical_issues}" />

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'video'}" layout="none">
                        <apex:outputpanel rendered="{!playerSettings.isFromSimpleMedia}" layout="none">
                            <script>
                                window.addEventListener('message', function(event){
                                    try {
                                        let data   = JSON.parse(event.data);
                                        if ( typeof data === 'object' && data.name === 'simplemedia' ) {
                                            if(videoLogic){
                                                videoLogic.OnUnload();
                                            }
                                        }
                                    } catch (e) {
                                    }
                                });
                            </script>
                        </apex:outputpanel>
                        <c:PlayerVideo launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" thumbnailPath="{!playerCourseWrapper.ThumbPath}" displayLgf="{!playerSettings.displayLGF}" isIe="{!userInfo.IsIe}" isTestFromLex="{!isShowBackLink}"/>
                        <apex:outputpanel rendered="{!playerSettings.displayLGF}" layout="none">
                            <c:LeadGenerationForm courseSettings="{!courseSettingsToJSON}" nameLgf="{!playerSettings.nameLGF}"/>
                        </apex:outputpanel>
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'audio'}" layout="none">
                        <apex:outputpanel rendered="{!playerSettings.isFromSimpleMedia}" layout="none">
                            <script>
                                window.addEventListener('message', function(event){
                                    try {
                                        var data   = JSON.parse(event.data);
                                        if ( typeof data === 'object' && data.name === 'simplemedia' ) {
                                            if(audioLogic){
                                                audioLogic.OnUnload();
                                            }
                                        }
                                    } catch (e) {
                                    }
                                });
                            </script>
                        </apex:outputpanel>
                        <c:PlayerAudio launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" playerStyle="{!playerSettings.playerStyle}" />
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'txt'}" layout="none">
                        <c:PlayerTxt launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" isTestFromLex="{!isShowBackLink}" />
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'html'}" layout="none">
                        <c:PlayerHtml launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" manifest="{!playerCourseWrapper.Manifest}" />
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'image'}" layout="none">
                        <c:PlayerImage launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" />
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'youtube'}" layout="none">
                        <c:PlayerYoutube launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" />
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'vimeo'}" layout="none">
                        <c:PlayerVimeo launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" />
                        <apex:outputpanel rendered="{!playerSettings.isFromSimpleMedia}" layout="none">
                            <script>
                                window.addEventListener('message', function(event){
                                    try {
                                        var data   = JSON.parse(event.data);
                                        if ( typeof data === 'object' && data.name === 'simplemedia' ) {
                                            if(vimeoLogic){
                                                vimeoLogic.OnUnload();
                                            }
                                        }
                                    } catch (e) {
                                    }
                                });
                            </script>
                        </apex:outputpanel>
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'vidyard'}" layout="none">
                        <c:PlayerVidyard launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" />
                        <apex:outputpanel rendered="{!playerSettings.isFromSimpleMedia}" layout="none">
                            <script>
                                window.addEventListener('message', function(event){
                                    try {
                                        var data   = JSON.parse(event.data);
                                        if ( typeof data === 'object' && data.name === 'simplemedia' ) {
                                            if(vidyardLogic){
                                                vidyardLogic.OnUnload();
                                            }
                                        }
                                    } catch (e) {
                                    }
                                });
                            </script>
                        </apex:outputpanel>
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'pdf'}" layout="none">
                        <c:PlayerPdf launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" outputFileName="{!URLENCODE(course.scormanywhere__SCORM_Title__c)}" isTestFromLex="{!isShowBackLink}" />
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'plain'}" layout="none">
                        <div style="position:relative">
                            <c:PlayerPlain launchData="{!playerCourseWrapper.LaunchData}" courseSettings="{!courseSettingsToJSON}" outputFileName="{!URLENCODE(course.scormanywhere__SCORM_Title__c)}"/>
                        </div>
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.PlayerType == 'interaction'}" layout="none">
                        <apex:outputpanel rendered="{!NOT(AND(playerCourseWrapper.TrainingType == 'aicc', theme == 'Theme4t'))}" layout="none">
                            <c:PlayerInteractive courseSettings="{!courseSettingsToJSON}" transcript="{!transcript}" course="{!course}" playerCourseWrapper="{!playerCourseWrapper}" interactivePlayerServerUrl="{!playerSettings.interactivePlayerServerUrl}" isLaunchFromPlayer="{!playerSettings.isLaunchFromPlayer}" />
                        </apex:outputpanel>
                    </apex:outputpanel>

                    <apex:outputpanel rendered="{!playerCourseWrapper.TrainingType == 'aicc'}" layout="none">
                        <apex:outputpanel rendered="{!theme == 'Theme4t'}" layout="none">
                            <div style="text-align:center; font-size: 24px; padding-top: 40px">
                                <apex:outputText value="{!$Label.scormanywhere__interactive_type_not_supported_in_sf1}">
                                </apex:outputText>
                            </div>
                        </apex:outputpanel>
                    </apex:outputpanel>

                </apex:outputpanel>
            </apex:outputpanel>
        </body>
    </html>
</apex:page>