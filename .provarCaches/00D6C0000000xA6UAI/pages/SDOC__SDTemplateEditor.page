<apex:page StandardController="SDOC__SDTemplate__c" extensions="SDOC.SDTemplateEditor" 
action="{!init}" lightningStylesheets="true" sidebar="false" docType="html-5.0"> 
<apex:outputPanel id="masterPanelTemplateEditor">

<apex:outputPanel rendered="{!cloneSDTemplate}">
  <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" /> Cloning template...
    <apex:form >
      <apex:actionFunction action="{!createSDTemplateClone}" name="createSDTemplateClone" oncomplete="createSSTemplateClone();" />
      <apex:actionFunction action="{!createSSTemplateClone}" name="createSSTemplateClone" reRender="masterPanelTemplateEditor" />
      <script>
          addEvent(window, 'load', function(){ createSDTemplateClone(); });
          function addEvent(element, event, fn) {
              if (element.addEventListener) element.addEventListener(event, fn, false);
              else if (element.attachEvent) element.attachEvent('on' + event, fn);
          }
      </script>
    </apex:form>
</apex:outputPanel>

<apex:outputPanel rendered="{!NOT(cloneSDTemplate)}">
<head>
<apex:outputPanel rendered="{!showLightningUI}" layout="none">
  <style>
    .showListButton, .hideListButton {
      float: left;
    }
    
    .cke_dialog {
      border: 1px solid gray !important;
      border-radius: 3px;
      background-color: white !important;
    }

    .cke_dialog_body {
      margin: 2px;
    }

    body .rich-tabhdr-cell-active, .slds-scope .rich-tabhdr-cell-active {
      transition: background-color .25s cubic-bezier(0.39, 0.575, 0.565, 1);
      transition-property: background-color;
      transition-duration: 0.25s;
      transition-timing-function: cubic-bezier(0.39, 0.575, 0.565, 1);
      transition-delay: 0s;
      border-top: 3px solid #0070d2 !important;
      border-bottom-color: rgba(0,97,213,0.1) !important;
      font-weight: 700 !important;
      color: #3e3e3c !important;
      background-color: rgba(0,97,213,0.1);
      cursor: pointer;
    }

    .rich-tab-active  , .rich-tab-inactive , .rich-tabpanel-content {
      background-image: none !important;
      background-color: transparent !important;
      border-style: none !important;
      font-size:12px !important;
    }

    .rich-tabhdr-cell-inactive {
      transition: background-color .25s cubic-bezier(0.39, 0.575, 0.565, 1);
      transition-property: background-color;
      transition-duration: 0.25s;
      transition-timing-function: cubic-bezier(0.39, 0.575, 0.565, 1);
      transition-delay: 0s;
    }

    .rich-tabhdr-cell-inactive:hover {
      background-color: rgba(0,97,213,0.1);
      cursor: pointer;
      border-bottom-color: #0070d2 !important;
    }

    .rich-tabpanel-content {
      color : none !important;
    }
    
    .sdocs_documentation_btn {
      font-weight: normal !important;
    }

    .sdocs_documentation_btn_top {
      margin-right: 13px !important;
    }

    .yui-panel-container .bPageBlock {
      font-size: 13px !important;
      font-weight: normal;
    }
    
    .mouseOverInfo {
      white-space: normal !important;
    }

    .mouseOverInfo label {
      color: white !important;
    }

    textarea {
      width: 100%;
      height: 37px;
    }
    
    .cke_dialog_ui_hbox_last {
      vertical-align: bottom;
    }

    a.cke_dialog_tab {
      min-width: 71px;
    }

    .slds-vf-scope .pbButton .btn {
      vertical-align: baseline !important;
      margin-left: .5rem !important;
    }

    a[name="skiplink"] {
      display: none;
    }

    #sstemplate-editor-iframe {
      margin-top: 0 !important;
    }

    .labelCol label {
      white-space: nowrap !important;
    }

    .verticalAlignMiddleBtn {
      vertical-align: middle !important;
    }
  </style>
</apex:outputPanel>
<apex:outputPanel rendered="{!NOT(showLightningUI)}" layout="none">
<apex:stylesheet value="/sCSS/24.0/sprites/1297816277000/Theme3/default/gc/versioning.css" />
<style>
  .infoIcon {
    margin-top: 0 !important;
  }

  textarea {
    width: 100%;
    height: 30px;
  }
</style>
</apex:outputPanel>

<apex:styleSheet value="{!URLFOR($Resource.SDOC__SDoc,'skin.css')}" />
<apex:styleSheet value="{!URLFOR($Resource.SDOC__SDoc,'Sdoc.css')}" />
<apex:includeScript value="{!URLFOR($Resource.SDOC__ckEditor,'/ckeditor/ckeditor.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc,'yahoo-dom-event.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc,'container-min.js')}" />
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc,'animation-min.js')}" />
<style>
.buttonStyle { font-size:14px; display:inline-block; cursor:pointer; }
.buttonStyleCopyToClipboard { font-size:14px; display:inline-block; cursor:pointer; }
.clipboard_msg { font-size:14px; color:#1E824C; font-weight:bold; padding-top: 8px; }
#loading-div {
  top: 0;
  left: 0;
  position: fixed;
  width: 100%;
  height: 100%;
  z-index: 1000;
  opacity: 0.8;
  visibility: hidden;
  background-color: white;
}
#loading-div-spinner {
  position: fixed;
  right: 47%;
  bottom: 50%;
}
#loading-div-page {
  top: 0;
  left: 0;
  position: fixed;
  width: 100%;
  height: 100%;
  z-index: 2000;
  opacity: 0.8;
  visibility: hidden;
  background-color: white;
}
#loading-div-page-spinner {
  position: fixed;
  right: 47%;
  bottom: 50%;
}
.sdocs_documentation_btn {
  font-weight: bold;
  transition: 0.4s !important;
  text-decoration: none !important;
  position: absolute;
  z-index: 100;
  right: 0.75%;
  display: inline-block;
  padding: 2px 10px;
  border: 2px solid #4ecaff;
  border-radius: 3px;
  background-color: transparent;
  outline: none;
  text-align: center;
  cursor: pointer;
  user-select: none;
  color: #29AAE2 !important;
  background-color: white;
  box-shadow: 0 1px 3px 0 rgba(0,0,0,0.24), 0 3px 4px 0 rgba(0,0,0,0.19);
}
.sdocs_documentation_btn:hover {
  color: white !important;
  background-color: #4ecaff;
  box-shadow: 0 2px 6px 0 rgba(0,0,0,0.24), 0 7px 10px 0 rgba(0,0,0,0.19);
}
.sdocs_documentation_btn img {
  vertical-align: middle;
  margin-right: 5px;
  transition: 0.4s !important;
  width: 42px;
  margin-bottom: 8px !important;
  -webkit-transform: translateZ(0); 
}
.sdocs_documentation_btn:hover img {
  filter: brightness(0) invert(1);
}
.requiredLegend {
  display: none !important;
}
.dataCol input {
  margin-top: 0 !important;
}
.sdocs_documentation_btn_top {
  padding: 0px 10px !important;
}
</style>

<script type="text/javascript">
function addEvent(element, event, fn) {
  if (element.addEventListener)
    element.addEventListener(event, fn, false);
  else if (element.attachEvent)
    element.attachEvent('on' + event, fn);
}

var AgreementForm = document.getElementById("blur");
//AgreementForm.style.height = window.screen.availHeight + "px";
//AgreementForm.style.width = window.screen.availWidth + "px";

var ContainerElem = document.getElementById("StatusBox");
//ContainerElem.style.display = "block";
AlignToCenter(ContainerElem);

function AlignToCenter(Element)
{
    var availableHeight = 0;
    var availableWidth = 0;
    if (Element.ownerDocument)
    {
        var docElement = Element.ownerDocument.documentElement;
        availableHeight = parseInt(docElement.clientHeight);
        if (availableHeight == "NaN") availableHeight = 0;
        
        availableWidth = parseInt(docElement.clientWidth);
        if (availableWidth == "NaN") availableWidth = 0;
    }

if (availableHeight == 0 || availableHeight == "NaN")
    availableHeight = window.screen.availHeight - 200;
if (availableWidth == 0 || availableWidth == "NaN")
    availableWidth = window.screen.availWidth - 100;

var msgBoxTop = parseInt((availableHeight - parseInt(Element.clientHeight))/2);
var msgBoxleft = parseInt((availableWidth - parseInt(Element.style.width))/2);

if (msgBoxTop == "NaN" || msgBoxTop == 0)
    msgBoxTop = 100;

Element.style.left = msgBoxleft + "px";
Element.style.top = msgBoxTop + window.pageYOffset + "px";
}

function reposition(){
    if(navigator.appName == 'Window Internet Explorer') AgreementForm.style.top = document.body.scrollTop;
    else AgreementForm.style.top = window.pageYOffset+"px";
    AlignToCenter(ContainerElem);
}
</script>
<script type="text/javascript">
    YAHOO.namespace("force.com");
    YAHOO.force.com.showMe = function() {
        document.getElementById("myPanel").style.display = "block";
        YAHOO.force.com.myDialog.show();
    }
    YAHOO.force.com.hideMe = function() {
        YAHOO.force.com.myDialog.hide();
    }
    YAHOO.force.com.showLine = function() {
        document.getElementById("linePanel").style.display = "block";
        YAHOO.force.com.eDialog.show();
    }
    YAHOO.force.com.hideLine = function() {
        YAHOO.force.com.eDialog.hide();
    }
    YAHOO.force.com.showRender = function() {
        document.getElementById("insertRenderPanel").style.display = "block";
        YAHOO.force.com.rDialog.show();
    }
    YAHOO.force.com.hideRender = function() {
        YAHOO.force.com.rDialog.hide();
    }

    
    YAHOO.force.com.init = function() {
        document.body.className = document.body.className + " yui-skin-sam";
        var CKEDITOR   = window.CKEDITOR;
        if (CKEDITOR.env.ie8){
            YAHOO.force.com.myDialog = new YAHOO.widget.Panel(
            "myPanel",
            { width           :   "800px",visible         :   false,
             draggable       :   true, close           :   false,  
             modal           :   true,  fixedCenter     :   true,  zindex          :   100
            });
            YAHOO.force.com.eDialog = new YAHOO.widget.Panel(
            "linePanel",
            { width           :   "800px",visible         :   false,
             draggable       :   true, close           :   false,  
             modal           :   true,  fixedCenter     :   true,  zindex          :   100
            });
            YAHOO.force.com.rDialog = new YAHOO.widget.Panel(
            "insertRenderPanel",
            { width           :   "800px",visible         :   false,
             draggable       :   true, close           :   false,  
             modal           :   true,  fixedCenter     :   true,  zindex          :   100
            });             
        }else{
            YAHOO.force.com.myDialog = new YAHOO.widget.Panel(
            "myPanel",  // The id of our dialog container
            { 
                    width           :   "800px",
                    visible         :   false,
                    draggable       :   true,
                    close           :   true,
                    modal           :   true,
                    fixedCenter     :   "contained",
                    zindex          :   100,
                    effect          :   {effect:YAHOO.widget.ContainerEffect.FADE,
                                          duration:0.3} 
            }
            );
            YAHOO.force.com.eDialog = new YAHOO.widget.Panel("linePanel",
                {  
                    // width        :   "900px"
                    xy          :   [100,80]
                    ,visible        :   false
                    ,draggable      :   true
                    ,close          :   true
                    ,modal          :   true
                    ,fixedCenter    :   "contained"
                    ,zindex         :   100
                    ,underlay       : "matte"
                    ,effect         :   {effect:YAHOO.widget.ContainerEffect.FADE,
                                          duration:0.3} 
                }
            );
            YAHOO.force.com.rDialog = new YAHOO.widget.Panel("insertRenderPanel",
                {  
                    width        :   "900px"
                    //xy          :   [100,80]
                    ,visible        :   false
                    ,draggable      :   true
                    ,close          :   true
                    ,modal          :   true
                    ,fixedCenter    :   "contained"
                    ,zindex         :   100
                    ,underlay       : "matte"
                    ,effect         :   {effect:YAHOO.widget.ContainerEffect.FADE,
                                          duration:0.3} 
                }
            );
       }
       YAHOO.force.com.eDialog.setHeader("Insert Related List");
       YAHOO.force.com.myDialog.render(document.body);
       YAHOO.force.com.eDialog.render(document.body);
       YAHOO.force.com.rDialog.render(document.body);
    }

    function getLoadingDiv() {
      return document.getElementById('loading-div-page');
    }
    function hideLoadingDiv() {
      $loadingDiv = getLoadingDiv();
      $loadingDiv.style.visibility = 'hidden';
    }
    function showLoadingDiv() {
      $loadingDiv = getLoadingDiv();
      $loadingDiv.style.visibility = 'visible';
    }
</script>
</head>

<div id="loading-div-page">
  <img width="80" id="loading-div-page-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
</div>
<script>
  hideLoadingDiv();
</script>
<div id="insertRenderPanel" style="display: none;">
        <div class="hd">
            <apex:outputtext value="Insert Conditional Logic"/> 
        </div>
        <div class="bd">
        <apex:pageMessages />
        <style>
        .render_header {
          font-weight:bold;
        }
        </style>
      <apex:form >
      <apex:pageBlock id="renderStep1" title="1: Select Conditions">
        <table>
          <tr>
              <apex:outputPanel id="conjHeader" rendered="{!renderAddClicked}" layout="none">
                <td class="render_header"></td>
              </apex:outputPanel>
              <td class="render_header">Field</td>
              <td class="render_header">Operator</td>
              <td class="render_header">Value</td>
              <td class="render_header">Render Level</td>
          </tr>
          <tr>
              <apex:outputPanel id="conjCol" rendered="{!renderAddClicked}" layout="none">
                <td>
                  <apex:selectList id="renderConjunction" value="{!renderConjunction}" size="1" style="max-width: 200px;"> 
                      <apex:selectOptions value="{!renderConjunctionList}" />
                  </apex:selectList>
                </td>
              </apex:outputPanel>
              <td>
                <apex:selectList id="renderField" value="{!renderField}" size="1" style="max-width: 200px;"> 
                    <apex:selectOptions value="{!renderFieldList}"/>
                    <apex:actionSupport event="onchange" reRender="renderOperator,renderValues,merge_field_output_4"/>
                </apex:selectList>
              </td>
              <td>
                <apex:selectList id="renderOperator" value="{!renderOperator}" size="1" style="max-width: 200px;"> 
                    <apex:selectOptions value="{!renderOperatorList}" />
                </apex:selectList>
              </td>
              <td>
                <apex:outputPanel id="renderValues">
                  <apex:outputPanel rendered="{!renderValueType == 'PICKLIST' || renderValueType == 'BOOLEAN'}">
                    <apex:selectList id="picklistRenderValue" value="{!renderValue}" size="1" style="max-width: 200px;"> 
                        <apex:selectOptions value="{!renderValueOptions}" />
                    </apex:selectList>
                  </apex:outputPanel>
                  <apex:outputPanel rendered="{!renderValueType == 'String'}">
                    <apex:inputText id="renderValue" value="{!renderValue}"/>
                  </apex:outputPanel>
                  <apex:outputPanel rendered="{!renderValueType == 'DATE'}">
                    <apex:input id="renderDate" type="date" value="{!renderValueDate}"/>
                  </apex:outputPanel>
                </apex:outputPanel>
              </td>
              <td>
                <apex:selectList id="renderLevel" value="{!renderLevel}" size="1" style="max-width: 200px;"> 
                    <apex:selectOptions value="{!renderLevelList}" />
                </apex:selectList>
              </td>
          </tr>
        </table>
          <apex:commandButton value="Add Condition" action="{!addRenderCondition}" 
          reRender="renderStep1,renderStep2,renderStep3,renderButtons,merge_field_output_4"/>
          <apex:commandButton value="Reset Condition" action="{!resetRenderCondition}" 
          reRender="renderStep1,renderStep2,renderStep3,renderButtons,merge_field_output_4"/>
      </apex:pageBlock>
      <apex:pageBlock id="renderStep2" title="2: Group Conditions with Parentheses">
      <div class="ft" style="font-size: 11px;">
          <apex:outputPanel layout="block">
          In this step, you may add parentheses to group the conditions per your requirements.
          If you click "Add Condition" again, your changes to this field will be preserved, and the new condition
          will be appended to the text currently displayed in this field.
          </apex:outputPanel>
        </div>
        <apex:inputText style="width:100%;" value="{!renderConditions}"/>
      </apex:pageBlock>
      <apex:pageBlock id="renderStep3" title="3: Enter Conditionally-Rendered Contents">
      <apex:pageblocksection columns="6">
               <apex:pageblocksectionItem >
                  <apex:outputpanel id="l1">
                      <apex:outputtext value="{!f1Obj}" style="font-weight : bold;"/><br />
                      <apex:selectList value="{!f1}" size="12" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!f1List}" />
                              <apex:actionSupport event="onchange" action="{!level1}" rerender="l2,l3,o,merge_field_output_4" status="statLoad1"/>
                      </apex:selectList>
                      <br />
                      <apex:commandLink value="Prev" action="{!prevLevel1}" rerender="l1" style="font-weight : bold;" status="statLoad1" rendered="{!f1ShowPrev}"/>
                      <apex:outputPanel layout="none" rendered="{!f1ShowPrev && f1ShowNext}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                      <apex:commandLink value="Next" action="{!nextLevel1}" rerender="l1" style="font-weight : bold;" status="statLoad1" rendered="{!f1ShowNext}"/>
                  </apex:outputpanel>
                </apex:pageblocksectionItem>
                <apex:outputpanel id="l2">
                  <apex:outputtext value="{!f2Obj}" style="font-weight : bold;"/><br />
                      <apex:selectList value="{!f2}" size="12" id="f2"  rendered="{!NOT(ISNULL(f2List))}" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!f2List}" />
                          <apex:actionSupport event="onchange" action="{!level2}" rerender="l3,o,merge_field_output_4" status="statLoad1"/>
                      </apex:selectList>
                      <br />
                      <apex:commandLink value="Prev" action="{!prevLevel2}" rerender="l2" style="font-weight : bold;" status="statLoad1" rendered="{!f2ShowPrev && NOT(ISNULL(f2List))}"/>
                      <apex:outputPanel layout="none" rendered="{!f2ShowPrev && f2ShowNext && NOT(ISNULL(f2List))}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                      <apex:commandLink value="Next" action="{!nextLevel2}" rerender="l2" style="font-weight : bold;" status="statLoad1" rendered="{!f2ShowNext && NOT(ISNULL(f2List))}"/>
                  </apex:outputpanel>
                <apex:outputpanel id="l3">
                  <apex:outputtext value="{!f3Obj}" style="font-weight : bold;"/><br />
                      <apex:selectList value="{!f3}" size="12" id="f3"  rendered="{!NOT(ISNULL(f3List))}" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!f3List}" />
                          <apex:actionSupport event="onchange" action="{!level3}" rerender="o,merge_field_output_4" status="statLoad1"/>
                      </apex:selectList>
                      <br />
                      <apex:commandLink value="Prev" action="{!prevLevel3}" rerender="l3" style="font-weight : bold;" status="statLoad1" rendered="{!f3ShowPrev && NOT(ISNULL(f3List))}"/>
                      <apex:outputPanel layout="none" rendered="{!f3ShowPrev && f3ShowNext && NOT(ISNULL(f3List))}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                      <apex:commandLink value="Next" action="{!nextLevel3}" rerender="l3" style="font-weight : bold;" status="statLoad1" rendered="{!f3ShowNext && NOT(ISNULL(f3List))}"/>
                  </apex:outputpanel>
              </apex:pageblocksection>
              <apex:outputPanel id="o" >
                  <apex:pageblocksection >
                      <apex:pageblocksectionItem rendered="{!NOT(isNum)&& NOT(isDate) && NOT(isLookup) && NOT(output == '')}">  
                          <apex:inputcheckbox value="{!useRichText}" >
                              <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="o,merge_field_output_4" status="statLoad1"/>
                          </apex:inputcheckbox>
                          <apex:outputLabel value="This field value contains HTML, Rich Text or images"/>
                      </apex:pageblocksectionItem>
                  </apex:pageblocksection>
                  <apex:pageblocksection rendered="{!isDate}">
                      <apex:pageblocksectionItem >
                          <apex:outputLabel value="Format Date:"/>
                          <apex:actionRegion >
                            <apex:selectList value="{!fdoption}" size="1" id="fdo"> 
                              <apex:selectOptions value="{!fdoptions}" />
                              <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="o,merge_field_output_2,merge_field_output_4" status="statLoad1"/>
                            </apex:selectList>
                          </apex:actionRegion>
                      </apex:pageblocksectionItem>
                  </apex:pageblocksection>
                  <apex:pageblocksection rendered="{!isNum}">
                      <apex:pageblocksectionItem >
                          <apex:outputLabel value="Format Number:"/>
                          <apex:actionRegion >
                            <apex:selectList value="{!fcoption}" size="1" id="fco"> 
                                <apex:selectOptions value="{!fcoptions}" />
                                <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="o,merge_field_output_2" status="statLoad1"/>
                            </apex:selectList>
                          </apex:actionRegion>
                       </apex:pageblocksectionItem>
                  </apex:pageblocksection>
                  <apex:pageblocksection columns="1">
                      <apex:inputText id="merge_field_output_2" value="{!output}" size="100"/>
                      <apex:commandButton value="Add Field" action="{!addToRenderContents}" rendered="{!NOT(ISNULL(output))}" 
                      style="font-size:14px;" reRender="renderStep1,renderStep2,renderStep3,renderButtons,merge_field_output_4"/>
                  </apex:pageblocksection>
              </apex:outputPanel>
              <apex:pageBlockSection columns="1">
                <apex:inputTextarea value="{!renderContents}" style="width: 100%; height: 3em;" rows="6">
                  <apex:actionSupport event="onkeyup" action="{!donothing}" rerender="renderButtons,merge_field_output_4" status="statLoad1"/>
                </apex:inputTextarea>
              </apex:pageBlockSection>
      </apex:pageBlock>
        <apex:outputPanel id="renderButtons">
          <div style="text-align: center;" >
            <apex:outputPanel rendered="{!NOT(isMSX)}">
              <apex:commandButton value="Insert" onclick="insertRender('{!renderComplete}');" 
              reRender="renderStep1,renderStep2,renderStep3,renderButtons" oncomplete="resetRenderComplete();" 
              styleClass="buttonStyle"  style="font-size:14px;" status="statLoad3"/>
              <apex:commandButton value="Reset" action="{!resetRenderComplete}" styleClass="buttonStyle"  
              reRender="renderStep1,renderStep2,renderStep3,renderButtons" style="font-size:14px;" status="statLoad3"/>
              <apex:commandButton value="Cancel" immediate="true" oncomplete="YAHOO.force.com.hideRender();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad3"/>
              <apex:actionFunction action="{!resetRenderComplete}" name="resetRenderComplete" rerender="renderStep1,renderStep2,renderStep3,renderButtons"/>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!isMSX}">
              <apex:inputTextarea id="merge_field_output_4" value="{!renderComplete}" rows="6" style="width: 90%; height: 3em;"/>
              <br />
              <apex:commandButton value="Copy" onclick="copyToClipboardMergeField(4);" 
              reRender="renderStep1,renderStep2,renderStep3,renderButtons" oncomplete="resetRenderComplete();" 
              styleClass="buttonStyle"  style="font-size:14px;" status="statLoad3"/>
              <apex:commandButton value="Reset" action="{!resetRenderComplete}" styleClass="buttonStyle"  
              reRender="renderStep1,renderStep2,renderStep3,renderButtons" style="font-size:14px;" status="statLoad3"/>
              <apex:commandButton value="Cancel" immediate="true" oncomplete="YAHOO.force.com.hideRender();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad3"/>
              <apex:actionFunction action="{!resetRenderComplete}" name="resetRenderComplete" rerender="renderStep1,renderStep2,renderStep3,renderButtons,merge_field_output_4"/>
            </apex:outputPanel>

          </div>
        </apex:outputPanel>
      </apex:form>
      </div>

    </div>



<div id="myPanel" style="display: none">
    <div class="hd">
        <apex:outputtext value="Insert Field"/> 
    </div>
    <div class="bd">
    <apex:form >
      <apex:tabPanel id="insert-field-tab-panel" reRender="insert-field-tab-panel" switchType="client">
        <apex:tab label="{!SDOC__SDTemplate__c.SDOC__Base_Object__c} Fields" style="font-weight:bold;">
          <apex:actionStatus id="statLoad1">
            <apex:facet name="start">
              <div id="loading-div" style="visibility: visible !important; position: absolute !important;">
                <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
              </div>
            </apex:facet>
          </apex:actionStatus>
          <apex:pageBlock id="block2" >
            <div class="ft" style="font-size: 11px; font-weight: normal;">
            <apex:outputPanel layout="block">
              Select a field, then click 
              <apex:outputPanel rendered="{!NOT(isMSX)}" > Insert. </apex:outputPanel> 
              <apex:outputPanel rendered="{!isMSX}"> Copy To Clipboard. </apex:outputPanel> 
              Labels followed by a ">" indicate that there are more fields available. 
              If you need to extend further, you can manually edit the value or consider creating a formula field on your
              base object: {!SDOC__SDTemplate__c.SDOC__Base_Object__c}.
            </apex:outputPanel>
          </div>
          <div style="width: 750px; overflow: scroll;">
              <apex:pageblocksection columns="8">
               <apex:pageblocksectionItem >
                  <apex:outputpanel id="l1">
                      <apex:outputtext value="{!f1Obj}" style="font-weight : bold;"/>
                      <br />
                      <apex:selectList value="{!f1}" size="12" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!f1List}" />
                              <apex:actionSupport event="onchange" action="{!level1}" rerender="l2,l3,l4,l5,o" status="statLoad1"/>
                      </apex:selectList>
                      <br />
                      <apex:commandLink value="Prev" action="{!prevLevel1}" rerender="l1" status="statLoad1" rendered="{!f1ShowPrev}"/>
                      <apex:outputPanel layout="none" rendered="{!f1ShowPrev && f1ShowNext}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                      <apex:commandLink value="Next" action="{!nextLevel1}" rerender="l1" status="statLoad1" rendered="{!f1ShowNext}"/>
                  </apex:outputpanel>
                </apex:pageblocksectionItem>
                <apex:outputpanel id="l2">
                  <apex:outputtext value="{!f2Obj}" style="font-weight : bold;"/><br />
                      <apex:selectList value="{!f2}" size="12" id="f2"  rendered="{!NOT(ISNULL(f2List))}" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!f2List}" />
                          <apex:actionSupport event="onchange" action="{!level2}" rerender="l3,l4,l5,o" status="statLoad1"/>
                      </apex:selectList>
                      <br />
                      <apex:commandLink value="Prev" action="{!prevLevel2}" rerender="l2" status="statLoad1" rendered="{!f2ShowPrev && NOT(ISNULL(f2List))}"/>
                      <apex:outputPanel layout="none" rendered="{!f2ShowPrev && f2ShowNext && NOT(ISNULL(f2List))}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                      <apex:commandLink value="Next" action="{!nextLevel2}" rerender="l2" status="statLoad1" rendered="{!f2ShowNext && NOT(ISNULL(f2List))}"/>
                  </apex:outputpanel>
                <apex:outputpanel id="l3">
                  <apex:outputtext value="{!f3Obj}" style="font-weight : bold;"/><br />
                      <apex:selectList value="{!f3}" size="12" id="f3"  rendered="{!NOT(ISNULL(f3List))}" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!f3List}" />
                          <apex:actionSupport event="onchange" action="{!level3}" rerender="l4,l5,o" status="statLoad1"/>
                      </apex:selectList>
                      <br />
                      <apex:commandLink value="Prev" action="{!prevLevel3}" rerender="l3" status="statLoad1" rendered="{!f3ShowPrev && NOT(ISNULL(f3List))}"/>
                      <apex:outputPanel layout="none" rendered="{!f3ShowPrev && f3ShowNext && NOT(ISNULL(f3List))}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                      <apex:commandLink value="Next" action="{!nextLevel3}" rerender="l3" status="statLoad1" rendered="{!f3ShowNext && NOT(ISNULL(f3List))}"/>
                  </apex:outputpanel>
                <apex:outputpanel id="l4">
                  <apex:outputtext value="{!f4Obj}" style="font-weight : bold;"/><br />
                      <apex:selectList value="{!f4}" size="12" id="f4"  rendered="{!NOT(ISNULL(f4List))}" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!f4List}" />
                          <apex:actionSupport event="onchange" action="{!level4}" rerender="l5,o" status="statLoad1"/>
                      </apex:selectList>
                      <br />
                      <apex:commandLink value="Prev" action="{!prevLevel4}" rerender="l4" status="statLoad1" rendered="{!f4ShowPrev && NOT(ISNULL(f4List))}"/>
                      <apex:outputPanel layout="none" rendered="{!f4ShowPrev && f4ShowNext && NOT(ISNULL(f4List))}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                      <apex:commandLink value="Next" action="{!nextLevel4}" rerender="l4" status="statLoad1" rendered="{!f4ShowNext && NOT(ISNULL(f4List))}"/>
                  </apex:outputpanel>
                <apex:outputpanel id="l5">
                  <apex:outputtext value="{!f5Obj}" style="font-weight : bold;"/><br />
                      <apex:selectList value="{!f5}" size="12" id="f5"  rendered="{!NOT(ISNULL(f5List))}" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!f5List}" />
                          <apex:actionSupport event="onchange" action="{!level5}" rerender="o" status="statLoad1"/>
                      </apex:selectList>
                      <br />
                      <apex:commandLink value="Prev" action="{!prevLevel5}" rerender="l5" status="statLoad1" rendered="{!f5ShowPrev && NOT(ISNULL(f5List))}"/>
                      <apex:outputPanel layout="none" rendered="{!f5ShowPrev && f5ShowNext && NOT(ISNULL(f5List))}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                      <apex:commandLink value="Next" action="{!nextLevel5}" rerender="l5" status="statLoad1" rendered="{!f5ShowNext && NOT(ISNULL(f5List))}"/>
                  </apex:outputpanel>
              </apex:pageblocksection>
              </div>
              <apex:outputPanel id="o" >
                  <apex:pageblocksection >
                      <apex:pageblocksectionItem rendered="{!NOT(isNum)&& NOT(isDate) && NOT(isLookup) && NOT(output == '')}">  
                          <apex:inputcheckbox value="{!useRichText}" >
                              <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="o" status="statLoad1"/>
                          </apex:inputcheckbox>
                          <apex:outputLabel value="This field value contains HTML, Rich Text or images"/>
                      </apex:pageblocksectionItem>
                  </apex:pageblocksection>
                  <apex:pageblocksection rendered="{!isDate}">
                      <apex:pageblocksectionItem >
                          <apex:outputLabel value="Format Date:"/>
                          <apex:actionRegion >
                            <apex:selectList value="{!fdoption}" size="1" id="fdo"> 
                              <apex:selectOptions value="{!fdoptions}" />
                              <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="insertFieldBtn" status="statLoad1"/>
                            </apex:selectList>
                           </apex:actionRegion>
                      </apex:pageblocksectionItem>
                  </apex:pageblocksection>
                  <apex:pageblocksection rendered="{!isNum}">
                      <apex:pageblocksectionItem >
                          <apex:outputLabel value="Format Number:"/>
                          <apex:actionRegion >
                            <apex:selectList value="{!fcoption}" size="1" id="fco"> 
                                <apex:selectOptions value="{!fcoptions}" />
                                <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="insertFieldBtn,merge_field_output_object" status="statLoad1"/>
                            </apex:selectList>
                         </apex:actionRegion>
                       </apex:pageblocksectionItem>
                  </apex:pageblocksection>
                  <apex:pageblocksection id="insertFieldBtn" columns="1">
                       <apex:outputLabel value="{!mergeFieldInsertMsg}"/>
                      <apex:inputText onmouseover="this.select();" id="merge_field_output_object" value="{!output}" size="100"/>
                      <apex:outputPanel layout="none" rendered="{!NOT(ISBLANK(output))}">
                        <apex:outputPanel layout="none" rendered="{!NOT(isMSX)}">
                          <apex:commandButton styleClass="buttonStyle" value="Insert" oncomplete="insert('{!output}');" rendered="{!NOT(ISBLANK(output))&& NOT(isMSX)}"  
                          style="font-size:14px;display:inline-block;"/>
                        </apex:outputPanel>
                        <apex:outputPanel layout="none">
                          <apex:commandButton styleClass="buttonStyleCopyToClipboard" value="Copy to Clipboard" onclick="copyToClipboardMergeField('object');return false;"
                          rerender="output" style="font-size:14px;display:inline-block;cursor:pointer;"/>
                        </apex:outputPanel>
                      </apex:outputPanel>
                      <div class="clipboard_msg clipboard_msg_object"></div>
                  </apex:pageblocksection>
              </apex:outputPanel>
            </apex:pageBlock>
          </apex:tab>

        
            <apex:tab label="Runtime Prompt Fields" style="font-weight:bold;">
              <apex:outputPanel rendered="{!ucUserChoices.isEmpty}">
                You do not have any runtime prompts defined. Click on the "Runtime Prompts" tab to define user input fields.
              </apex:outputPanel>
              <apex:outputPanel rendered="{!NOT(ucUserChoices.isEmpty)}">
                <apex:actionStatus id="statLoad2"> 
                  <apex:facet name="start">
                    <div id="loading-div" style="visibility: visible !important; position: absolute !important;">
                      <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
                    </div>
                  </apex:facet>
                </apex:actionStatus>
                <apex:pageBlock id="block-2-user-choice" >
                    <apex:pageblocksection columns="6">
                     <apex:pageblocksectionItem >
                        <apex:outputpanel id="l1-user-choice">
                            <apex:selectList value="{!ucInsertField_mergeFieldname}" size="12" style="max-width: 200px;"> 
                                <apex:selectOptions value="{!ucUserChoices.userChoiceMergeFieldNames}" />
                                    <apex:actionSupport event="onchange" action="{!ucInsertField_select}" rerender="o-user-choice" status="statLoad2"/>
                            </apex:selectList>
                        </apex:outputpanel>
                      </apex:pageblocksectionItem>
                    </apex:pageblocksection>
                    <apex:outputPanel id="o-user-choice" >
                        <apex:pageblocksection rendered="{!ucInsertField_isDate}">
                            <apex:pageblocksectionItem >
                                <apex:outputLabel value="Format Date:"/>
                                <apex:actionRegion >
                                  <apex:selectList value="{!ucInsertField_formatDateOption}" size="1" id="fdo-user-choice">
                                    <apex:selectOptions value="{!fdoptions}" />
                                    <apex:actionSupport event="onchange" action="{!ucInsertField_select}" rerender="o-user-choice" status="statLoad2"/>
                                  </apex:selectList>
                                </apex:actionRegion>
                            </apex:pageblocksectionItem>
                        </apex:pageblocksection>
                        <!--apex:pageblocksection rendered="{!isNum}">
                            <apex:pageblocksectionItem >
                                <apex:outputLabel value="Format Number:"/>
                                <apex:selectList value="{!ucInsertField_formatNumOption}" size="1" id="fco-user-choice"> 
                                    <apex:selectOptions value="{!fcoptions}" />
                                    <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="o-user-choice" status="statLoad2"/>
                                 </apex:selectList>
                             </apex:pageblocksectionItem>
                        </apex:pageblocksection-->
                        <apex:pageblocksection columns="1">
                             <apex:outputLabel value="{!mergeFieldInsertMsg}"/>
                            <apex:inputText id="merge_field_output_userchoice" value="{!ucInsertField_output}" size="100"/>
                            <apex:outputPanel layout="none" rendered="{!NOT(ucUserChoices.isEmpty)}">
                              <apex:commandButton value="Insert" oncomplete="insert('{!ucInsertField_output}');" rendered="{!NOT(isMSX)}"  
                              styleClass="buttonStyle" style="font-size:14px;"/>
                              <apex:commandButton value="Copy to Clipboard" onclick="copyToClipboardMergeField('userchoice');"
                              styleClass="buttonStyleCopyToClipboard" rerender="output" style="font-size:14px;"/>
                              <div class="clipboard_msg clipboard_msg_2"></div>
                            </apex:outputPanel>
                        </apex:pageblocksection>
                    </apex:outputPanel>
                </apex:pageBlock>
              </apex:outputPanel>
          </apex:tab>

          <apex:tab label="Special Merge Fields" style="font-weight:bold;">
          <apex:actionStatus id="statLoad4">
            <apex:facet name="start">
              <div id="loading-div" style="visibility: visible !important; position: absolute !important;">
                <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
              </div>
            </apex:facet>
          </apex:actionStatus>
          <apex:pageBlock id="specialblock2" >
            <div class="ft" style="font-size: 11px; font-weight: normal;">
            <apex:outputPanel layout="block">
              To provide you with an increased range of easy-to-use templated data, S-Docs includes a special set of merged fields. For more information, click
              <a href="http://www.sdocs.com/resources/documentation/special-merged-fields-in-s-docs/">here.</a>
            </apex:outputPanel>
          </div>
              <apex:pageblocksection columns="6">
               <apex:pageblocksectionItem >
                  <apex:outputpanel id="l1">
                      <apex:outputtext value="Special Merge Field" style="font-weight : bold;"/><br />
                      <apex:selectList value="{!specialMergeObject}" size="12" style="max-width: 200px;"> 
                          <apex:selectOptions value="{!specialMergeList}" />
                              <apex:actionSupport event="onchange" action="{!setSpecialMergeValue}" rerender="l2,l3,o" status="statLoad4"/>
                      </apex:selectList>
                  </apex:outputpanel>
                </apex:pageblocksectionItem>
              </apex:pageblocksection>
              <apex:pageblocksection rendered="{!isDate}">
                      <apex:pageblocksectionItem >
                          <apex:outputLabel value="Format Date:"/>
                          <apex:actionRegion >
                            <apex:selectList value="{!fdoption}" size="1" id="fdsm"> 
                                <apex:selectOptions value="{!fdoptions}" />
                                <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="o" status="statLoad4"/>
                            </apex:selectList>
                          </apex:actionRegion>
                      </apex:pageblocksectionItem>
                  </apex:pageblocksection>
                  <apex:pageblocksection rendered="{!isNum}">
                      <apex:pageblocksectionItem >
                          <apex:outputLabel value="Format Number:"/>
                          <apex:actionRegion >
                            <apex:selectList value="{!fcoption}" size="1" id="fcsm"> 
                              <apex:selectOptions value="{!fcoptions}" />
                              <apex:actionSupport event="onchange" action="{!checktoggle}" rerender="o" status="statLoad4"/>
                            </apex:selectList>
                          </apex:actionRegion>
                       </apex:pageblocksectionItem>
                  </apex:pageblocksection>
              <apex:outputPanel id="o" >
                  <apex:pageblocksection columns="1">
                       <apex:outputLabel value="{!mergeFieldInsertMsg}"/>
                      <apex:inputText id="merge_field_output_special" value="{!specialMergeOutput}" size="100"/>
                      <apex:outputPanel layout="none">
                        <apex:commandButton value="Insert" oncomplete="insert('{!specialMergeOutput}');" rendered="{!NOT(isMSX)}"  
                        styleClass="buttonStyle" style="font-size:14px;"/>
                        <apex:commandButton value="Copy to Clipboard" onclick="copyToClipboardMergeField('special');"  
                        styleClass="buttonStyleCopyToClipboard" rerender="output" style="font-size:14px;"/>
                        <div class="clipboard_msg clipboard_msg_1"></div>
                      </apex:outputPanel>
                  </apex:pageblocksection>
              </apex:outputPanel>
            </apex:pageBlock>
          </apex:tab>


          <apex:tab label="Other Templates" style="font-weight:bold;">
              <apex:outputPanel >
                <apex:actionStatus id="statLoad5">
                  <apex:facet name="start">
                    <div id="loading-div" style="visibility: visible !important; position: absolute !important;">
                      <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
                    </div>
                  </apex:facet>
                </apex:actionStatus>
                <apex:pageBlock id="block-2-component" >
                  <div class="ft" style="font-size: 11px; font-weight: normal;">
                    <apex:outputPanel layout="block">
                      Templates with a <em>Template Format</em> of 'Component' and with <em>Available For Use</em> checked are displayed here. You can select one of these templates and insert it into the current template as a merge field. The component's <em>Related to Type</em> is displayed between brackets next to its name, e.g. <em>[Opportunity] myComponentName</em>. Note that if the component does not have the same <em>Related to Type</em> as this template, the component's merge fields will not merge.
                    </apex:outputPanel>
                  </div>
                  <apex:outputPanel rendered="{!insertComponent_noComponents}">
                    <br />
                    <strong>No template components have been defined.</strong>
                  </apex:outputPanel>
                  <apex:outputPanel rendered="{!NOT(insertComponent_noComponents)}">
                    <apex:pageblocksection columns="6">
                     <apex:pageblocksectionItem >
                        <apex:outputpanel id="l1-component">
                            <apex:selectList value="{!insertComponent_selectedMergeField}" size="12" style="max-width: 600px;"> 
                                <apex:selectOptions value="{!insertComponent_mergeFieldNames}" />
                                    <apex:actionSupport event="onchange" action="{!insertComponent_select}" rerender="o-component" status="statLoad5"/>
                            </apex:selectList>
                        </apex:outputpanel>
                      </apex:pageblocksectionItem>
                    </apex:pageblocksection>

                    <apex:outputPanel id="o-component" >
                        <apex:pageblocksection columns="1">
                             <apex:outputLabel value="{!mergeFieldInsertMsg}"/>
                            <apex:inputText id="merge_field_output_component" value="{!insertComponent_output}" size="100"/>
                            <apex:outputPanel layout="none">
                              <apex:commandButton value="Insert" oncomplete="insert('{!insertComponent_output}');" rendered="{!NOT(isMSX)}"  
                              styleClass="buttonStyle" style="font-size:14px;"/>
                              <apex:commandButton value="Copy to Clipboard" onclick="copyToClipboardMergeField('component');"
                              styleClass="buttonStyleCopyToClipboard" rerender="output" style="font-size:14px;"/>
                              <div class="clipboard_msg clipboard_msg_component"></div>
                            </apex:outputPanel>
                        </apex:pageblocksection>
                    </apex:outputPanel>
                  </apex:outputPanel>
                </apex:pageBlock>
              </apex:outputPanel>
          </apex:tab>
        </apex:tabPanel>



        <div style="text-align: center;" >
            <apex:commandButton value="Cancel" immediate="true" oncomplete="YAHOO.force.com.hideMe();"/>
        </div>
    </apex:form>
    </div>

</div>
<style type="text/css">
.hiddenTextArea {
  position: fixed;
  top: 0;
  left: 0;

  width: 2em;
  height: 2em;

  padding: 0;

  border: none;
  outline: none;
  boxShadow: none;

  background: transparent;
}
</style>
<script type="text/javascript">
  function copyToClipboard(id, dataType, clipboardMsgClassName) {
    var text = document.querySelector('*[id$="' + id + '"]');
    console.log('*[id$="' + id + '"]');
    text.select();
    var successful = document.execCommand('copy');
    if (dataType !== null && clipboardMsgClassName !== null) {
      var msg;
      if (successful) {
        var docType = '{!SDOC__SDTemplate__c.SDOC__Template_Format__c}';
        if ('{!isMSX}' === 'true') {
          msg = 'Copied ' + dataType +  ' to clipboard.';
          msg += ' You can now paste this into your ' + docType + ' document.';
          setClipboardMsg(msg, clipboardMsgClassName);
        } else {
          YAHOO.force.com.myDialog.hide();
        }
      } else {
        msg = 'Failed to copy related list data.';
        setClipboardMsg(msg, clipboardMsgClassName);
      }
    }
  }

  function copyToClipboardRelatedList() {
    copyToClipboard('output', 'related list', 'clipboard_msg_rl');
  }

  function copyToClipboardMergeField(tabNum) {
    copyToClipboard(
      'merge_field_output_' + tabNum, 
      'merge field', 
      'clipboard_msg_' + tabNum
    );
  }

  function setClipboardMsg(msg, clipboardMsgClassName) {
    setClipboardMsgHelper(msg, clipboardMsgClassName);
    setTimeout(function() {
      setClipboardMsgHelper('', clipboardMsgClassName);
    }, 4000);
  }

  function setClipboardMsgHelper(msg, clipboardMsgClassName) {
    var messageDivs = document.querySelectorAll('div[class*="' + clipboardMsgClassName + '"]');
    for (var i = 0; i < messageDivs.length; i++) {
      messageDivs[i].innerHTML = msg;
    }
  }
</script>
<div id="linePanel" style="display: none">
<apex:tabPanel switchType="client" selectedTab="name1" id="theTabPanel" 
styleClass="theTabPanel" tabClass="theTabPanel" contentClass="tabContent" 
activeTabClass="activeTab" inactiveTabClass="inactiveTab" width="900px">
<apex:tab label="Select Data Columns" name="tab1" id="tabOne">

    <apex:actionStatus id="statLoad2">
      <apex:facet name="start">
        <div id="loading-div" style="visibility: visible !important; position: absolute !important;">
          <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
        </div>
      </apex:facet>
    </apex:actionStatus>

    <div id="form" class="bd">
    <apex:form >
        <div class="ft" style="font-size: 11px;">
        <apex:outputPanel layout="block">
        Related lists are merged as tables (with rows and columns) into your document.
        Select a related list object from the picklist below.
        Then choose fields that you want included as columns for your table.
        Columns are rendered from left to right based on their order in the "Selected Columns" list below.
        <apex:outputPanel rendered="{!NOT(isMSX)}">
        An "Insert Table" button will appear that allows you to embed the table into your template. 
        Note: only the header row will appear in the template graphical view. Data rows are merged when the document is generated.
        </apex:outputPanel>
        <apex:outputPanel rendered="{!isMSX}">
        Once you have selected your columns, you have the option to format the data columns and add filter conditions &amp; sort orders in the next two tabs.
        When you're done building your related list, you can copy it from the <em>{!relatedListTabFiveLabel}</em> tab
        and paste it into your {!SDTemplate__c.Template_Format__c} document.
        </apex:outputPanel>
        </apex:outputPanel>
        </div>         
        <div class="ft" style="font-size: 12px;">
          <div style="font-size: 11px;">
          <apex:outputPanel layout="block">
          Alternatively, S-Docs Direct SOQL feature is a valuable option when standard related list options still do not meet your requirements.
          To use S-Docs Direct SOQL, click on the checkbox below and select an object from the picklist below, or optionally define your own SOQL query in the text box. For more details, click 
          <a href="http://www.sdocs.com/resources/documentation/using-s-docs-direct-soql-feature-for-related-list/" target="_blank">
          here.
          </a>

          </apex:outputPanel>
          </div>
          <apex:outputPanel id="directDiv">
            Direct SOQL 
            <apex:inputCheckbox value="{!rld.directSOQL}">
            <apex:actionSupport event="onchange" action="{!setDirectSOQLObject}" 
            rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists,ckEditorReplace" status="statLoad2"/>
            </apex:inputCheckbox>
          </apex:outputPanel>
        </div>
        <apex:outputPanel id="pastRelatedLists">
          <apex:pageBlock id="relatedListChoose" title="Edit a Previous Related List">
          <apex:pageblocksection >
                  <apex:outputLabel for="selectList" value="Available Related List:"/>
                  <apex:outputPanel id="selectAndDelete">
                    <apex:selectList id="selectList" value="{!rldChoice}" size="1"> 
                        <apex:selectOptions value="{!rldOptions}"/>
                        <apex:actionSupport event="onchange" action="{!loadRLD}" 
                        rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists,ckEditorReplace,selectAndDelete" status="statLoad2"/>
                    </apex:selectList>
                    &nbsp;&nbsp;&nbsp;&nbsp;
                    <apex:commandButton value="Delete List" immediate="true" action="{!deleteOldRLD}" oncomplete="ckEditorDelete();" 
                    rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,selectList,pastRelatedLists,ckEditorReplace"
                    style="font-size:10px;" status="statLoad3" rendered="{!oldRLD}" id="deleteList"/>
                    <apex:commandButton id="refreshRelList" value="Refresh Related Lists (Saves Template)" 
                    style="font-size:10px;"
                    action="{!saveAndRefresh}"/>
                  </apex:outputPanel>
              </apex:pageblocksection>
          </apex:pageBlock>
        </apex:outputPanel>
        <!-- Direct SOQL -->
        <apex:outputPanel id="selectobjects"> 
          <apex:pageBlock id="block4objects" title="Step 1: Select an Object" rendered="{!rld.directSOQL}">
              <apex:pageblocksection >
                  <apex:outputLabel for="selectobject" value="Available Objects{!directSOQLMsg}:"/>
                  <apex:selectList id="selectobject" value="{!rld.directSOQLObjectName}" size="1" rendered="{!NOT(moreThan1000Objects)}"> 
                      <apex:selectOptions value="{!objectsList}"/>
                      <apex:actionSupport event="onchange" action="{!setDirectSOQLObject}" rerender="rl2,rl3,rl4,p,bt2,badObject,ckEditorReplace" status="statLoad2"/>
                  </apex:selectList>
                  <apex:inputText value="{!rld.directSOQLObjectName}" rendered="{!moreThan1000Objects}">
                    <apex:actionSupport event="onchange" action="{!setDirectSOQLObject}" rerender="rl2,rl3,rl4,p,bt2,badObject,ckEditorReplace" status="statLoad2"/>
                  </apex:inputText>
                  <apex:outputLabel for="sl1" value="Query to be executed"/>
                  <apex:inputTextarea id="soqllist" value="{!rld.soqlquery}" style="width:80%;" rows="3">
                    <apex:actionSupport event="onchange" action="{!updateO}" rerender="op,ckEditorReplace" status="statLoad2"/>
                  </apex:inputTextarea>
              </apex:pageblocksection>
              <apex:pageMessages id="badObject"/>
         </apex:pageBlock>
        </apex:outputPanel>
        <!-- Related List -->
        <apex:outputPanel id="selectrelated" >
          <apex:pageBlock id="block4" title="Step 1: Select a Related List" rendered="{!NOT(rld.directSOQL)}">
              <apex:pageblocksection >
                  <apex:outputLabel for="sl1" value="Available Related Lists for {!SDOC__SDTemplate__c.SDOC__Base_Object__c}:"/>
                  <apex:selectList id="sl1" value="{!rl1}" size="1"> 
                      <apex:selectOptions value="{!rl1List}" />
                      <apex:actionSupport event="onchange" action="{!levelRL1}" rerender="tabThree,rl2,rl3,rl4,p,bt2,ckEditorReplace" status="statLoad2"/>
                  </apex:selectList>
              </apex:pageblocksection>
          </apex:pageBlock>
        </apex:outputPanel>
       <apex:pageBlock id="block5" title="Step 2: Choose Table Columns">
            <apex:pageblocksection columns="10">
                <apex:panelGrid id="rl2" style="font-weight : bold;">
                    <apex:outputtext style="font-weight : bold;"><b>Object:<br /> {!rl1Obj}</b></apex:outputtext>
                    <apex:outputtext value="Available Fields: "/>
                    <apex:selectList value="{!rl2}" size="12" id="f4" style="max-width: 200px;"> 
                        <apex:selectOptions value="{!rl2List}" />
                        <apex:actionSupport event="onchange" action="{!levelRL2}" rerender="rl3,rl4,ckEditorReplace" status="statLoad2"/>
                    </apex:selectList>
                  <apex:outputPanel >
                    <apex:commandLink value="Prev" action="{!prevRLLevel2}" rerender="rl2" status="statLoad1" rendered="{!rl2ShowPrev}"/>
                    <apex:outputPanel layout="none" rendered="{!rl2ShowPrev && rl2ShowNext}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                    <apex:commandLink value="Next" action="{!nextRLLevel2}" rerender="rl2" status="statLoad1" rendered="{!rl2ShowNext}"/>
                  </apex:outputPanel>
                </apex:panelGrid>
                <apex:panelGrid id="rl3" style="font-weight : bold;">
                    <apex:outputtext rendered="{!showRl3}" style="font-weight : bold;"><b>Object:<br /> {!rl2Obj}</b></apex:outputtext>
                    <apex:outputtext value="Available Fields: " rendered="{!showRl3}"/>
                    <apex:selectList value="{!rl3}" size="12" id="f5" rendered="{!showRl3}" style="max-width: 200px;"> 
                        <apex:selectOptions value="{!rl3List}" />
                        <apex:actionSupport event="onchange" action="{!levelRL3}" rerender="rl4,ckEditorReplace" status="statLoad2"/>
                    </apex:selectList>
                  <apex:outputPanel >
                    <apex:commandLink value="Prev" action="{!prevRLLevel3}" rerender="rl3" status="statLoad1" rendered="{!rl3ShowPrev && NOT(ISNULL(rl3List))}"/>
                    <apex:outputPanel layout="none" rendered="{!rl3ShowPrev && rl3ShowNext && NOT(ISNULL(rl3List))}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                    <apex:commandLink value="Next" action="{!nextRLLevel3}" rerender="rl3" status="statLoad1" rendered="{!rl3ShowNext && NOT(ISNULL(rl3List))}"/>
                  </apex:outputPanel>
                </apex:panelGrid>
                <apex:panelGrid id="rl4" style="font-weight : bold;">
                    <apex:outputtext rendered="{!showRl4}"  style="font-weight : bold;"><b>Object:<br /> {!rl3Obj}</b></apex:outputtext>
                    <apex:outputtext value="Available Fields: " rendered="{!showRl4}"/>
                    <apex:selectList value="{!rl4}" size="12" id="rl4sl" rendered="{!showRl4}" style="max-width: 200px;"> 
                        <apex:selectOptions value="{!rl4List}" />
                    </apex:selectList>
                  <apex:outputPanel >
                    <apex:commandLink value="Prev" action="{!prevRLLevel4}" rerender="rl4" status="statLoad1" rendered="{!rl4ShowPrev && NOT(ISNULL(rl4List))}"/>
                    <apex:outputPanel layout="none" rendered="{!rl4ShowPrev && rl4ShowNext && NOT(ISNULL(rl4List))}">&nbsp;&nbsp;|&nbsp;&nbsp;</apex:outputPanel>
                    <apex:commandLink value="Next" action="{!nextRLLevel4}" rerender="rl4" status="statLoad1" rendered="{!rl4ShowNext && NOT(ISNULL(rl4List))}"/>
                  </apex:outputPanel>
                </apex:panelGrid>
                <apex:panelGrid id="bt1">
                    <br />
                    <br />
                    <apex:outputtext value="Add"/><br />
                    <apex:commandButton action="{!add}" image="{!URLFOR($Resource.SDOC__SDoc,'right.gif')}" 
                    style="border:none; padding:0px 0px 0px 0px;" rerender="p,op,fp,fp4,b2,ckEditorReplace" status="statLoad2"/><br />
                    <apex:commandButton action="{!remove}" image="{!URLFOR($Resource.SDOC__SDoc,'left.gif')}" 
                    style="border:none; padding:0px 0px 0px 0px;" rerender="p,op,fp,fp4,b2,ckEditorReplace" status="statLoad2"/><br />
                    <apex:outputtext value="Remove"/><br />
                    <br />
                </apex:panelGrid>
                <apex:panelGrid id="p">
                    <apex:outputtext value="Selected Columns (left to right)" style="font-weight : bold;" /><br />
                    <apex:selectList value="{!rld.rlf}" size="12" id="f6" style="width: 250px;" >
                        <apex:selectOptions value="{!rlfList}" />
                        <apex:actionSupport event="onchange" action="{!getcol}" rerender="fp,fp4,ckEditorReplace" status="statLoad2"/>
                    </apex:selectList>
                </apex:panelGrid>
                <apex:panelGrid id="bt2">
                    <br />
                    <br />
                    <apex:outputtext value="Move Up"/><br />
                    <apex:commandButton action="{!moveup}" image="{!URLFOR($Resource.SDOC__SDoc,'up.gif')}" 
                    style="border:none; padding:0px 0px 0px 0px;" rerender="p,op,fp,fp4,ckEditorReplace,b2,b3,b4" status="statLoad2"/><br />
                    <apex:commandButton action="{!movedown}" image="{!URLFOR($Resource.SDOC__SDoc,'down.gif')}" 
                    style="border:none; padding:0px 0px 0px 0px;" rerender="p,op,fp,fp4,ckEditorReplace,o,b2,b3,b4" status="statLoad2"/><br />
                    <apex:outputtext value="Move Down"/><br />
                </apex:panelGrid>                
           </apex:pageblocksection>
        </apex:pageBlock>
        <apex:outputPanel id="b2">
        <div style="text-align: center;" >
          <apex:outputPanel rendered="{!NOT(isMSX)}">
            <apex:actionFunction action="{!updateRLD}" oncomplete="ckEditorUpdate('{!updateRLOutput}');resetRelatedList();" name="updateRLD" />
            <apex:commandButton value="Insert" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists" action="{!setAdvanced}" oncomplete="insertLine('{!advancedRL}');resetRelatedList();" rendered="{!rlfList.size>0&& NOT(isMSX) && NOT(oldRLD)}"  styleClass="buttonStyle"  style="font-size:14px;" status="statLoad2"/>
            <apex:commandButton value="Update" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists" onclick="updateRLD();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad2" rendered="{!oldRLD && NOT(isMSX)}"/>
            <apex:commandButton value="New" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists" 
            action="{!resetRelatedList}" styleClass="buttonStyle" style="font-size:14px;" status="statLoad3"/>   
            <apex:commandButton value="Cancel" immediate="true" oncomplete="YAHOO.force.com.hideLine();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad2"/>
            <apex:actionFunction action="{!resetRelatedList}" name="resetRelatedList" oncomplete="setFirstTabToActive();" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists"/>
          </apex:outputPanel>
        </div>
        </apex:outputPanel>
    </apex:form>
    </div>

</apex:tab>
<apex:tab label="Format Data Columns" name="tab2" id="tabTwo">  
<apex:form >
    <apex:actionStatus id="statLoad3">
      <apex:facet name="start">
        <div id="loading-div" style="visibility: visible !important; position: absolute !important;">
          <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
        </div>
      </apex:facet>
    </apex:actionStatus>
    <apex:outputPanel id="fp">
        <apex:pageBlock title="Choose a column to format">
            <apex:pageBlockSection columns="2">
                <apex:pageBlockSectionItem >
                    <apex:selectList value="{!rld.rlf}" size="12" id="f7" style="width: 300px;" >
                        <apex:selectOptions value="{!rlfList}" />
                        <apex:actionSupport event="onchange" action="{!getcol}" rerender="cold,ckEditorReplace" status="statLoad3"/>
                    </apex:selectList>
                </apex:pageBlockSectionItem>
                 <apex:pageBlockSectionItem >
                 <apex:outputPanel id="cold">
                    Insert related list without table markup: <apex:inputCheckbox value="{!rld.insertRelatedListWithoutTableMarkup}" /><br />&nbsp;<br />
                    <apex:outputPanel rendered="{!NOT(isMSX)}">
                      <apex:outputlabel for="c1" value="Header Text (Column Header): "/> 
                      <apex:inputText id="c1" value="{!thisCol.header}" style="width:100%" disabled="{!thisCol.mergenext}"/> <br />
                    </apex:outputPanel>
                    <apex:outputlabel for="c6" value="Merge with Next Column and Display as Single Column: "/>
                        <apex:inputCheckbox value="{!thisCol.mergenext}"/><br /><br />
                    <apex:outputlabel for="c1a" value="Data Mapped To: "/> <apex:inputText disabled="true" id="c1a" value="{!thisCol.dataMapping}" style="width:100%"/> <br />
                    <apex:outputlabel for="c1b" value="Data Contains Rich Text or HTML: "/><apex:inputCheckbox value="{!thisCol.rtffield}"/><br /><br />
                    <apex:outputlabel for="c2" value="Prefix Text: "/> <apex:inputText id="c2" value="{!thisCol.prefix}" style="width:100%"/><br />
                    <!--                 <apex:outputlabel for="c3" value="Prefix Text if Null: "/> <apex:inputText id="c3" value="{!thisCol.prefixifnull}" style="width:100%"/><br /> -->
                    <apex:outputlabel for="c4" value="Postfix Text: "/> <apex:inputText id="c4" value="{!thisCol.postfix}" style="width:100%"/><br />
                    <apex:outputlabel for="c5" value="Text to Display if Data is Null: "/> <apex:inputText id="c5" value="{!thisCol.postfixifnull}" style="width:100%"/><br />
                    <apex:outputlabel for="c7" value="Start a New Row: "/><apex:inputCheckbox value="{!thisCol.newrow}"/><br /><br />
                    <apex:outputlabel for="c8" value="Number of Columns to Span (colspan): "/> <apex:inputText id="c8" value="{!thisCol.colspan}" style="width:100%"/><br />
                    <apex:outputlabel for="c9" value="Format Number (e.g. #,###.##): "/><apex:inputText id="c9" value="{!thisCol.formatnum}" style="width:100%"/><br />
                    <apex:outputlabel for="c10" value="Format Date: (e.g. dd/MM/yyyy):"/><apex:inputText id="c10" value="{!thisCol.formatdate}" style="width:100%"/><br />
                         <apex:actionSupport event="onchange" action="{!setcol}" rerender="cold,op,ckEditorReplace" status="statLoad3"/>
                 </apex:outputPanel>
                 </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            </apex:pageBlock>
        <apex:outputPanel id="b3">
            <div style="text-align: center;" >
                <apex:outputPanel rendered="{!NOT(isMSX)}">
                  <apex:actionFunction action="{!updateRLD}" oncomplete="ckEditorUpdate('{!updateRLOutput}');resetRelatedList();" name="updateRLD" />
                  <apex:commandButton value="Insert" rerender="p,selectList,ckEditorReplace" action="{!setAdvanced}" oncomplete="insertLine('{!advancedRL}');resetRelatedList();"  rendered="{!rlfList.size>0 && NOT(oldRLD)}" styleClass="buttonStyle"  style="font-size:14px;" status="statLoad3"/>
                  <apex:commandButton value="Update" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists" onclick="updateRLD();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad3" rendered="{!oldRLD && NOT(isMSX)}"/>
                  <apex:commandButton value="Reset" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists,ckEditorReplace" 
                  action="{!resetRelatedList}" styleClass="buttonStyle" style="font-size:14px;" status="statLoad3"/> 
                  <apex:commandButton value="Cancel" immediate="true" oncomplete="YAHOO.force.com.hideLine();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad3"/>
                </apex:outputPanel>
            </div>
        </apex:outputPanel>
     </apex:outputPanel>
    </apex:form>
    
</apex:tab>
<apex:tab label="Filters and Sort Order" name="tab3" id="tabThree">
<apex:form >
    <apex:outputPanel id="wp">
        <apex:pageBlock title="Filter Rows" mode="edit">
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                    <apex:outputlabel for="where" value="Include a Filter/ SOQL WHERE clause (e.g. CreatedDate = THIS_YEAR)"/>
                    <apex:inputText id="where" value="{!rld.whereclause}" style="width:100%;">
                        <apex:actionSupport event="onchange" action="{!updateO}" rerender="op,ckEditorReplace" status="statLoad2"/>
                    </apex:inputText>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputlabel for="limit" value="Maximum number of rows returned/ SOQL LIMIT (e.g. 20): "/>
                    <apex:inputText id="limit" value="{!rld.limitclause}" style="width:100%;">
                        <apex:actionSupport event="onchange" action="{!updateO}" rerender="op,ckEditorReplace" status="statLoad2"/>
                    </apex:inputText>
                </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
                    <apex:outputlabel for="orderby" value="Sort by column(s)/ SOQL ORDER BY clause (e.g. CreatedBy.name, CreatedDate Desc): "/>
                    <apex:inputText id="orderby" value="{!rld.orderbyclause}" style="width:100%;">
                        <apex:actionSupport event="onchange" action="{!updateO}" rerender="op,ckEditorReplace" status="statLoad2"/>
                    </apex:inputText>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>

        </apex:pageBlock>
     </apex:outputPanel>
    </apex:form>
</apex:tab>
<apex:tab label="Formatting & Styles" name="tab4" id="tabFour" rendered="{!NOT(isMSX)}">
<apex:form >
    <apex:actionStatus id="statLoad4">
      <apex:facet name="start">
        <div id="loading-div" style="visibility: visible !important; position: absolute !important;">
          <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
        </div>
      </apex:facet>
    </apex:actionStatus>
    <apex:outputPanel id="fp4">
        <apex:pageBlock title="Choose a column to change style">
            <apex:pageBlockSection columns="2">
                <apex:pageBlockSectionItem >
                    <apex:selectList value="{!rld.rlf}" size="12" id="f74" style="width: 300px;" >
                        <apex:selectOptions value="{!rlfList}" />
                        <apex:actionSupport event="onchange" action="{!getcol}" rerender="cold4,ckEditorReplace" status="statLoad4"/> 
                    </apex:selectList>
                </apex:pageBlockSectionItem>
                 <apex:pageBlockSectionItem >
                 <apex:outputPanel id="cold4">
                     <apex:outputlabel for="c4_1" value="font-family (e.g. Times, Courier, Arial Unicode MS): "/> <apex:inputText id="c4_1" value="{!thisCol.cssff}" style="width:100%"/> <br />
                     <apex:outputlabel for="c4_2" value="font-size (use points): "/> <apex:inputText id="c4_2" value="{!thisCol.cssfs}" style="width:100%"/> <br />
                     <apex:outputlabel for="c4_3" value="font-weight (e.g. normal, bold, bolder): "/> <apex:inputText id="c4_3" value="{!thisCol.cssfw}" style="width:100%"/> <br />
                     <apex:outputlabel for="c4_4" value="text-align (e.g. left, center, right): "/> <apex:inputText id="c4_4" value="{!thisCol.cssta}" style="width:100%"/> <br />
                     <apex:outputlabel for="c4_5" value="width (if using %, all column widths should total 100%): "/> <apex:inputText id="c4_5" value="{!thisCol.csscw}" style="width:100%"/> <br />
                     <apex:actionSupport event="onchange" action="{!setcol}" rerender="cold,op,ckEditorReplace" status="statLoad4"/>
                 </apex:outputPanel>
                 </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
        </apex:pageBlock>
        <apex:pageBlock title="Select table style">
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                <apex:outputPanel id="ts">
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_6.png')}" rendered="{!rld.tableStyle='A6'}" 
                                style="background-color:white; padding:10px; border:2px solid black;"/>
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_6.png')}" rendered="{!rld.tableStyle!='A6'}" style="cursor:pointer;" >
                        <apex:actionSupport event="onclick" action="{!setStyle}" rerender="ts,op,ckEditorReplace" status="statLoad4">
                            <apex:param name="s" value="A6"/>
                        </apex:actionSupport>
                    </apex:image>
                    &nbsp;&nbsp;
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_1.png')}" rendered="{!rld.tableStyle='A1'}" 
                                style="background-color:white; padding:10px; border:2px solid black;"/>
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_1.png')}" rendered="{!rld.tableStyle!='A1'}" style="cursor:pointer;" >
                        <apex:actionSupport event="onclick" action="{!setStyle}" rerender="ts,op,ckEditorReplace" status="statLoad4">
                            <apex:param name="s" value="A1"/>
                        </apex:actionSupport>
                    </apex:image>
                    &nbsp;&nbsp;
                    
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_2.png')}" rendered="{!rld.tableStyle='A2'}" 
                                style="background-color:white; padding:10px; border:2px solid black;"/>
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_2.png')}" rendered="{!rld.tableStyle!='A2'}" style="cursor:pointer;" >
                        <apex:actionSupport event="onclick" action="{!setStyle}" rerender="ts,op,ckEditorReplace" status="statLoad4">
                            <apex:param name="s" value="A2"/>
                        </apex:actionSupport>
                    </apex:image>
                    &nbsp;&nbsp;
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_3.png')}" rendered="{!rld.tableStyle='A3'}" 
                                style="background-color:white; padding:10px; border:2px solid black;"/>
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_3.png')}" rendered="{!rld.tableStyle!='A3'}" style="cursor:pointer;" >
                        <apex:actionSupport event="onclick" action="{!setStyle}" rerender="ts,op,ckEditorReplace" status="statLoad4">
                            <apex:param name="s" value="A3"/>
                        </apex:actionSupport>
                    </apex:image>
                    &nbsp;&nbsp;
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_4.png')}" rendered="{!rld.tableStyle='A4'}" 
                                style="background-color:white; padding:10px; border:2px solid black;"/>
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_4.png')}" rendered="{!rld.tableStyle!='A4'}" style="cursor:pointer;" >
                        <apex:actionSupport event="onclick" action="{!setStyle}" rerender="ts,op,ckEditorReplace" status="statLoad4">
                            <apex:param name="s" value="A4"/>
                        </apex:actionSupport>
                    </apex:image>
                    &nbsp;&nbsp;
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_5.png')}" rendered="{!rld.tableStyle='A5'}" 
                                style="background-color:white; padding:10px; border:2px solid black;"/>
                    <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'Style_A_5.png')}" rendered="{!rld.tableStyle!='A5'}" style="cursor:pointer;" >
                        <apex:actionSupport event="onclick" action="{!setStyle}" rerender="ts,op,ckEditorReplace" status="statLoad4">
                            <apex:param name="s" value="A5"/>
                        </apex:actionSupport>
                    </apex:image>
                    <br /><br />
                </apex:outputPanel>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
        </apex:pageBlock>        
        <apex:outputPanel id="b4">
            <div style="text-align: center;" >
                <apex:actionFunction action="{!updateRLD}" oncomplete="ckEditorUpdate('{!updateRLOutput}');resetRelatedList();" name="updateRLD" />
                <apex:commandButton value="Insert" rerender="p,selectList" action="{!setAdvanced}" oncomplete="insertLine('{!advancedRL}');resetRelatedList();" rendered="{!rlfList.size>0 && NOT(oldRLD)}" styleClass="buttonStyle"  style="font-size:14px;" status="statLoad4"/> 
                <apex:commandButton value="Update" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists" onclick="updateRLD();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad4" rendered="{!oldRLD && NOT(isMSX)}"/>
                <apex:commandButton value="Reset" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists,ckEditorReplace" 
                action="{!resetRelatedList}" styleClass="buttonStyle" style="font-size:14px;" status="statLoad3"/> 
                <apex:commandButton value="Cancel" immediate="true" oncomplete="YAHOO.force.com.hideLine();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad4"/>
            </div>
        </apex:outputPanel>
     </apex:outputPanel>
    </apex:form>    
</apex:tab>
<apex:tab label="{!relatedListTabFiveLabel}" name="tab5" id="tabFive">
    <apex:form >
    <apex:outputPanel id="op">
        <apex:pageBlock title="Edit Source " mode="edit">
            <apex:pageBlockSection columns="1">
                <apex:pageBlockSectionItem >
                   <apex:inputTextarea id="output" value="{!advancedRL}" style="width:100%; height:400px;"/>
                </apex:pageBlockSectionItem>
            </apex:pageBlockSection>
            <apex:pageBlockSection columns="1">
              <apex:actionFunction action="{!updateRLD}" oncomplete="ckEditorUpdate('{!updateRLOutput}');resetRelatedList();" name="updateRLD" />
              <apex:outputPanel layout="none">
                <apex:commandButton value="Copy to Clipboard" 
                onclick="copyToClipboardRelatedList();" rerender="output" rendered="{!rlfList.size>0 && isMSX}" styleClass="buttonStyleCopyToClipboard"  style="font-size:14px;" status="statLoad3"/> 
                <apex:commandButton value="Insert" rerender="p,selectList" action="{!setAdvanced}" oncomplete="insertLine('{!advancedRL}');resetRelatedList();"  rendered="{!rlfList.size>0 && NOT(isMSX) && NOT(oldRLD)}"  styleClass="buttonStyle"  style="font-size:14px;" status="statLoad2"/>
                <apex:commandButton value="Update" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists" onclick="updateRLD();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad2" rendered="{!oldRLD && NOT(isMSX)}"/>
                <apex:commandButton value="Reset" rerender="directDiv,selectobjects,selectrelated,block5,b2,fp,b3,wp,fp4,op,pastRelatedLists" 
                action="{!resetRelatedList}" styleClass="buttonStyle" style="font-size:14px;" status="statLoad3"/>   
                <apex:commandButton value="Cancel" immediate="true" oncomplete="YAHOO.force.com.hideLine();" style="font-size:14px;" styleClass="buttonStyle" status="statLoad2"/>
                <div class="clipboard_msg clipboard_msg_rl"></div>
              </apex:outputPanel>
            </apex:pageBlockSection>
        </apex:pageBlock>
    </apex:outputPanel>
    </apex:form>
</apex:tab>
</apex:tabPanel>
</div>

<script type="text/javascript">
  function setFirstTabToActive() {
    RichFaces.switchTab('{!$Component.theTabPanel}','{!$Component.tabOne}','tab1');
  }

  function showSSTemplateEditorIframe() {
    showLeftIframe('sstemplate-editor-iframe-container');
    var toggleSSignOptionsBtn = document.querySelector('input[id$="toggle-ssign-options-btn"]');
    if (toggleSSignOptionsBtn !== null) {
      toggleSSignOptionsBtn.type = 'button'; // prevents page from refreshing when button is clicked
      toggleSSignOptionsBtn.value = 'Hide S-Sign Options';
      toggleSSignOptionsBtn.onclick = function() { hideSSTemplateEditorIframe(); }
    }
  }
  function hideSSTemplateEditorIframe() {
    hideLeftIframe('sstemplate-editor-iframe-container');
    var toggleSSignOptionsBtn = document.querySelector('input[id$="toggle-ssign-options-btn"]');
    if (toggleSSignOptionsBtn !== null) {
      toggleSSignOptionsBtn.type = 'button'; // prevents page from refreshing when button is clicked
      toggleSSignOptionsBtn.value = 'Show S-Sign Options';
      toggleSSignOptionsBtn.onclick = function() { showSSTemplateEditorIframe(); }
    }
  }

  var sdcomponentVisualizerIsActive = false;

  function toggleSDComponentVisualizerIframe() {
    var iframeId = 'sdcomponentvisualizer-iframe-container';
    var btn = document.querySelector('input[id$="toggle-sdcomponentvisualizer-btn"]');
    btn.type = 'button'; // prevents page from refreshing when button is clicked
    if (!sdcomponentVisualizerIsActive) {
      showLeftIframe(iframeId);
      btn.value = 'Hide Component Visualizer';
    } else {
      hideLeftIframe(iframeId);
      btn.value = 'Show Component Visualizer';
    }
    sdcomponentVisualizerIsActive = !sdcomponentVisualizerIsActive;
  }

  function showLeftIframe(iframeId) {
    document.getElementById('template-editor-container').style='display:inline-block;float:right;width:75%;';
    document.getElementById(iframeId).style='display:inline-block;float:left;width:25%;';
  }

  function hideLeftIframe(iframeId) {
    document.getElementById('template-editor-container').style='';
    document.getElementById(iframeId).style='display:none;';
  }
</script>
<div id="sstemplate-editor-iframe-container" style="display:none;">
  <div style="padding-left:4px;padding-right:4px;">
    <apex:outputPanel id="ssign-iframe-panel">
      <apex:outputPanel layout="none" rendered="{!showSSignIFrame}">
        <iframe id="sstemplate-editor-iframe" src="{!URLFOR(sstemplateEditorURL, null)}" scrolling="yes" style="border-radius:6px;margin-top: 4px; margin-bottom: 4px;width:100%;height:644px;border:1px solid #D4DADC;" frameBorder="0"></iframe>
      </apex:outputPanel>
    </apex:outputPanel>
  </div>
</div>

<div id="sdcomponentvisualizer-iframe-container" style="display:none;">
  <div style="padding-left:4px;padding-right:4px;">
    <iframe src="/apex/SDComponentVisualizer?templateId={!SDTemplate__c.Id}" scrolling="yes" style="border-radius:6px;margin-top: 4px; margin-bottom: 4px;width:100%;height:644px;border:1px solid #D4DADC;" frameBorder="0"></iframe>
  </div>
</div>

<apex:outputPanel id="openPreviewURLFunction">
  <script type="text/javascript">
    function openPreviewURL() {
      window.open('{!URLFOR(previewURL, null)}');
    }
  </script>
</apex:outputPanel>

<div id="template-editor-container">
  <apex:form >
    <apex:pageMessages id="mainPageMessage" escape="false"/>
	
    <apex:actionFunction action="{!save}" name="saveSDocsTemplate" />
    <apex:actionFunction action="{!saveAndClose}" name="saveAndCloseSDocsTemplate" />
    <apex:actionFunction action="{!save}" name="saveSDocsTemplatePDFUpload" rerender="" oncomplete="" />
    <apex:actionFunction action="{!saveAndClose}" name="saveAndCloseSDocsTemplatePDFUpload" rerender="" oncomplete="" />
    <script type="text/javascript">
      var remotingConfig = { buffer: false, escape: false, timeout: 30000 };
      function saveSSignTemplate(msg) {
        document.getElementById('sstemplate-editor-iframe').contentWindow.postMessage(msg, '{!URLFOR(ssignIFrameURL, null)}');
      }
      function savePDFUploadTemplate(msg) {
        msg = 'SSIGN_SAVE|' + msg;
        document.getElementById('pdf-upload-iframe').contentWindow.postMessage(msg, '{!URLFOR(sdocsIFrameURL, null)}');
      }
      function receiveMessage(event) {
        if (event.data === 'save') {
          saveSDocsTemplate();
        } else if (event.data === 'save_and_close') {
          saveAndCloseSDocsTemplate();
        } else if (event.data === 'save_and_preview') {
          saveSDocsTemplate();
          openPreviewURL();
        } else if (event.data === 'save_pdf_upload_sent'
                 || event.data === 'save_pdf_upload_sent_and_close') {
          savePDFUploadTemplate(event.data);
        } else if (event.data.includes('save_pdf_upload_ret')) {
          showLoadingDiv();
          var saveAndCloseAfter = event.data.includes('save_pdf_upload_ret_and_close|');
          var saveAndPreviewAfter = event.data.includes('save_pdf_upload_ret_and_preview|');
          var imgs = document.getElementById('pdf-upload-iframe').contentWindow.document.getElementById('pages-container').getElementsByTagName("img");
          var imgSrcList = [];
          var imgIds = [];
          for (var i = 0; i < imgs.length; i++) {
            //We only want the blob, not all the data:img/png(etc.) stuff
            imgSrcList.push(imgs[i].src.split(',')[1]);
          }
          var positionXML = event.data.split('{!PDF_UPLOAD_SPLITTER}')[1];
          var inputFieldXML = event.data.split('{!PDF_UPLOAD_SPLITTER}')[2];
          console.log('Number of Pages: ' + imgSrcList.length);
          Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.SDTemplateEditor.step1SavePDFUpload}',
            '{!JSENCODE($CurrentPage.parameters.id)}',
            imgSrcList.length,
            function (result, event) { // Callback for the JS Remoting function.
              if (event.status) {
                  var allPagesExist = result;
                  for(var j = 1; j <= imgSrcList.length; j++) {
                    var imgContents = allPagesExist ? '' : imgSrcList[j-1];
                    Visualforce.remoting.Manager.invokeAction(
                      '{!$RemoteAction.SDTemplateEditor.step2SavePDFUpload}',
                      imgContents,
                      j,
                      '{!JSENCODE($CurrentPage.parameters.id)}',
                      allPagesExist,
                      function (result, event) { // Callback for the JS Remoting function.
                        if (event.status) {
                            var pageNumber = result.split('|')[0];
                            var imgId = result.split('|')[1];
                            imgIds.push(imgId);
                            //console.log(result + '|' + imgIds.length + '|' + pageNumber);
                            if(imgIds.length === imgSrcList.length){
                                if (!allPagesExist) {
                                  alert('Successfully uploaded all ' + imgSrcList.length + ' page(s)!');
                                }
                                Visualforce.remoting.Manager.invokeAction(
                                  '{!$RemoteAction.SDTemplateEditor.step3SavePDFUpload}',
                                  positionXML,
                                  inputFieldXML,
                                  '{!JSENCODE($CurrentPage.parameters.id)}',
                                  function (result, event) { // Callback for the JS Remoting function.
                                    if (event.status) {
                                        /* result.Id is Id of newly created S-Doc Template;
                                        zip is the object corresponding to this .docx */
                                        if(saveAndCloseAfter)
                                          saveAndCloseSDocsTemplatePDFUpload();
                                        else if(saveAndPreviewAfter){
                                          saveSDocsTemplate();
                                          openPreviewURL();
                                        }
                                        else
                                          saveSDocsTemplate();
                                    } 
                                    else {
                                      alert('Error while saving uploaded PDF - (Step 3): ' + event.message);
                                      hideLoadingDiv();
                                    }
                                  },
                                  remotingConfig
                                );
                            }
                        } 
                        else {
                          alert('Error while saving uploaded PDF - (Step 2): ' + event.message);
                          hideLoadingDiv();
                        }
                      },
                      remotingConfig
                    );
                  }
              } 
              else {
                alert('Error while saving uploaded PDF - (Step 1): ' + event.message);
                hideLoadingDiv();
              }
            },
            remotingConfig
          );
        }
      }
      addEvent(window, 'message', receiveMessage);
    </script>

    <apex:outputText escape="false" rendered="{!NOT(ISNULL(SDOC__SDTemplate__c.SDOC__Master_Template__c))}">
        <!-- This is safe for escape="false" since we are JS+HTMLEncoding the field below, since it should be an ID -->
        <span style="font-weight:bold; font-size:12pt; color:red; text-align:center"> 
            You cannot edit this template because it is an archived version that is READ-ONLY.<br/>
            If you want to restore this version, open the 
            <a href ="/{!JSENCODE(HTMLENCODE(SDTemplate__c.master_template__c))}">CURRENT VERSION</a>
            of this template, and then click on the restore link from the Version History list.
        </span>
    </apex:outputText>
    <apex:pageBlock title="Edit Template: {!SDOC__SDTemplate__c.name}" id="editBlock" mode="edit">
        <!-- <apex:outputText value="Field for edit:" rendered="false"/>    
        <apex:selectList value="{!fieldForEdit}" size="1" id="f3" rendered="false"> 
            <apex:selectOptions value="{!templateFields}" />
            <apex:actionSupport event="onchange" action="{!swapEditor}"></apex:actionSupport>
        </apex:selectList> -->
        <apex:pageBlockButtons style="text-align: left;" location="top">
          <apex:outputPanel id="template-editor-btns-panel">
            <apex:outputPanel layout="none" rendered="{!ISNULL(SDOC__SDTemplate__c.SDOC__Master_Template__c)}">
              <!--<apex:outputPanel layout="none" rendered="{!AND( NOT(showSSignIFrame), NOT(showPDFUploadIFrame) )}">-->
              <apex:outputPanel layout="none" rendered="{!AND(NOT(showSSignIFrame),NOT(showPDFUploadIFrame))}">
                <apex:commandButton value="Save" action="{!save}" />
                <apex:commandButton value="Save & Close" action="{!saveAndClose}" />
              </apex:outputPanel>
              <apex:outputPanel layout="none" rendered="{!AND(showSSignIFrame,NOT(showPDFUploadIFrame))}">
                <!-- saveSSignTemplate() in SSTemplateEditor iframe updates the S-Sign Template, then 
                sends a message telling the SDTeplateEditor parent page to save the S-Docs Template.
                For more, see receiveMessage() in SSTemplateEditor.page in S-Sign. -->
                <apex:commandButton value="Save"
                onclick="saveSSignTemplate('save');" oncomplete="" />
                <apex:commandButton value="Save & Close"
                onclick="saveSSignTemplate('save_and_close');" oncomplete="" />
              </apex:outputPanel>
              <apex:outputPanel layout="none" rendered="{!showPDFUploadIFrame}">
                <!-- saveSSignTemplate() in SSTemplateEditor iframe updates the S-Sign Template, then 
                sends a message telling the SDTeplateEditor parent page to save the S-Docs Template.
                For more, see receiveMessage() in SSTemplateEditor.page in S-Sign. 
                <apex:commandButton value="Save Uploaded PDF"
                onclick="savePDFUploadTemplate('save_pdf_upload_sent');" oncomplete="" reRender="" />-->
                <apex:commandButton value="Save"
                onclick="savePDFUploadTemplate('save_pdf_upload_sent');" rerender="" oncomplete="" />
                <apex:commandButton value="Save & Close"
                onclick="savePDFUploadTemplate('save_pdf_upload_sent_and_close');" rerender="" oncomplete="" />
                <apex:commandButton value="Re-Upload PDF" action="{!setPDFUploadFalse}" onclick="savePDFUploadTemplate('save_pdf_upload_sent_and_close');" rendered="{!pdfUploadFileUploaded}" />
              </apex:outputPanel>
            </apex:outputPanel>
            <apex:commandButton value="Cancel" action="{!cancel}"/>
            <!-- ADDED BY MATT: We only don't want to render these buttons if this is Drag and Drop -->
            <apex:outputPanel layout="none" rendered="{!NOT(ShowPDFUploadIFrame)}">
              <apex:commandButton value="Insert Field" oncomplete="YAHOO.force.com.showMe();" 
              rendered="{!ISNULL(SDOC__SDTemplate__c.SDOC__Master_Template__c)}"
              disabled="{!disableInsertFieldButton}"/>
              <apex:commandButton value="Insert Related List" oncomplete="YAHOO.force.com.showLine();"
              rendered="{!AND( ISNULL(SDTemplate__c.Master_Template__c), showInsertRelatedListButton, SDTemplate__c.Template_Format__c != 'XLSX') }"
              disabled="{!disableInsertNonFieldButtons}"/>
              <apex:commandButton value="Insert Conditional Logic" oncomplete="YAHOO.force.com.showRender();"
              rendered="{!AND( ISNULL(SDOC__SDTemplate__c.SDOC__Master_Template__c))}"
              disabled="{!disableInsertNonFieldButtons}"/>
            </apex:outputPanel>
            <apex:outputPanel layout="none" rendered="{!AND(showSSignIFrame,NOT(ShowPDFUploadIFrame))}">
              <apex:commandButton id="toggle-ssign-options-btn" value="Hide S-Sign Options" onclick="hideSSTemplateEditorIframe();" />
            </apex:outputPanel>
            <apex:outputPanel id="generatePreviewContainer">
              <apex:outputPanel layout="none" rendered="{!NOT(disablePreview)}">
                <apex:commandButton value="Save & Preview" action="{!save}"
                onclick="openPreviewURL();" rendered="{!AND(NOT(showSSignIFrame),NOT(ShowPDFUploadIFrame))}"/>
                <apex:commandButton value="Save & Preview"
                onclick="saveSSignTemplate('save_and_preview');" oncomplete="" rendered="{!AND(showSSignIFrame,NOT(ShowPDFUploadIFrame))}"/>
                <apex:commandButton value="Save & Preview"
                onclick="savePDFUploadTemplate('save_pdf_upload_sent_and_preview');" rendered="{!ShowPDFUploadIFrame}" rerender="" oncomplete="" />
              </apex:outputPanel>
            </apex:outputPanel>
          </apex:outputPanel>
       </apex:pageBlockButtons>

<apex:tabPanel switchType="client" id="mainTabPanel" styleClass="theTabPanel" tabClass="theTabPanel" contentClass="tabContent" activeTabClass="activeTab" inactiveTabClass="inactiveTab" width="100%" value="{!editorTabInFocus}" onclick="reRenderPageBlockButtons();">

  <!-- ____________________________________________
       START UPLOAD MSX TAB
       ____________________________________________ -->

  <apex:tab label="Upload New {!JSENCODE(HTMLENCODE(SDOC__SDTemplate__c.SDOC__Template_Format__c))} Template" name="docxTab" id="docxTab" rendered="{!showtabDocx}">
    <apex:iframe src="{!URLFOR('/apex/SDFileUpload?isDocxUpload=true&docxTemplateId=' + Id + '&msxFiletype=' + msxfiletypeSDFileUpload, null)}" />
  </apex:tab>

  <!-- ____________________________________________
       END UPLOAD MSX TAB
       ____________________________________________ -->

  <!-- ____________________________________________
       START UPLOAD PDF-UPLOAD TAB
       ____________________________________________ -->

  <apex:tab label="Upload PDF" name="pdfUploadTab" id="pdfUploadTab" rendered="{!showPDFUploadIframe}">
    <apex:outputPanel rendered="{!NOT(pdfUploadFileUploaded)}">
      <apex:iframe src="{!URLFOR('/apex/SDFileUpload?isPDFUpload=true&pdfUploadTemplateId=' + Id + '&msxFiletype=' + msxfiletypeSDFileUpload, null)}" />
    </apex:outputPanel>
    <apex:outputPanel rendered="{!pdfUploadFileUploaded}">
      <iframe frameborder="0" scrolling="yes" height="600px" id="pdf-upload-iframe" name="pdf-upload-iframe" src="{!URLFOR(PDFUploadTemplateEditorURL, null)}" width="100%" onload="pdfUploadSSTemplateEditorToggle();" />
    </apex:outputPanel>
  </apex:tab>

  <!-- ____________________________________________
       END UPLOAD PDF-UPLOAD TAB
       ____________________________________________ -->

  <!-- ____________________________________________
       START TEMPLATE BODY TAB
       ____________________________________________ -->

  <apex:tab label="{!tabOneName}" name="templateBodyTab" id="templateBodyTab" rendered="{!showtab[1]}">
    <apex:outputPanel layout="none" rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c != 'DOC-NEW'}">
      <apex:pageBlockSection columns="1" rendered="{!whichEditor=='1'}">
        <apex:pageBlockSectionItem rendered="{!NOT(plainTextTemplateBody)}">
          <apex:inputTextarea id="editor1" value="{!TemplateXML}" styleClass="ckeditor1" />
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem rendered="{!plainTextTemplateBody}">
          <apex:inputTextarea value="{!TemplateXML}" style="height: 600px;" />
        </apex:pageBlockSectionItem>
      </apex:pageBlockSection>
    </apex:outputPanel>
    <!-- ====================================================================================== -->
    <!-- START: DOC-NEW                                                                         -->
    <!-- ====================================================================================== -->
    <apex:outputPanel id="docnew-outputpanel" rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c == 'DOC-NEW'}">
      <apex:repeat value="{!sectionWrappers.sectionWrapperList}" var="sw">
        <apex:pageBlockSection columns="1" title="Section {!sw.sectionNumber}">
          <apex:commandButton value="Delete Section"
            action="{!sectionWrappers.deleteSection}"
            onclick="showLoadingDiv();saveCkEditorInputs();"
            oncomplete="addCKEditorToDocNewBodyHeaderFooter(true);"
            reRender="docnew-outputpanel"
          >
            <apex:param name="sectionToDelete"
              assignTo="{!sectionWrappers.sectionToDelete}"
              value="{!sw.sectionNumber}"
            />
          </apex:commandButton>
          <apex:outputPanel rendered="{!sectionWrappers.numSectionWrappers > 1}">
            <apex:commandButton value="Move Section Up"
              action="{!sectionWrappers.moveSectionUp}"
              rendered="{!sw.sectionNumber > 1}"
              onclick="saveCkEditorInputs();"
              oncomplete="addCKEditorToDocNewBodyHeaderFooter();"
              reRender="docnew-outputpanel"
            >
              <apex:param name="sectionToMoveUp"
                assignTo="{!sectionWrappers.sectionToMove}"
                value="{!sw.sectionNumber}"
              />
            </apex:commandButton>
            <apex:commandButton value="Move Section Down"
              action="{!sectionWrappers.moveSectionDown}"
              rendered="{!sw.sectionNumber < sectionWrappers.numSectionWrappers}"
              onclick="saveCkEditorInputs();"
              oncomplete="addCKEditorToDocNewBodyHeaderFooter();"
              reRender="docnew-outputpanel"
            >
              <apex:param name="sectionToMoveDown"
                assignTo="{!sectionWrappers.sectionToMove}"
                value="{!sw.sectionNumber}"
              />
            </apex:commandButton>
          </apex:outputPanel>
          Section {!sw.sectionNumber} Page Settings
          <apex:outputPanel rendered="{!sectionWrappers.numSectionWrappers > 1}">
            <apex:selectList value="{!sw.pageSettingsNumber}" size="1" multiselect="false">
              <apex:selectOptions value="{!sectionWrappers.pageSettingsInheritOptions}" />
              <apex:actionSupport event="onchange"
                onsubmit="saveCkEditorInputs();" 
                oncomplete="addCKEditorToDocNewBodyHeaderFooter();"
                reRender="docnew-outputpanel"
              />
            </apex:selectList>
          </apex:outputPanel>
          <apex:outputPanel rendered="{!sw.pageSettingsNumber == sw.sectionNumber}">
            <apex:pageBlockSection columns="2" collapsible="false">
              <apex:outputlabel />
              <apex:inputText value="{!sw.marginLeft}" label="Margin Left" />
              <apex:inputText value="{!sw.unitOfMeasure}" label="Unit of Measure" />
              <apex:inputText value="{!sw.marginRight}" label="Margin Right" />
              <apex:inputText value="{!sw.pageWidth}" label="Page Width" />
              <apex:inputText value="{!sw.marginTop}" label="Margin Top" />
              <apex:inputText value="{!sw.pageHeight}" label="Page Height" />
              <apex:inputText value="{!sw.marginBottom}" label="Margin Bottom" />
            </apex:pageBlockSection>
          </apex:outputPanel>

          Section {!sw.sectionNumber} Header
          <br />
          <apex:outputPanel rendered="{!sectionWrappers.numSectionWrappers > 1}">
            <apex:selectList value="{!sw.headerNumber}" size="1" multiselect="false">
              <apex:selectOptions value="{!sectionWrappers.headerInheritOptions}" />
              <apex:actionSupport event="onchange"
                onsubmit="saveCkEditorInputs();" 
                oncomplete="addCKEditorToDocNewBodyHeaderFooter();"
                reRender="docnew-outputpanel"
              />
            </apex:selectList>
          </apex:outputPanel>
          <apex:outputPanel rendered="{!sw.headerNumber == sw.sectionNumber}">
            <br />
            <apex:inputTextarea value="{!sw.headerHTML}" styleClass="ckeditor-docnew-header" />
          </apex:outputPanel>
          <br />

          Section {!sw.sectionNumber} Body
          <br />
          <apex:inputTextarea value="{!sw.bodyHTML}" styleClass="ckeditor-docnew-body" />
          <br />

          Section {!sw.sectionNumber} Footer 
          <br />
          <apex:outputPanel rendered="{!sectionWrappers.numSectionWrappers > 1}">
            <apex:selectList value="{!sw.footerNumber}" size="1" multiselect="false">
              <apex:selectOptions value="{!sectionWrappers.footerInheritOptions}" />
              <apex:actionSupport event="onchange"
                onsubmit="saveCkEditorInputs();" 
                oncomplete="addCKEditorToDocNewBodyHeaderFooter();"
                reRender="docnew-outputpanel"
              />
            </apex:selectList>
          </apex:outputPanel>
          <apex:outputPanel rendered="{!sw.footerNumber == sw.sectionNumber}">
            <br />
            <apex:inputTextarea value="{!sw.footerHTML}" styleClass="ckeditor-docnew-footer" />
          </apex:outputPanel>
          <br />
          Include section only if the following conditions are true:
          <apex:inputTextarea value="{!sw.renderSectionIf}" style="width:100%;" />
        </apex:pageBlockSection>
      </apex:repeat>
      <br />
      <br />
      <apex:commandButton value="Add New Section" 
        action="{!sectionWrappers.addNewSectionWrapper}"
        onclick="showLoadingDiv();saveCkEditorInputs();"
        oncomplete="addCKEditorToDocNewBodyHeaderFooter();"
        reRender="docnew-outputpanel"
      />
    </apex:outputPanel>
    <!-- ====================================================================================== -->
    <!-- END: DOC-NEW                                                                           -->
    <!-- ====================================================================================== -->
  </apex:tab>

  <!-- ____________________________________________
       END TEMPLATE BODY TAB
       ____________________________________________ -->

  <!-- ____________________________________________
       START HEADER TAB
       ____________________________________________ -->

  <apex:tab label="Header" name="headerTab" id="headerTab" rendered="{!showtab[2]}">
    <apex:pageBlockSection title="Header on First Page" columns="1" id="hofp">
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel value="Background Image URL" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_FPHeader_BackGrndImgUrl__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel value="Background Image Style" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_FPHeader_BackGrndImgStyle__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:inputTextarea id="editor2" value="{!header}" styleClass="ckeditor1" />   
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    <apex:pageBlockSection title="Header on Remaining Pages" columns="1" id="horp">
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Use first page header for all pages" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__HeaderSame__c}"/>
      </apex:pageBlockSectionItem>
      <script>
        twistSection(document.getElementById("{!$Component.horp}").childNodes[0].childNodes[0]);
      </script>
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel value="Background Image URL" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_SPHeader_BackGrndImgUrl__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel value="Background Image Style" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_SPHeader_BackGrndImgStyle__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:inputTextarea id="headerEditor" value="{!header2}" styleClass="ckeditor1"/>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
  </apex:tab>

  <!-- ____________________________________________
       END HEADER TAB
       ____________________________________________ -->

  <!-- ____________________________________________
       START FOOTER TAB
       ____________________________________________ -->

  <apex:tab label="Footer" name="footerTab" id="footerTab" rendered="{!showtab[3]}">
    <apex:pageBlockSection title="Footer on First Page" columns="1" id="fofp">
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel value="Background Image URL" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_FPFooter_BackGrndImgUrl__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel value="Background Image Style" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_FPFooter_BackGrndImgStyle__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:inputTextarea id="editor4" value="{!footer}" styleClass="ckeditor1" />
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    <apex:pageBlockSection title="Footer on Remaining Pages" columns="1" id="forp">
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Use first page footer for all pages" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__FooterSame__c}"/>
      </apex:pageBlockSectionItem>
      <script>
        twistSection(document.getElementById("{!$Component.forp}").childNodes[0].childNodes[0]);
      </script>
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel value="Background Image URL" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_SPFooter_BackGrndImgUrl__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel value="Background Image Style" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_SPFooter_BackGrndImgStyle__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:inputTextarea id="footerEditor" value="{!footer2}" styleClass="ckeditor1"/>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
  </apex:tab>

  <!-- ____________________________________________
       END FOOTER TAB
       ____________________________________________ -->

  <!-- ____________________________________________
       START PAGE SETTINGS TAB
       ____________________________________________ -->

  <apex:tab label="Page Settings" name="pageSettingsTab" id="pageSettingsTab" rendered="{!showtab[4]}">
    <apex:outputPanel id="page-settings-tab">
      <apex:inputHidden value="{!SDOC__SDTemplate__c.SDOC__MS_Unit_of_Measure__c}" />
      <apex:pageBlockSection title="Page Properties" columns="2">
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="Unit of Measure" />
          <apex:selectList value="{!selectedUnitOfMeasure}" size="1">
            <apex:selectOptions value="{!unitOfMeasureOptions}" />
            <apex:actionSupport action="{!adjustPageSettingsFieldsByUnit}" event="onchange" reRender="page-settings-tab" oncomplete="reRenderPageSettings();"/>
          </apex:selectList>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="Left Margin"/>
          <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Page_Margin_Left__c}"/>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="Width"/>
          <apex:outputPanel id="page-width">
            <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Page_Width__c}" html-disabled="true" rendered="{!disablePageDimmensions}"/>
            <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Page_Width__c}" rendered="{!NOT(disablePageDimmensions)}"/>
          </apex:outputPanel>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="Right Margin"/>
          <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Page_Margin_Right__c}"/>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="Height"/>
          <apex:outputPanel id="page-height">
            <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Page_Height__c}" html-disabled="true" rendered="{!disablePageDimmensions}"/>
            <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Page_Height__c}" rendered="{!NOT(disablePageDimmensions)}"/>
          </apex:outputPanel>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="Header Margin"/>
          <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Page_Header_Margin__c}"/>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem helpText="{!helpTextMap['pageSettings']['pageLayout']}">
          <apex:outputLabel value="Layout">
            <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['pageSettings']['pageLayout']}"/>
          </apex:outputLabel>
          <apex:selectList value="{!selectedPageLayoutType}" size="1">
            <apex:selectOptions value="{!pageLayoutTypeOptions}" />
            <apex:actionSupport event="onchange" action="{!assignPageDimmensionsFromType}" reRender="page-height,page-width" oncomplete="reRenderPageSettings();"/>
          </apex:selectList>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
          <apex:outputLabel value="Footer Margin"/>
          <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Page_Footer_Margin__c}"/>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem helpText="{!helpTextMap['pageSettings']['embedImages']}" rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c == 'DOC'}">
          <apex:outputLabel value="Embed Images">
            <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['pageSettings']['embedImages']}"/>
          </apex:outputLabel>
          <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Embed_Images__c}"/>
        </apex:pageBlockSectionItem>
      </apex:pageBlockSection>
    </apex:outputPanel>
  </apex:tab>
  <apex:actionFunction name="reRenderPageSettings" action="{!doNothing}" reRender="page-settings-tab" oncomplete="" />

  <!-- ____________________________________________
       END PAGE SETTINGS TAB
       ____________________________________________ -->

  <!-- ____________________________________________
       START DOCUMENT OPTIONS TAB
       ____________________________________________ -->

  <apex:tab label="Document Options" name="documentOptionsTab" id="documentOptionsTab" rendered="{!showtab[5]}">
    <apex:pageBlockSection title="Attachment & File Name Options"  columns="2">
      <apex:pageBlockSectionItem helpText="{!helpTextMap['documentOptions']['nameFormat']}">
        <apex:outputLabel value="Attachment and File name format">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['nameFormat']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Create_Attachment_Name__c}"/>                              
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem />
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Note:"/>
        <apex:outputText escape="false" value="Do not include the extension (.doc, .pdf, etc) in the above field" />
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem />
      <apex:pageBlockSectionItem helpText="{!helpTextMap['documentOptions']['nameFormatExample']}">
        <apex:outputLabel value="Examples:">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['nameFormatExample']}"/>
        </apex:outputLabel>
        <apex:outputText escape="false" 
          value="
            Proposal for &#123;!Opportunity.Account.Name}<br />
            Legal Contract - &#123;!DocumentID}<br />
            &#123;!DocumentName} for &#123;!Opportunity.Account.Name}
          "
        />
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    
    <apex:pageBlockSection title="Attachment & File Options"  columns="2" >
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Create Salesforce Attachment and link to record"/>
        <apex:inputCheckbox value="{!SDOC__SDTemplate__c.SDOC__Create_Attachment__c}">
          <apex:actionSupport event="onclick" reRender="createNewCheckbox, createEmailCheckbox,allowNamingNewCheckbox" action="{!checkAttachmentSettings}"/>
        </apex:inputCheckbox>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!isLiveEditable}">
        <apex:outputLabel value="Allow Edit"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Allow_Edit__c}">
          <apex:actionSupport event="onclick" reRender="createNewCheckbox,createEmailCheckbox,allowNamingNewCheckbox" oncomplete=""/>
        </apex:inputField>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Create Salesforce File and link to record"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Create_File__c}">
          <apex:actionSupport event="onclick" reRender="createNewCheckbox,createEmailCheckbox,allowNamingNewCheckbox" action="{!checkAttachmentSettings}"/>
        </apex:inputField>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem id="nameEditedNewAttachmentCheckbox" >
        <apex:outputLabel value="Allow naming of new Salesforce Attachment with each edit"/>
        <apex:inputCheckbox id="allowNamingNewCheckbox" value="{!SDOC__SDTemplate__c.SDOC__Allow_Create_New_Attachment__c}" disabled="{!(SDOC__SDTemplate__c.SDOC__Allow_Edit__c == false || (SDOC__SDTemplate__c.SDOC__Create_Attachment__c == false && SDOC__SDTemplate__c.SDOC__Create_File__c == false) || (SDOC__SDTemplate__c.SDOC__Create_New_Attachment_with_Each_Edit__c == true))}">
          <apex:actionSupport event="onclick" reRender="createNewCheckbox, createEmailCheckbox,allowNamingNewCheckbox" action="{!checkAttachmentSettings}"/>
        </apex:inputCheckbox>  
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Create Salesforce Attachment only when emailed"/>
        <apex:inputCheckbox id="createEmailCheckbox" value="{!SDOC__SDTemplate__c.SDOC__Auto_Create_Attachment_On_Email__c}" disabled="{!(SDOC__SDTemplate__c.SDOC__Create_Attachment__c || SDOC__SDTemplate__c.SDOC__Create_File__c)}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem id="createNewAttachmentCheckbox" >
        <apex:outputLabel value="Create new Salesforce Attachment with each edit"/>
        <apex:inputCheckbox id="createNewCheckbox" value="{!SDOC__SDTemplate__c.SDOC__Create_New_Attachment_with_Each_Edit__c}" disabled="{!(SDOC__SDTemplate__c.SDOC__Allow_Edit__c == false || (SDOC__SDTemplate__c.SDOC__Create_Attachment__c == false && SDOC__SDTemplate__c.SDOC__Create_File__c == false) || (SDOC__SDTemplate__c.SDOC__Allow_Create_New_Attachment__c == true))}">
          <apex:actionSupport event="onclick" reRender="createNewCheckbox, createEmailCheckbox,allowNamingNewCheckbox" action="{!checkAttachmentSettings}"/>
        </apex:inputCheckbox>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['documentOptions']['deleteRelatedAttachment']}">
        <apex:outputLabel value="Delete related Salesforce Attachment/File upon S-Doc deletion">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['deleteRelatedAttachment']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Remove_Attachment_On_Delete__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!JSENCODE($CurrentPage.parameters.showCVJSON)}">
        <br />
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['documentOptions']['contentVersionFieldJSON']}" rendered="{!JSENCODE($CurrentPage.parameters.showCVJSON)}">
        <apex:outputLabel value="Content Version Field Assignment JSON">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['contentVersionFieldJSON']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Content_Version_Field_JSON__c}"/> 
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>

    <apex:pageBlockSection title="Mass Merge Options" columns="2" rendered="{!massMergeConfigured}">
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="mm6" value="Allow user to email single consolidated document"/>
        <apex:inputField id="mm6" value="{!SDOC__SDTemplate__c.SDOC__Mass_Merge_Allow_Email__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="mm2" value="Immediately clear S-Doc jobs after combine all"/>
        <apex:inputField id="mm2" value="{!SDOC__SDTemplate__c.SDOC__Mass_Merge_Clear_Jobs__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="mm3" value="Do not archive the single consolidated document"/>
        <apex:inputField id="mm3" value="{!SDOC__SDTemplate__c.SDOC__Dont_Save_Mass_Merge_Docs__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="mm9" value="Immediately clear S-Doc jobs after emailing"/>
        <apex:inputField id="mm9" value="{!SDOC__SDTemplate__c.SDOC__Mass_Merge_Clear_Email_Jobs__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="mm5" value="Do not include a page break between each document"/>
        <apex:inputField id="mm5" value="{!SDOC__SDTemplate__c.SDOC__Mass_Merge_Exclude_Page_Breaks__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="mm1" value="Only create a single summary document"/>
        <apex:inputField id="mm1" value="{!SDOC__SDTemplate__c.SDOC__Mass_Merge_Summary_Document__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="mm7" value="Sort the documents in the consolidated document by this field"/>
        <apex:inputField id="mm7" value="{!SDOC__SDTemplate__c.SDOC__Mass_Merge_Sort_Field__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="mm4" value="Include a page break after every N documents (specify N here)"/>
        <apex:inputField id="mm4" value="{!SDOC__SDTemplate__c.SDOC__Mass_Merge_Page_Break_Every_N_Docs__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c == 'XML'}" helpText="{!helpTextMap['documentOptions']['massMergeXMLMasterTag']}">
        <apex:outputLabel for="mm8" value="XML Master Tag">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['massMergeXMLMasterTag']}"/>
        </apex:outputLabel>
        <apex:inputField id="mm8" value="{!SDOC__SDTemplate__c.SDOC__XML_Mass_Merge_Master_Tag__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c != 'XML'}">
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>

    <apex:pageBlockSection title="Other Options"  columns="2" >
      <apex:pageBlockSectionItem rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='PDF' || SDOC__SDTemplate__c.SDOC__Template_Format__c=='PDF-UPLOAD' || SDOC__SDTemplate__c.SDOC__Template_Format__c=='XLS'|| SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}">
        <apex:outputLabel for="uc" value="Template contains international characters (Unicode fonts)"/>
        <apex:inputField id="uc" value="{!SDOC__SDTemplate__c.SDOC__PDF_Unicode__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel for="aa" value="Attach related case articles to outbound email"/>
        <apex:inputField id="aa" value="{!SDOC__SDTemplate__c.SDOC__InclArticles__c}"/>                              
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!isMSX}">
        <apex:outputLabel value="Rich Text Image Dimensions" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MSX_Rich_Text_Image_Dimensions__c}" style="width: 200px;" />                              
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['documentOptions']['unicodeEnforcementLevel']}"
        rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c=='PDF' || SDOC__SDTemplate__c.SDOC__Template_Format__c=='PDF-UPLOAD' || SDOC__SDTemplate__c.SDOC__Template_Format__c=='XLS'|| SDOC__SDTemplate__c.SDOC__Template_Format__c=='DOC'}"
      >
        <apex:outputLabel for="uc" value="Unicode enforcement level">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['unicodeEnforcementLevel']}"/>
        </apex:outputLabel>
        <apex:inputField id="uc" value="{!SDOC__SDTemplate__c.SDOC__Unicode_Level__c}"/>                              
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Show warning messages during document generation"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Show_Warning_Messages__c}"/>                              
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem rendered="{!NOT(isMSX)}">
        <apex:outputLabel for="vh" value="Maximum versions retained in archive"/>
        <apex:inputField id="vh" value="{!SDOC__SDTemplate__c.SDOC__Version_History_Keep_Limit__c}"/>                              
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['documentOptions']['redirectToRecord']}">
        <apex:outputLabel value="Redirect back to record">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['redirectToRecord']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_ReturnToRecord__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['pageSettings']['embedImages']}" rendered="{!SDOC__SDTemplate__c.SDOC__Template_Format__c == 'DOC-NEW'}">
        <apex:outputLabel value="Embed Images">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['pageSettings']['embedImages']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__MS_Embed_Images__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['pageSettings']['embedImages']}" rendered="{!SDOC__SDTemplate__c.SDOC__GD_Enabled__c}">
        <apex:outputLabel value="Google Drive Folder Id for Upload">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['googleDriveFolderId']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Google_Drive_Folder_Id__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['pageSettings']['embedImages']}" rendered="{!SDOC__SDTemplate__c.SDOC__GD_Enabled__c}">
        <apex:outputLabel value="Use Native Format for Google Drive Integration">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['documentOptions']['googleDriveNativeFormat']}"/>
        </apex:outputLabel>
        <apex:inputCheckbox value="{!SDOC__SDTemplate__c.SDOC__GD_Use_Native_Format__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['documentOptions']['blacklistedMergeFields']}">
        <apex:outputLabel value="List of merge fields that cannot be null"/>
        <apex:inputTextarea value="{!SDOC__SDTemplate__c.SDOC__Enforced_Merge_Fields__c}"/>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
  </apex:tab>

  <!-- ____________________________________________
       END DOCUMENT OPTIONS TAB
       ____________________________________________ -->

    <!-- ____________________________________________
       START EMAIL SETTINGS TAB
       ____________________________________________ -->

  <apex:tab label="Email Settings" name="emailSettingsTab" id="emailSettingsTab" rendered="{!showtab[6]}">
    <apex:outputLink target="_blank" value="https://www.sdocs.com/resources/documentation/email-templates-in-s-docs" styleClass="sdocs_documentation_btn sdocs_documentation_btn_top"
      onclick="return handleMoreInfoClicked();"
    >
      <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'s-docs_logo.png')}" /> Learn More
    </apex:outputLink>
    <apex:pageBlockSection showHeader="false" columns="2">
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['htmlTemplateNote']}">
        <apex:outputLabel style="vertical-align: bottom" value="Note:">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['htmlTemplateNote']}"/>
        </apex:outputLabel>
        <apex:outputText style="vertical-align: bottom; white-space: nowrap;" escape="false" 
          value="When using merge fields in the Email Settings Tab, 
            only use one set of braces - &#123;!{!SDTemplate__c.Base_Object__c}.Email_Subject__c}"
        />
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    <apex:pageBlockSection title="Email Subject Settings" columns="2">
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['subject']}">
        <apex:outputLabel value="Subject">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['subject']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Subject__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['lockSubject']}">
        <apex:outputLabel value="Lock Subject" >
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['lockSubject']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Lock_Subject__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Example:"/>
        <apex:outputText escape="false" value="Important Information for Account &#123;!MyObj__c.Account__r.Name}" />
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Require subject line"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Require_Subject__c}"/>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>

    <apex:pageBlockSection id="EmailSettingsPBSection" title="Email Recipient Settings" columns="2">
      <apex:pageBlockSectionItem id="EmailSendTo" rendered="{!NOT(SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c=='SSIGN')}" helpText="{!helpTextMap['emailSettings']['to']}">
        <apex:outputLabel value="To">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['to']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Send_To_Long__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem id="EmailLockSendTo" rendered="{!NOT(SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c=='SSIGN')}" helpText="{!helpTextMap['emailSettings']['lockSendTo']}">
        <apex:outputLabel value="Lock To">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['lockSendTo']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Lock_SendTo__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem id="EmailCC" rendered="{!NOT(AND(SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c=='SSIGN',SDOC__SDTemplate__c.SDOC__Template_Format__c != 'HTML'))}">
        <apex:outputLabel value="CC"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_cc__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem id="EmailLockCC" rendered="{!NOT(AND(SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c=='SSIGN',SDOC__SDTemplate__c.SDOC__Template_Format__c != 'HTML'))}">
        <apex:outputLabel value="Lock CC"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Lock_cc__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem id="EmailBCC" rendered="{!NOT(AND(SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c=='SSIGN',SDOC__SDTemplate__c.SDOC__Template_Format__c != 'HTML'))}">
        <apex:outputLabel value="BCC"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_bcc__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem id="EmailLockBCC" rendered="{!NOT(AND(SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c=='SSIGN',SDOC__SDTemplate__c.SDOC__Template_Format__c != 'HTML'))}">
        <apex:outputLabel value="Lock BCC"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Lock_bcc__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['recipientNote1']}" rendered="{!NOT(AND(SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c=='SSIGN',SDOC__SDTemplate__c.SDOC__Template_Format__c != 'HTML'))}">
        <apex:outputLabel value="Note 1:">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['recipientNote1']}"/>
        </apex:outputLabel>
        <apex:outputText value="For the To, CC, and BCC fields, you may enter a static value or use merge fields." />
      </apex:pageBlockSectionItem>
      <apex:pageBlockSection />
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['recipientNote2']}" rendered="{!NOT(AND(SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c=='SSIGN',SDOC__SDTemplate__c.SDOC__Template_Format__c != 'HTML'))}">
        <apex:outputLabel value="Note 2:">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['recipientNote2']}"/>
        </apex:outputLabel>
        <apex:outputText value="Be sure that all static and/or merge field values resolve to a valid email address format and multiple values are separated with a comma." />
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>

    <apex:outputPanel id="temptemptemp">
    <apex:pageBlockSection title="Email Sender Settings" columns="2">
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['from']}">
        <apex:outputLabel value="From">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['from']}"/>
        </apex:outputLabel>
        <apex:selectList value="{!SDOC__SDTemplate__c.SDOC__Email_From_OrgWideAddressId__c}" size="1">
          <apex:selectOptions value="{!orgwideids}"/>
          <apex:actionSupport event="onchange" reRender="temptemptemp" />
        </apex:selectList>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['orgWidePicklist']}">
        <apex:outputLabel value="Enable user to choose/select from a picklist">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['orgWidePicklist']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_From_User_Override__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['restrictOrgWide']}">
        <apex:outputLabel value="Restrict to Org-Wide Addresses">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['restrictOrgWide']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_From_OrgWideAddress_Only__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['conditionalUserSignature']}" rendered="{!SDOC__SDTemplate__c.SDOC__Email_From_OrgWideAddressId__c == null || SDOC__SDTemplate__c.SDOC__Email_From_OrgWideAddressId__c == '1'}">
        <apex:outputLabel value="Use Salesforce Email Signature">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['conditionalUserSignature']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_From_Use_Signature_If_User_Email__c}"/>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    </apex:outputPanel>

    <apex:pageBlockSection title="Other Email Settings" >
      <apex:pageBlockSectionItem helpText="{!helpTextMap['emailSettings']['emailDomainRestriction']}">
        <apex:outputLabel value="Email domain restriction">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['emailSettings']['emailDomainRestriction']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Restricted_Domains__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Lock Body" />
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Email_Lock_Body__c}"/>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
  </apex:tab>

    <!-- ____________________________________________
       END EMAIL SETTINGS TAB
       ____________________________________________ -->

    <!-- ____________________________________________
       START AUTO CREATE TASK TAB
       ____________________________________________ -->

  <apex:tab label="Create Salesforce Task" name="createTaskTab" id="createTaskTab" rendered="{!showtab[7]}">
    <apex:pageBlockSection title="Salesforce Task Settings"  columns="2" >                        
      <apex:pageBlockSectionItem helpText="{!helpTextMap['createTask']['enableTaskCreation']}">
        <apex:outputLabel value="Enable Salesforce Task Creation">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['createTask']['enableTaskCreation']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Task_Auto_Create__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Allow user to toggle Salesforce Task creation"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Allow_Toggle_Task_Creation__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
      </apex:pageBlockSectionItem> 
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Allow user to review/edit Salesforce Task details"/>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Task_Details_Override__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>

    <apex:pageBlockSection title="Salesforce Task Subject"  columns="2">
      <apex:pageBlockSectionItem helpText="{!helpTextMap['createTask']['subject']}">
        <apex:outputLabel value="Subject">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['createTask']['subject']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Task_Subject__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['createTask']['subjectNote1']}">
        <apex:outputLabel value="Note 1:">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['createTask']['subjectNote1']}"/>
        </apex:outputLabel>
        <apex:outputText escape="false" value="You can mix merge fields from your base object along with static text. The following special fields are available if needed: &#123;!DocumentID} and &#123;!DocumentName}." />
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['createTask']['subjectNote2']}">
        <apex:outputLabel value="Note 2:">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['createTask']['subjectNote2']}"/>
        </apex:outputLabel>
        <apex:outputText escape="false" value="If you cannot achieve the desired task subject, you can leverage a formula field to dynamically set the Salesforce Task subject field." />
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    
    <apex:pageBlockSection title="Salesforce Task Status"  columns="2" >
      <apex:pageBlockSectionItem helpText="{!helpTextMap['createTask']['status']}">
        <apex:outputLabel value="Status">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['createTask']['status']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Task_Status__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem >
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['createTask']['statusNote']}">
        <apex:outputLabel value="Note:">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['createTask']['statusNote']}"/>
        </apex:outputLabel>
        <apex:outputText escape="false" value="You can mix merge fields from your base object along with static text to set the Salesforce Task status field." />
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>

    <apex:pageBlockSection title="Salesforce Task Activity Date"  columns="2" >
      <apex:pageBlockSectionItem helpText="{!helpTextMap['createTask']['daysUntilDue']}">
        <apex:outputLabel value="Days until Salesforce Task is due">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['createTask']['daysUntilDue']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Task_Due_Add_Days__c}"/>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['createTask']['countBusinessDaysOnly']}">
        <apex:outputLabel value="Count business days only">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['createTask']['countBusinessDaysOnly']}"/>
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Task_Due_Add_Business_Only__c}"/>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
  </apex:tab>

    <!-- ____________________________________________
       END AUTO CREATE TASK TAB
       ____________________________________________ -->

  <!-- ____________________________________________
       START RUN TIME PROMPTS/USER CHOICE TAB
       ____________________________________________ -->

<!-- ================================ Start User Choice Feature ================================ -->
  <apex:tab label="Runtime Prompts" name="runtimePromptsTab" id="runtimePromptsTab" rendered="{!showtab[8]}">
    <apex:actionStatus id="user-choices-status">
      <apex:facet name="start">
        <div id="loading-div" style="visibility: visible !important;">
          <img width="80" id="loading-div-spinner" src="{!URLFOR($Resource.SDoc,'lightning_spinner.gif')}" class="undraggable" unselectable="on" />
        </div>
      </apex:facet>
    </apex:actionStatus>
    <apex:outputPanel id="user-choices-section">
      <apex:actionFunction name="removeThisUserChoice"
        action="{!ucUserChoices.removeSpecifiedUserChoice}"
        reRender="user-choices-section"
        oncomplete="reRenderUserChoices();"
      >
        <apex:param value=""
          name="paramOne"
          assignTo="{!ucUserChoices.ucNumberOfSpecifiedUserChoice}"
        />
      </apex:actionFunction>
      <apex:actionFunction name="moveThisUserChoiceUp"
        action="{!ucUserChoices.moveSpecifiedUserChoiceUp}"
        reRender="user-choices-section"
        oncomplete="reRenderUserChoices();"
      >
        <apex:param value=""
          name="paramOne"
          assignTo="{!ucUserChoices.ucNumberOfSpecifiedUserChoice}"
        />
      </apex:actionFunction>
      <apex:actionFunction name="moveThisUserChoiceDown"
        action="{!ucUserChoices.moveSpecifiedUserChoiceDown}"
        reRender="user-choices-section"
        oncomplete="reRenderUserChoices();"
      >
        <apex:param value=""
          name="paramOne"
          assignTo="{!ucUserChoices.ucNumberOfSpecifiedUserChoice}"
        />
      </apex:actionFunction>
      <style type="text/css">
        .move-prompt-btn {
          background: none;
          border: none;
          padding: 0px;
          margin: 0px;
        }
        .mouseOverInfo {
          white-space: normal !important;
        }
        .mouseOverInfo label {
          color: white !important;
          white-space: normal !important;
        }
      </style>
      <apex:outputLink target="_blank" value="https://www.sdocs.com/documentation/merge-user-input-with-documents-at-runtime" styleClass="sdocs_documentation_btn sdocs_documentation_btn_top"
        onclick="return handleMoreInfoClicked();"
      >
        <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'s-docs_logo.png')}" /> Learn More
      </apex:outputLink>
      <apex:pageBlockSection showHeader="false" columns="2">
        <apex:pageBlockSectionItem >
          <apex:outputLabel style="vertical-align: bottom" value="Note:" />
          <apex:outputText style="vertical-align: bottom; white-space: nowrap" escape="false" 
            value="You may select multiple templates with run-time prompts 
              within one document generation process"
          />
        </apex:pageBlockSectionItem>
      </apex:pageBlockSection>
      <apex:repeat value="{!ucUserChoices.ucChoices}" var="userChoice">
        <apex:pageBlockSection title="Prompt {!userChoice.ucNumber + 1}" columns="1">
          <apex:pageBlockSection showHeader="false" columns="2">
            <apex:pageBlockSectionItem >
              <apex:outputPanel layout="none">
                <!-- Remove this UserChoice -->
                <apex:outputPanel layout="none" style="padding-top:3px;float:left;">
                  <button type='button'
                  class="move-prompt-btn"
                  onclick="saveCkEditorInputs();
                  if (confirm('Are you sure you want to delete Prompt {!userChoice.ucNumber + 1}?')) {
                    showLoadingDiv();
                    removeThisUserChoice('{!userChoice.ucNumber}');
                  }">
                    <img src="{!URLFOR($Resource.SDoc,'x.gif')}" />
                  </button>
                </apex:outputPanel>
                <!-- Move this UserChoice Up -->
                <apex:outputPanel layout="none" rendered="{!userChoice.ucNumber > 0}">
                  <button type='button'
                  class="move-prompt-btn"
                  onclick="showLoadingDiv(); saveCkEditorInputs(); moveThisUserChoiceUp('{!userChoice.ucNumber}');">
                    <img src="{!URLFOR($Resource.SDOC__SDoc,'up.gif')}" />
                  </button>
                </apex:outputPanel>
                <!-- Move this UserChoice Down -->
                <apex:outputPanel layout="none" rendered="{!userChoice.ucNumber < ucUserChoices.ucNumUserChoices - 1}">
                  <button type='button'
                  class="move-prompt-btn"
                  onclick="showLoadingDiv(); saveCkEditorInputs(); moveThisUserChoiceDown('{!userChoice.ucNumber}');">
                    <img src="{!URLFOR($Resource.SDOC__SDoc,'down.gif')}" />
                  </button>
                </apex:outputPanel>
              </apex:outputPanel>
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem >
              <apex:outputText style="display: none;" value="{!userChoice.ucChoiceType}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem >
              <apex:outputLabel value="Type" />
              <apex:selectList value="{!userChoice.ucChoiceType}" multiselect="false" size="1">
                <apex:selectOptions value="{!userChoice.ucChoiceTypes}"/>
                <apex:actionSupport action="{!doNothing}"
                  event="onchange" 
                  reRender="user-choices-section"
                  oncomplete="showLoadingDiv();reRenderUserChoices();"
                />
              </apex:selectList>
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem >
              <apex:outputLabel value="Page Number" />
              <apex:selectList value="{!userChoice.ucPageNumber}" size="1" multiselect="false">
                <apex:selectOptions value="{!ucPageNumberOptions}" />
              </apex:selectList>
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!(userChoice.ucChoiceType == userChoice.INPUT_TEXT || userChoice.ucChoiceType == userChoice.INPUT_DATE)}"
            >
              <apex:outputLabel value="Required" />
              <apex:inputCheckbox value="{!userChoice.required}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!(userChoice.ucChoiceType == userChoice.INPUT_TEXT || userChoice.ucChoiceType == userChoice.INPUT_DATE)}" />
            <apex:pageBlockSectionItem >
              <apex:outputLabel >
                <span style="color:red">*</span>Merge field name
              </apex:outputLabel>
              <apex:outputPanel id="user-choice-merge-field-panel">
                <apex:inputText value="{!userChoice.ucMergeFieldName}">
                  <apex:actionSupport action="{!userChoice.formatMergeFieldName}"
                    event="onchange" 
                    reRender="user-choices-section,insert-field-tab-panel"
                    oncomplete="showLoadingDiv();reRenderUserChoices();"
                  />
                </apex:inputText>
                <apex:outputPanel rendered="{!(userChoice.ucMergeFieldName != '' && userChoice.ucChoiceType != userChoice.RELATED_LIST)}" style="color:#6C7A89;">
                  <br />
                  You can now use the following merge field in your template:&nbsp;<apex:outputText rendered="{!isMSX}" value="[" />&#123;&#123;&#33;
                  <apex:outputText value="{!userChoice.ucMergeFieldName}" />&#125;&#125;<apex:outputText rendered="{!isMSX}" value="]" />
                </apex:outputPanel>
                <apex:outputPanel rendered="{!(userChoice.ucMergeFieldName != '' && userChoice.ucChoiceType == userChoice.RELATED_LIST)}" style="color:#6C7A89;">
                  <br />
                  You can now use the following merge field in your LineItemsSOQL queries:&nbsp;&#60;runtimeprompts&#62;
                  <apex:outputText value="{!userChoice.ucMergeFieldName}" />&#60;/runtimeprompts&#62;
                  <br/><br/>
                  To reference the IDs of selected records, use the following merge field:&nbsp;&#123;&#123;&#33;
                  <apex:outputText value="{!userChoice.ucMergeFieldName}" />&#125;&#125;
                </apex:outputPanel>
              </apex:outputPanel>
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.RELATED_LIST}">
              <apex:outputLabel value="Select all rows by default"/>
              <apex:inputCheckbox value="{!userChoice.ucSelectAll}"/>
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.INPUT_TEXT}">
              <apex:outputLabel value="Allow user to create new lines" />
              <apex:inputCheckbox value="{!userChoice.ucInput.isTextArea}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.INPUT_TEXT}">
              <apex:outputLabel value="Preformatting">
                <c:HelpIcon helpText="{!helpTextMap['runtimePrompts']['preformatting']}"/>
              </apex:outputLabel>
              <apex:inputTextarea value="{!userChoice.ucFormat}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.INPUT_TEXT}" />
            <apex:pageBlockSection rendered="{!(userChoice.ucChoiceType == userChoice.INPUT_DATE || userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE)}"
            />
            <apex:pageBlockSectionItem /><apex:pageBlockSectionItem />
            <apex:pageBlockSectionItem /><apex:pageBlockSectionItem />
            <apex:pageBlockSectionItem >
              <apex:outputLabel >
                <span style="color:red">*</span>Prompt
              </apex:outputLabel>
              <apex:inputTextarea value="{!userChoice.ucPrompt}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem helpText="{!helpTextMap['runtimePrompts']['showPromptIf']}">
              <apex:outputLabel value="Show this prompt if">
                <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['runtimePrompts']['showPromptIf']}"/>
              </apex:outputLabel>
              <apex:inputTextarea value="{!userChoice.ucRendered}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType != userChoice.RELATED_LIST}">
              <apex:outputLabel value="Write data back to this Salesforce field" />
              <apex:inputText value="{!userChoice.ucWriteBackField}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType != userChoice.RELATED_LIST}"
            >
              <apex:outputLabel value="Prepopulate field with user's previous response" />
              <apex:inputCheckbox value="{!userChoice.ucUsePreviousResponse}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}" />
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}" />
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}" />
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}" />
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}">
              <apex:outputLabel value="Minimum number of options that can be selected" />
              <apex:inputText value="{!userChoice.ucUserChoiceCheckboxes.minNumSelections}"/>
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}">
              <apex:outputLabel value="Delimiter" />
              <apex:inputText value="{!userChoice.ucUserChoiceCheckboxes.checkboxChoiceDelimiter}" />
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}">
              <apex:outputLabel value="Maximum number of options that can be selected" />
              <apex:inputText value="{!userChoice.ucUserChoiceCheckboxes.maxNumSelections}"/>
            </apex:pageBlockSectionItem>
            <apex:pageBlockSectionItem rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}">
              <apex:outputLabel value="Allow user to collapse options" />
              <apex:inputCheckbox value="{!userChoice.ucUserChoiceCheckboxes.collapsableOptions}">
                <apex:actionSupport event="onchange" reRender="closedAsDefault"/>
              </apex:inputCheckbox>
            </apex:pageBlockSectionItem>
            <apex:outputPanel id="closedAsDefault" rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}">
              <apex:pageBlockSectionItem rendered="{!userChoice.ucUserChoiceCheckboxes.collapsableOptions}">
                <apex:outputLabel value="Have options appear as collasped as default" />
                <apex:inputCheckbox value="{!userChoice.ucUserChoiceCheckboxes.closedAsDefault}"/>
              </apex:pageBlockSectionItem>
            </apex:outputPanel>
          </apex:pageBlockSection>
          
          <apex:outputPanel id="user-choice-checkbox-table" >
            <apex:pageBlockTable var="userChoiceCheckbox" 
            value="{!userChoice.ucUserChoiceCheckboxes.ucCheckboxes}"
            rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}">
              <apex:column headerValue="Please provide choices for the user to select from:">
                <br />
                <apex:outputPanel layout="none"  rendered="{!userChoice.ucUserChoiceCheckboxes.ucNumCheckboxChoices > userChoiceCheckbox.uccNumber}">
                  <apex:outputText value="Option {!userChoiceCheckbox.uccNumber + 1}:" />
                  <apex:inputTextarea value="{!userChoiceCheckbox.outputText}" 
                  styleClass="ckeditor-user-choices" style="height:120px;" />
                  Checked by default: <apex:inputCheckbox value="{!userChoiceCheckbox.checkedByDefault}" />
                </apex:outputPanel>
              </apex:column>
            </apex:pageBlockTable>
            <apex:outputPanel layout="none" rendered="{!userChoice.ucChoiceType == userChoice.CHECKBOX_CHOICE}">
              <!-- Add another UserCheckboxChoice text area -->
              <apex:commandButton value="Add Another Option"
                action="{!userChoice.ucUserChoiceCheckboxes.addCheckboxChoice}" 
                reRender="user-choice-checkbox-table"
                onclick="showLoadingDiv();saveCkEditorInputs();"
                oncomplete="reRenderUserChoices();"
              />
              <!-- Remove the last UserCheckboxChoice text area -->
              <apex:commandButton value="Remove Last Option"
                styleClass="verticalAlignMiddleBtn"
                action="{!userChoice.ucUserChoiceCheckboxes.removeCheckboxChoice}" 
                rendered="{!userChoice.ucUserChoiceCheckboxes.ucNumCheckboxChoices > 1}"
                reRender="user-choice-checkbox-table"
                onclick="showLoadingDiv();saveCkEditorInputs();"
                oncomplete="reRenderUserChoices();"
              />
            </apex:outputPanel>
          </apex:outputPanel>
          <br />
          
          <apex:outputPanel layout="none" rendered="{!userChoice.ucChoiceType != userChoice.RELATED_LIST}">
            <apex:outputText value="Default value:" />
            <apex:inputTextarea value="{!userChoice.ucDefaultValue}" styleClass="ckeditor-user-choices" />
          </apex:outputPanel>
        </apex:pageBlockSection>
      </apex:repeat>
      <br />
      <!-- Add another UserChoice -->
      <apex:commandButton value="Add Another Prompt"
        action="{!ucUserChoices.addUserChoice}" 
        reRender="user-choices-section"
        onclick="showLoadingDiv();saveCkEditorInputs();"
        oncomplete="reRenderUserChoices();"
      />
      <br />
      <br />

      <apex:pageBlockSection id="advancedOptionsJSON" title="Advanced Options" columns="1">
        <script>
          twistSection(document.getElementById("{!$Component.advancedOptionsJSON}").childNodes[0].childNodes[0]);
        </script>
        <apex:outputText value="Queryname JSON:" />
        <apex:inputTextarea value="{!ucUserChoices.ucQueryname}" style="height: 120px;" />
      </apex:pageBlockSection>
    </apex:outputPanel>
  </apex:tab>

  <apex:actionFunction action="{!doNothing}"
    name="reRenderUserChoices"
    oncomplete="addCkEditorToUserChoices();"
  />

  <apex:actionFunction action="{!doNothing}"
    name="reRenderUserChoicesForAddAnotherPrompt"
    oncomplete="addCkEditorToUserChoices();setTimeout( function() { addUploadFunctionalityOnImageBtnClick(); }, 1000 );"
  />

  <!-- ____________________________________________
       END RUN TIME PROMPTS/USER CHOICE TAB
       ____________________________________________ -->

  <!-- ____________________________________________
       START ADVANCED OPTIONS TAB
       ____________________________________________ -->

  <apex:tab label="Advanced Options" name="advancedOptionsTab" id="advancedOptionsTab" rendered="{!showtab[9]}">
    <apex:inputHidden value="{!SDOC__SDTemplate__c.SDOC__E_Sign_Vendor__c}" />
    <apex:pageBlockSection id="pbESign" title="Advanced Template Settings" columns="2">
      <apex:pageBlockSectionItem helpText="{!helpTextMap['advancedOptions']['enableSSign']}">
        <apex:outputLabel >
          Enable S-Sign
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['advancedOptions']['enableSSign']}"/>
        </apex:outputLabel>
        <apex:inputCheckbox value="{!ssignEnabled}" disabled="{!disableSSignCheckbox}" onclick="informUserToSave();">
          <apex:actionSupport event="onchange" reRender="ssign-iframe-panel,ssign-toggle-iframe-panel,ssign-show-ssign-iframe,template-editor-btns-panel,insertFieldBtn,send-to-email,EmailSettingsPBSection"/>
        </apex:inputCheckbox>
      </apex:pageBlockSectionItem>
      <apex:outputLink target="_blank" value="https://www.sdocs.com/products/s-sign" styleClass="sdocs_documentation_btn"
        onclick="return handleMoreInfoClicked();"
      >
        <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'s-sign_logo.png')}" style="margin-bottom: 4px !important; margin-top: 4px; webkit-transform: translateZ(0);" />
        Learn More
      </apex:outputLink>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Preview ID" />
        <apex:inputField id="previewId" value="{!SDOC__SDTemplate__c.SDOC__Preview_ID__c}">
          <apex:actionSupport event="onkeyup" rerender="mainPageMessage,generatePreviewContainer,openPreviewURLFunction" status="statLoad1"/>
        </apex:inputField>
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem />
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Note:" />
        <apex:outputText styleClass="ft" escape="false"
          value="In order to generate a preview of your template, you can populate the field above 
            with a(n) {!JSENCODE(HTMLENCODE(SDTemplate__c.Base_Object__c))} record ID, 
            which will cause a button titled &quot;Save & Preview&quot; 
            to display in the button list at the top of the editor."
        />
      </apex:pageBlockSectionItem>
      <!--
      <apex:pageBlockSectionItem rendered="{!hasComponents}" />
      <apex:pageBlockSectionItem rendered="{!hasComponents}" />
      <apex:pageBlockSectionItem rendered="{!hasComponents}" />
      <apex:pageBlockSectionItem rendered="{!hasComponents}" >
        <apex:outputLabel value="" />
        <apex:commandButton id="toggle-sdcomponentvisualizer-btn" value="Show Component Visualizer" onclick="toggleSDComponentVisualizerIframe();" oncomplete="" />
      </apex:pageBlockSectionItem>
      -->
    </apex:pageBlockSection>

    <apex:pageBlockSection id="exportTemplateSettings" title="Export Template" columns="2" rendered="{!NOT(isMSX)}">
      <apex:pageBlockSectionItem helpText="{!helpTextMap['advancedOptions']['exportTemplate']}">
        <apex:outputLabel value="Importable Template Data">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['advancedOptions']['exportTemplate']}" />
        </apex:outputLabel>
        <apex:outputPanel >
          <apex:outputPanel rendered="{!NOT(showTemplateDataExport)}">
            <apex:commandButton value="Generate" action="{!makeShowTemplateDataExportTrue}" onclick="showLoadingDiv();" oncomplete="reRenderExportTemplateSettings();" />
          </apex:outputPanel>
          <apex:outputPanel rendered="{!showTemplateDataExport}">
            <apex:inputTextArea style="max-width: 600px; height: 72px;" id="template_data_export_field" value="{!templateDataExport}" />
            <apex:commandButton value="Copy to Clipboard" onclick="copyToClipboard('template_data_export_field');" rerender="output"/>  
          </apex:outputPanel>
        </apex:outputPanel>
      </apex:pageBlockSectionItem>
      <apex:outputLink target="_blank" value="http://www.sdocs.com/documentation/import-a-template-into-s-docs" styleClass="sdocs_documentation_btn"
        onclick="return handleMoreInfoClicked();"
      >
        <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'s-docs_logo.png')}" /> Learn More
      </apex:outputLink>
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Note 1:" />
        <apex:outputText styleClass="ft" escape="false"
          value="The exported template will reflect this template’s values from the last time the 
            template was opened (using the Template Editor button). If you’ve made any changes since 
            opening this template, please click &quot;Save and Close&quot; before exporting your data."
        />
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem />
      <apex:pageBlockSectionItem >
        <apex:outputLabel value="Note 2:" />
        <apex:outputText styleClass="ft" escape="false">
          A collection of exported S-Docs Templates is available in the&nbsp;
           <apex:outputLink target="_blank" value="https://www.sdocs.com/resources/templates/" onclick="return handleMoreInfoClicked();" >S-Docs Template Library</apex:outputLink>.
          You can import any of these templates into your org.
        </apex:outputText>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>

    <apex:pageBlockSection title="Configure Contact Lookup" columns="2">
      <apex:pageBlockSectionItem helpText="{!helpTextMap['advancedOptions']['configureContactLookup']}" rendered="{!SDOC__SDTemplate__c.SDOC__Base_Object__c == 'Account' || SDOC__SDTemplate__c.SDOC__Base_Object__c == 'Opportunity'}">
        <apex:outputLabel value="Additional Contact Roles for lookup">
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['advancedOptions']['configureContactLookup']}" />  
        </apex:outputLabel>
        <apex:selectList value="{!contactRolesRT}" multiselect="true" size="5">
          <apex:selectOptions value="{!rl1List}"/>
        </apex:selectList>
      </apex:pageBlockSectionItem>
      <apex:outputLink target="_blank" value="https://www.sdocs.com/resources/documentation/include-shipping-and-billing-contacts-on-a-quote" styleClass="sdocs_documentation_btn"
        onclick="return handleMoreInfoClicked();"
      >
        <apex:image value="{!URLFOR($Resource.SDOC__SDoc,'s-docs_logo.png')}" /> Learn More
      </apex:outputLink>
      <apex:pageBlockSectionItem helpText="{!helpTextMap['advancedOptions']['configureContactLookupNote']}" rendered="{!SDOC__SDTemplate__c.SDOC__Base_Object__c == 'Account' || SDOC__SDTemplate__c.SDOC__Base_Object__c == 'Opportunity'}">
        <apex:outputLabel value="Note:" >
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['advancedOptions']['configureContactLookupNote']}" />
        </apex:outputLabel>
        <apex:outputText styleClass="ft" escape="false"
          value="When generating a template using this feature, S-Docs dynamically searches your base record to find all 
            related contact records and then adds them to a picklist allowing the user to select a contact upon generation. 
            This field allows you to expand that picklist of available contact records."
        />
      </apex:pageBlockSectionItem>
      <apex:pageBlockSectionItem />
      <apex:pageBlockSectionItem helpText="{!helpTextMap['advancedOptions']['contactQuickPick']}">
        <apex:outputLabel value="Contact Query Filter" >
          <c:HelpIcon rendered="{!showLightningUI}" helpText="{!helpTextMap['advancedOptions']['contactQuickPick']}" />
        </apex:outputLabel>
        <apex:inputField value="{!SDOC__SDTemplate__c.SDOC__Contact_Quick_Pick_Clause__c}" style="width:100%"/>
      </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    <apex:actionFunction action="{!doNothing}" name="reRenderExportTemplateSettings" reRender="exportTemplateSettings" oncomplete="hideLoadingDiv();" />
  </apex:tab>

  <!-- ____________________________________________
       END ADVANCED OPTIONS TAB
       ____________________________________________ -->

</apex:tabPanel>
<apex:actionFunction name="reRenderPageBlockButtons" action="{!doNothing}" reRender="template-editor-btns-panel" oncomplete="" />

</apex:pageBlock>

    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__ContactRole__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML2__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML3__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML4__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML5__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML6__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML7__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML8__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML9__c}" rendered="false"/>
    <apex:outputText value="{!SDOC__SDTemplate__c.SDOC__Template_XML10__c}" rendered="false"/> 
    </apex:form>
</div>

<apex:outputPanel id="ssign-toggle-iframe-panel">
  <script>
    if ('{!showSSignIFrame}' === 'true' && '{!showPDFUploadIFrame}' !== 'true')
      showSSTemplateEditorIframe();
    else if ('{!showSSignIFrame}' === 'true' && '{!showPDFUploadIFrame}' === 'true'){
      document.getElementById('pdf-upload-iframe').contentWindow.postMessage('ssign_enabled', '{!URLFOR(sdocsIFrameURL, null)}');
    }
    else
      hideSSTemplateEditorIframe();

    function pdfUploadSSTemplateEditorToggle(){
      if ('{!showSSignIFrame}' === 'true' && '{!showPDFUploadIFrame}' === 'true'){
        document.getElementById('pdf-upload-iframe').contentWindow.postMessage('ssign_enabled', '{!URLFOR(sdocsIFrameURL, null)}');
      }
    }
  </script>
</apex:outputPanel>

<apex:outputPanel id="ssign-show-ssign-iframe">
  <script>
    function showSSignIframeBool() {
      return '{!showSSignIFrame}' === 'true';
    }
  </script>
</apex:outputPanel>

<apex:outputPanel id="ckEditorReplace">
  <script>
    function ckEditorUpdate(output) {
      if (output === undefined || output === null || output === '') {
        alert('ERROR: The related list you are attempting to insert is blank or null.');
        return;
      }
      YAHOO.force.com.eDialog.hide();
      for ( var i in CKEDITOR.instances ){
        var replaceInstance = i;
        break;
      }
      var ckEditorRep = CKEDITOR.instances[replaceInstance];
      ckEditorRep.setData(ckEditorRep.getData().replace(/{!relListReplaceRegex}/g, output));
    }
    function ckEditorDelete() {
      YAHOO.force.com.eDialog.hide();
      for ( var i in CKEDITOR.instances ){
        var deleteInstance = i;
        break;
      }
      var ckEditorDel = CKEDITOR.instances[deleteInstance];
      var templateXml = ckEditorDel.getData();
      templateXml = templateXml.replace(/{!relListDeleteRegex}/g, ' ');
      ckEditorDel.setData(templateXml);
    }
  </script>

</apex:outputPanel>

<script type="text/javascript">

function handleMoreInfoClicked() {
  return confirm(
    'You are about to be redirected to ' +
    'https://www.sdocs.com in a new browser ' +
    'tab. Do you wish to continue?'
  );
}

insert=function(output){
    YAHOO.force.com.myDialog.hide();
    var CKEDITOR   = window.CKEDITOR;
    for ( var i in CKEDITOR.instances ){
       var currentInstance = i;
       break;
    }
        var oEditor   = CKEDITOR.instances[currentInstance];
        oEditor.focus();
        oEditor.insertHtml(output);
};

insertRender=function(output){
    YAHOO.force.com.rDialog.hide();
    var CKEDITOR   = window.CKEDITOR;
    for ( var i in CKEDITOR.instances ){
       var currentInstance = i;
       break;
    }
        var oEditor   = CKEDITOR.instances[currentInstance];
        oEditor.focus();
        oEditor.insertHtml(output);
};

insertLine=function(output){
    YAHOO.force.com.eDialog.hide();
    var CKEDITOR   = window.CKEDITOR;
    for ( var i in CKEDITOR.instances ){
       var currentInstance = i;
       break;
    }
        var oEditor   = CKEDITOR.instances[currentInstance];
        oEditor.focus();
        oEditor.insertHtml(output);
        var s = oEditor.getSelection(); // getting selection
        var selected_ranges = s.getRanges(); // getting ranges
        var selected_ranges_org = s.getRanges(); // original
        var node = selected_ranges[0].startContainer; // selecting the starting node
        var parents = node.getParents(true); 
        node = parents[parents.length - 2].getFirst();
        while (true) {
            var x = node.getNext();
            if (x == null) {
                break;
            }
            node = x;
        }
        s.selectElement(node);
        selected_ranges = s.getRanges();
        selected_ranges[0].collapse(false);  //  false collapses the range to the end of the selected node, true before the node.
        s.selectRanges(selected_ranges);
        s.selectRanges(selected_ranges_org);
};

bind = function(){

var CKEDITOR_BASEPATH = '{!URLFOR($Resource.SDOC__ckEditor,'ckeditor/')}';
CKEDITOR.editorConfig = function( config )
        {
            config.font_names = 
              'Arial/Arial Unicode MS,sans-serif;' +
              'Comic Sans MS/comic sans ms,cursive;' +
              'Courier New/courier new,courier,monospace;' +
              'Georgia/georgia,serif;' +
              'Lucida Sans Unicode/lucida sans unicode,lucida grande,sans-serif;' +
              'Tahoma/tahoma,geneva,sans-serif;';
            config.fontSize_sizes =
              '8/8pt;9/9pt;10/10pt;11/11pt;12/12pt;13/13pt;14/14pt;' +
              '16/16pt;18/18pt;20/20pt;22/22pt;24/24pt;26/26pt;28/28pt;' +
              '36/36pt;48/48pt;72/72pt;';
            config.height = '400';
    //        config.autoGrow_onStartup = true;
    //        config.autoGrow_minHeight = 400;
    //        config.autoGrow_bottomSpace = 25;
            // Define changes to default configuration here. For example:
            config.defaultLanguage = 'en';
            config.filebrowserBrowseUrl = '{!$Page.SDOC__SDFileList}';
            config.filebrowserUploadUrl = '{!$Page.SDOC__SDFileUpload}';
            config.filebrowserImageBrowseUrl = '{!$Page.SDOC__SDFileList}';
            config.filebrowserImageUploadUrl = '{!$Page.SDOC__SDFileUpload}' + '?isImageUpload=true';

            // For explanation, open SDTemplateEditor.cls
            // and see notes above useParagraphForLineBreak() function definition
            if ('{!useParagraphForLineBreak}' === 'true') {
              config.enterMode = CKEDITOR.ENTER_P;
            } else {
              config.enterMode = CKEDITOR.ENTER_BR;
            }

            config.shiftEnterMode = CKEDITOR.ENTER_P;
            config.allowedContent = true;
            config.FormatSource = false;
            config.FormatOutput = false;
            if ('{!JSENCODE($CurrentPage.parameters.spellcheck)}' === 'true') {
              config.disableNativeSpellChecker = false;
            }
            config.removePlugins = 'fixed, autogrow';
            if ('{!showLightningUI}' === 'true') {
              config.skin = 'moono-lisa';
            }

            // Paste from Word fix 11/1/17
            config.pasteFromWordRemoveFontStyles = false;
            config.pasteFromWordRemoveStyles = false;

    //        config.fullPage = true;
    //        config.extraPlugins = 'tableresize';
            CKEDITOR.dtd.$removeEmpty['span']=false;
    //        config.extraPlugins = 'resize';
    //        config.resize_maxWidth = '800';
    //        config.forceSimpleAmpersand = true;
            config.toolbar_Full =
            [
            ['Source','-','Preview','-','Maximize','-', 'ShowBlocks','-','Templates'],
            ['Cut','Copy','Paste','PasteText','PasteFromWord','-','Print'],
            ['Undo','Redo','-','Find','Replace'],
            ['Image','Table','Link','PageBreak'],
            '/',
            ['Styles','Format','Font','FontSize'],
            ['TextColor','BGColor'],        
            ['Bold','Italic','Underline','Strike','RemoveFormat','-',],
            ['NumberedList','BulletedList','-','Outdent','Indent'],
            ['JustifyLeft','JustifyCenter','JustifyRight','JustifyBlock', 'lineheight']
            ];

            config.toolbar_UserChoices = [
                ['Source','-','Preview','-','Maximize'],
                ['Font','FontSize'],
                ['TextColor','BGColor'],
                ['Bold','Italic','Underline','Strike','RemoveFormat'],
                ['Image','Table','Link','PageBreak']
            ];
        };

        // Added 9/15/17 to add support for <span arabic="true">
        CKEDITOR.stylesSet.add( 'default', [
          { name: 'Italic Title',   element: 'h2', styles: { 'font-style': 'italic' } },
          { name: 'Subtitle',     element: 'h3', styles: { 'color': '#aaa', 'font-style': 'italic' } },
          {
            name: 'Special Container',
            element: 'div',
            styles: {
              padding: '5px 10px',
              background: '#eee',
              border: '1px solid #ccc'
            }
          },

          { name: 'Marker',     element: 'span', attributes: { 'class': 'marker' } },

          { name: 'Big',        element: 'big' },
          { name: 'Small',      element: 'small' },
          { name: 'Typewriter',   element: 'tt' },

          { name: 'Computer Code',  element: 'code' },
          { name: 'Keyboard Phrase',  element: 'kbd' },
          { name: 'Sample Text',    element: 'samp' },
          { name: 'Variable',     element: 'var' },

          { name: 'Deleted Text',   element: 'del' },
          { name: 'Inserted Text',  element: 'ins' },

          { name: 'Cited Work',   element: 'cite' },
          { name: 'Inline Quotation', element: 'q' },

          { name: 'Language: RTL',  element: 'rtl' },
          { name: 'Language: LTR',  element: 'span', attributes: { 'dir': 'ltr' } },
          { name: 'Language: Arabic',  element: 'span', attributes: { 'arabic': 'true' } },

          /* Object Styles */

          {
            name: 'Styled image (left)',
            element: 'img',
            attributes: { 'class': 'left' }
          },

          {
            name: 'Styled image (right)',
            element: 'img',
            attributes: { 'class': 'right' }
          },

          {
            name: 'Compact table',
            element: 'table',
            attributes: {
              cellpadding: '5',
              cellspacing: '0',
              border: '1',
              bordercolor: '#ccc'
            },
            styles: {
              'border-collapse': 'collapse'
            }
          },

          { name: 'Borderless Table',   element: 'table', styles: { 'border-style': 'hidden', 'background-color': '#E6E6FA' } },
          { name: 'Square Bulleted List', element: 'ul',    styles: { 'list-style-type': 'square' } }
        ] );
          
        if (!document.getElementsByClassName) {
            document.getElementsByClassName = function (cn) { 
                var rx = new RegExp("(?:^|\\s)" + cn+ "(?:$|\\s)");
                var allT = document.getElementsByTagName("*"), allCN = [], ac="", i = 0, a;
                    while (a = allT[i=i+1]) {
                      ac=a.className;
                      if ( ac && ac.indexOf(cn) !==-1) {
                        if(ac===cn){ allCN[allCN.length] = a; continue;   }
                        rx.test(ac) ? (allCN[allCN.length] = a) : 0;
                      }
                    }
                return allCN;
            }
        }
        
        if (document.getElementsByClassName){
        var e = document.getElementsByClassName( 'ckeditor1' );
        for(var i=0;i<e.length;i++)
            {
            var editor1 = CKEDITOR.replace( e[i], {toolbar: 'Full'});
            }
       }
       addCKEditorToDocNewBodyHeaderFooter();
       addCkEditorToUserChoices();
}
windowonload = function(){
        bind();
        YAHOO.force.com.init();
}



// saveCkEditorInputs() and addCkEditorToUserChoices() are required for saving the
// ckEditor data, re-creating the ckEditors, and re-populating them with their original data
// whenever the Runtime Options tab is rerendered (which is very often)
ckEditorInstanceData = {};

function saveCkEditorInputs() {
  ckEditorInstanceData = {};
  for (var i in CKEDITOR.instances) {
    ckEditorInstanceData[CKEDITOR.instances[i].name] = CKEDITOR.instances[i].getData();
  }
}

function restoreCKEditorData() {
  for (var i in CKEDITOR.instances) {
    console.log(CKEDITOR.instances[i].name);
    try {
      CKEDITOR.instances[i].setData(ckEditorInstanceData[CKEDITOR.instances[i].name]);
    } catch(err) {}
  }
}

function addCKEditor(classNameEnding, ckEditorConfig) {
  var e = document.getElementsByClassName('ckeditor-' + classNameEnding);
  for (var i = 0; i < e.length; i++) {
    var a = CKEDITOR.dom.element.get(e[i].name);
    if (!a.getEditor()) {
      var editor1 = CKEDITOR.replace( 
        e[i], 
        ckEditorConfig
      );
    }
  }
}

function addCkEditorToUserChoices() {
  if ('{!JSENCODE($CurrentPage.parameters.rpRichText)}' !== 'false') {
    addCKEditor('user-choices', { height: 64, toolbar:'UserChoices'});
    restoreCKEditorData();
  }
  addSalesforceFunctionalityToCKEditorImageButton();
  hideLoadingDiv();
}

function addCKEditorToDocNewBodyHeaderFooter() {
  addCKEditorToDocNewBodyHeaderFooter(false);
}

function addCKEditorToDocNewBodyHeaderFooter(afterDelete) {
  addCKEditor('docnew-body', { height: 512, toolbar: 'Full' });
  addCKEditor('docnew-header', { height: 128, toolbar: 'Full' });
  addCKEditor('docnew-footer', { height: 128, toolbar: 'Full' });
  if (!afterDelete) {
    restoreCKEditorData();
  }
  addSalesforceFunctionalityToCKEditorImageButton();
  hideLoadingDiv();
}

addEvent(window, 'load', function(){
   windowonload();
});

/* -------------------------------- Start Image Upload Functionality -------------------------------- */
function uploadImage(uploadInput) {
    var iframe = null;
    // if the given uploadInput does not exist, we have the wrong iframe
    if (uploadInput === null) {
        // get all of the iframes and find the one that gives a valid uploadInput
        var iframes = document.querySelectorAll('iframe[id$="fileInput"]');
        for (var i = iframes.length - 1; i >= 0; i--) {
            var tempUploadInput = getUploadInputWithIframe(iframes[i]);
            if (tempUploadInput !== null) {
                uploadInput = tempUploadInput;
                iframe = iframes[i];
                break;
            }
        }
    }

    // Get the file the user selected and convert it to a base64-encoded string
    var fileToUpload = uploadInput.files[0];
    var reader = new FileReader();
    reader.readAsDataURL(fileToUpload);

    // Use JavaScript remoting to send the filename and base64-encoded file body to
    // the uploadImage function in the SDTemplateEditor class, where the image
    // will be uploaded as a Salesforce Document
    reader.onload = function () {
        var documentName = fileToUpload.name;
        var documentBody = reader.result;
        documentBody = documentBody.substring(documentBody.indexOf(",") + 1);
        Visualforce.remoting.Manager.invokeAction(
            '{!$RemoteAction.SDTemplateEditor.uploadImageAndReturn}',
            documentName, documentBody,
            function (result, event) { // Callback for the JS Remoting function.
                // Write the status of the SDTemplateEditor.uploadImage method to the page
                if (event.status) {
                    alert("Image successfully uploaded and made externally available.");
                } else if (event.type === 'exception') {
                    alert(event.message);
                } else {
                    alert(event.message);
                }

                // Hide Choose File at the end so ckEditor lets you exit the dialog without
                // a "You changed some options..." popup
                if (iframe === null) {
                    iframe = document.querySelector('iframe[id$="fileInput"]');
                }
                var innerDoc = iframe.contentDocument || iframe.contentWindow.document;
                var uploadInput = innerDoc.querySelector('input[id$="fileInput_input"]');
                var newInput = document.createElement("button");
                newInput.type = "file";
                newInput.id = "sdocsFileInput";
                newInput.style = "display: none;";
                replaceElement(uploadInput, newInput);

                // Hide upload button after uploading
                document.getElementById("newUploadBtn").style = "display: none;";
                
                var imageUrl = result['imageURL'];
                var imageTextInput = document.querySelector('input[id$="textInput"]');
                imageTextInput.value = imageUrl.replace('#AMP#', '&');
            }
        );
    };
    reader.onerror = function (error) {
        alert("Error uploading image.");
    };
}

// A small window appears after clicking "Send it to the Server". Replace this with
// an element that contains the status of the image pending upload
function removePostUploadWindow() {
    var start = Date.now();
    var elapsed = 0;
    while (elapsed < 2000) {
        var iframeToDelete = document.querySelector('iframe[id$="_fileInput"]');
        if (iframeToDelete !== null) {
            break;
        }
        elapsed = Date.now() - start;
    }

    var statusMessage = document.createElement("span");
    statusMessage.id = "image-upload-status-message";
    statusMessage.innerHTML = "Image Uploading...";
    iframeToDelete.parentNode.replaceChild(statusMessage, iframeToDelete);
}

function replaceElement(elementToReplace, replacement) {
    elementToReplace.parentNode.replaceChild(replacement, elementToReplace);
}

// Replaces CKEditor's standard image upload button
// functionality with code that will upload the image to Salesforce via JavaScript Remoting
function addSalesforceFunctionalityToCKEditorImageButton() {
    try { 
        var uploadInput; 
        var sendToServerBtn;
        uploadInput = getUploadInput();
        sendToServerBtn = document.querySelector('a[title*="Send it to the Server"]') || document.getElementById("newUploadBtn");
        if (sendToServerBtn !== null && sendToServerBtn !== undefined) {
            // Overwrite class and id of this button to overwrite standard ckEditor functionality
            sendToServerBtn.class = "new-class";
            sendToServerBtn.id = "new-id";
            /*
            if (newBtn === null) {
                newBtn = document.createElement("button");
                newBtn.id = "newUploadBtn";
                newBtn.innerHTML = 'Upload Image';
                newBtn.style = newBtnStyle
                newBtn.onclick = function() { uploadImage(uploadInput); };
                replaceElement(sendToServerBtn, newBtn);
            }
            else {
                newBtn.style = newBtnStyle + " display: inline-block;";
            }
            */
            
            // Replace old Send To Server button with our own.
            // This means that when the user clicks "Upload Image", our own JS code
            // for uploading images will run.
            var newBtnStyle = 'background-color: #4CAF50; padding: 6px 12px; color: #FFF; display: inline-block';
            var newBtn = document.getElementById("newUploadBtn");
            if (newBtn === null) {
                newBtn = document.createElement("button");
                newBtn.id = "newUploadBtn";
                newBtn.innerHTML = 'Upload Image';
                newBtn.onclick = function() { uploadImage(uploadInput); };
            }
            newBtn.style = newBtnStyle;
            replaceElement(sendToServerBtn, newBtn);
            
        }
    } catch(err) {}
}

// Image Upload in ckEditor appears in an iframe
// finds iframe, gets document within it, and returns the file input element
function getUploadInput() {
    var iframe; 
    var innerDoc; 
    var uploadInput;
    iframe = document.querySelector('iframe[id$="fileInput"]');
    if (iframe === null) {
        innerDoc = document;
    } else {
        innerDoc = iframe.contentDocument || iframe.contentWindow.document; 
    }
    uploadInput = innerDoc.querySelector('input[id$="fileInput_input"]');
    return uploadInput;
}

// Given the iframe, gets document within it, and returns the file input element
// Used to loop through different iframes to find the one non-null file input
function getUploadInputWithIframe(iframe) {
    var innerDoc; 
    var uploadInput;
    console.log(iframe);
    //iframe = document.querySelector('iframe[id$="fileInput"]');
    innerDoc = iframe.contentDocument || iframe.contentWindow.document; 
    uploadInput = innerDoc.querySelector('input[id$="fileInput_input"]');
    return uploadInput;
}


function addUploadFunctionalityOnImageBtnClick() {
    // Get the Upload Image buttons in each instance of CKEditor (Template Body, Header1, Header2, Footer1, Footer2)
    // and for each button, add an onclick function that will replace CKEditor's standard image upload button
    // functionality with code that will upload the image to Salesforce via JavaScript Remoting
    var ckEditorUploadImageButtons = document.querySelectorAll('a[class="cke_button cke_button__image cke_button_off"]');
    for (var i = 0; i < ckEditorUploadImageButtons.length; i++) {
        ckEditorUploadImageButtons[i].addEventListener(
            'click', 
            function() {
                // Change out the button half a second after the "image" button is clicked in the editor
                setTimeout( function() { addSalesforceFunctionalityToCKEditorImageButton() }, 500);
            },
            false
        );
    }
    // After some time, stop the looping of calling this function
    setTimeout( function() { clearInterval(addUploadInterval) }, 4000);
}

/* 
  Interval is set to fire every half second, is killed 4 seconds after the first one succeeds by
  clear interval call in addUploadFunctionalitynImageBtnClick. This is intended to catch all of the ckEditors
  even if they take a while to load. Not certain if this will take care of all race
  conditions, a very very slow org could still end up getting the old "Send it to the server" button if it takes
  longer than 4-6 seconds to load, however this no longer gives me issues on lightning or classic. A guaranteed
  fix would involve running the interval endlessly, so even the slowest orgs will still get the correct button
  eventually. It is not clear to me what the best way to check for "success" would be to turn the interval off, 
  however that would be another good way to approach this.
*/
var addUploadInterval = setInterval( function() { addUploadFunctionalityOnImageBtnClick(); }, 500 );
addEvent(window, 'load', function(){ addUploadInterval });

function showSSignTemplateEditor(value) {
  //var eSignVendorPicklist = document.getElementsByClassName("eSignVendorPicklist")[0];
  //var text = e.options[e.selectedIndex].text;
  var msg = value === 'SSIGN' ? 'ssign_enabled' : 'ssign_disabled';
  //document.getElementById('pdf-upload-iframe').contentWindow.postMessage(msg, '{!sdocsIFrameURL}');
  document.getElementById('pdf-upload-iframe').contentWindow.postMessage(msg, '{!URLFOR(sdocsIFrameURL, null)}');

}

function informUserToSave() {
  if ({!showPDFUploadIFrame}) {
    alert(
      "NOTE: To update this PDF-UPLOAD template's S-Sign components, " +
      "you must first save this template before continuting."
    );
  }
}

/* -------------------------------- Start Image Upload Functionality -------------------------------- */
</script>
  
  </apex:outputPanel>
</apex:outputPanel>
</apex:page>