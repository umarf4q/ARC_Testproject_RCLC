<apex:page cache="false" docType="html-5.0" showHeader="false" sidebar="false" standardStyleSheets="false" action="{!init}" Controller="vtui.MediaUploaderCtrl" language="{!selectedLanguage}">
    <apex:includeScript value="{!URLFOR($Resource.vtui__Components_Library, '/vendor/components/jquery/jquery.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.vtui__Components_Library, '/vendor/components/svg4everybody.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.vtui__Components_Library, '/js/FileUploader.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.vtui__Components_Library, '/js/forcetk.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.vtui__Components_Library, '/js/forcetk.path.js')}"/>

    <apex:stylesheet value="{!URLFOR($Resource.vtui__Components_Library, '/css/media-uploader_default.css')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.vtui__Components_Library, '/css/media-uploader-sf.css')}"/>
    <apex:stylesheet value="/resource/ViewTracCustomCss"/>
    <!-- <apex:outputPanel rendered="{! customCss != null}">
        <apex:stylesheet value="{!URLFOR($Resource[customCss])}"/>
    </apex:outputPanel> -->

    <script type="text/javascript">
        function checkFileType(file) {
            var fileTypes = {!availableSfMediaFormats};

            var regx = new RegExp("^("+fileTypes.join("|")+")",'gi');
            var nameArrs = file.name.split('.');
            if(nameArrs.length<2) return false;
            return regx.test('.'+nameArrs[nameArrs.length-1]);
        }

        window.onload = function () {
            var form = document.querySelector('#uploadForm1');
            form.querySelector('#myFileInput').addEventListener('change', function (evt) {
                evt.preventDefault();
                var index = 0;
                var files = form.querySelector('input[type=file]').files;

                // visible loader
                document.querySelector('#preview_upload').classList.add('active');
                var id = getUrlParameter('id');

                window.parent.postMessage(JSON.stringify({'upload':"1", 'id': id}), pDomain);

                // recoursive upload
                var sender = function (file, key) {

                    document.querySelector('#preview_upload .process').classList.add('active');

                    document.querySelector('#file_info').innerHTML = file.name;

                    var getFileSize = function (bytes) {
                        var type = 'kb';
                        var size = bytes/1024;

                        if(size>1023){
                            size = size / 1024;
                            type = 'mb';
                        }

                        if(size > 1023){
                            size = size / 1024;
                            type = 'gb';
                        }

                        if(size > 1023){
                            size = size / 1024;
                            type = 'tb';
                        }

                        return size.toString().match(/^-?\d+(?:\.\d{0,2})?/)[0]+' '+type;
                    };

                    document.querySelector('#file_size').innerHTML = getFileSize(file.size);


                    var fileUploader = new FileUploader(1048576*10, uploaderId);

                    var sendCourseToSalesforce = function (result) {
                        progressBarConverter.set(100);
                        if(result.ThumbnailUrl !== null){
                            console.log(['getThumbmail', result.ThumbnailUrl !== null]);
                            recieveFile(result.ThumbnailUrl, function (filename, blob) {
                                forcetkClient.createBlob('ContentVersion', {
                                    Origin: 'H',
                                    PathOnClient: filename,
                                    Title: basename(filename),
                                    Description: ''
                                }, filename, 'VersionData', blob, function (responseThumb) {
                                    window.forcetk.uploadProgress = function (resultSub){
                                        progressBarForceTk2.add(resultSub.loaded / resultSub.total * 100);
                                    };
                                    if(result.CanConvert == false) {
                                        sendCourseFile(result, responseThumb.id, file);
                                    }else if(result.VideoCoursePath !== null){
                                        sendCourseFile(result, responseThumb.id, null);
                                    }
                                }, function (request, status, response) {
                                    onErrorUpload(null);
                                });
                            }, function () {});
                        }else{
                            if (result.VideoCoursePath !== null) {
                                sendCourseFile(result, null, null);
                            } else {
                                sendCourseFile(result, null, file);
                            }
                        }
                    };

                    var fileUpload = function (response) {
                        fileUploader.submit(file, uploadLink, 'POST', onProgressUpload, function (data) {
                            fileUploader.parsingFile(parseFileLink, file.name, 1, file.size, myOrgId, function (res) {
                                fileUploader.getParsingProgress(progressLink, 1,  onProgressConvert, parseChild, function (data) {
                                    data.CanConvert = response.CanConvert;
                                    sendCourseToSalesforce(data);
                                });
                                if (index < files.length-1) {
                                    sender(files[++index], index);
                                }
                            });
                        }, onErrorUpload);
                    };

                    if(isAsyncUpload == false){
                        fileUploader.canConvert(file, checkFileLink, "POST", function (response) {
                            if(response.CanConvert == true){
                                fileUpload(response);
                            }else{
                                sendCourseToSalesforce(response);
                            }
                        });
                    }else{
                        fileUploader.submit(file, uploadLink, 'POST', onProgressUpload, function (data) {
                            document.getElementById('ajax_abort').classList.add('hide');
                            document.getElementById('loader01').classList.add('hide');
                            document.getElementById('sent_ok').classList.add('active');
                            document.querySelector('#preview_upload .process').classList.remove('active');
                            document.querySelector('#preview_upload .completed').classList.add('active');
                            window.parent.postMessage(JSON.stringify({'uploadSuccessful':"1"}), pDomain);
                            document.getElementById('sent_ok').addEventListener('click', function (){
                                window.parent.postMessage(JSON.stringify({'uploadSuccessful':"1"}), pDomain);
                                location.reload() || window.location.reload();
                            });
                        }, onErrorUpload);
                    }
                };

                // check file types
                for(var i=0; i<files.length; i++) {
                    if (checkFileType(files[i]) == false){
                        document.querySelector('#file_info').innerHTML = files[i].name;
                        document.querySelector('#file_size').innerHTML = "This file type is not supported.";
                        onErrorUpload(null);
                        return false;
                    }
                    if(files[i].size > 2147483647){
                        document.querySelector('#file_info').innerHTML = files[i].name;
                        document.querySelector('#file_size').innerHTML =  "The file size exceeds the limit allowed (2GB) and cannot be uploaded.";
                        onErrorUpload(null);
                        return false;
                    }
                }

                sender(files[index], index);
            });

            // event listener for cancel button
            document.querySelector('#ajax_abort').addEventListener('click', function () {
                document.location.reload(true) || window.location.reload(true);
                var id = getUrlParameter('id');
                window.parent.postMessage(JSON.stringify({'upload':"1", 'id': id}), pDomain);
                //document.querySelector('#preview_upload').classList.remove('active');
            });

            try {
                if (/Mac|iPad|iPhone|iPod/.test(navigator.platform)) {
                    document.getElementById("myFileInput").accept = "*";
                } else {
                    var availableFormats = {!availableSfMediaFormats};

                    document.getElementById("myFileInput").accept = availableFormats.join(', ');
                }
            } catch(err) {
                console.log(err.message);
            }
        };
    </script>

    <script type="text/javascript">
        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            var results = regex.exec(location.search);
            return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        };
        var myOrgId = '{!orgId}';
        var salesforceOrganizationId = 'OrgID='+myOrgId;
        var pDomain;
        try {
            pDomain = window.parent.location.href;
        } catch (e) {
            console.log(e.message);
            console.log('Try to get alternative domain');
            pDomain = decodeURIComponent(getUrlParameter('originalDomain'));
        }
        var urlEmailLink;
        if(pDomain.indexOf("/s/") != -1){
            urlEmailLink = pDomain.substring(0, pDomain.indexOf("/s/")) + '/s/course/';
        }else{
            if(pDomain.indexOf("/apex/") != -1){
                urlEmailLink = pDomain.substring(0, pDomain.indexOf("/apex/")) + '/';
            } else{
                urlEmailLink = pDomain.substring(0, pDomain.indexOf("/one/")) + '/';
            }
        }
        var uploadLink = '{!JSENCODE(urlForUpload)}'+'&'+
            salesforceOrganizationId+
            '&email={!JSENCODE($User.Email)}'+
            '&userId={!JSENCODE($User.Id)}'+
            '&firstName=' + encodeURIComponent('{!JSENCODE($User.FirstName)}') +
            '&domain=' + encodeURIComponent(urlEmailLink) +
            '&networkId=' + '{!networkId}';

        var parseFileLink = '{!JSENCODE(urlForGetStatus)}'+'&'+salesforceOrganizationId;
        var progressLink = '{!JSENCODE(urlForGetProgress)}'+'&'+salesforceOrganizationId;
        var checkFileLink = '{!JSENCODE(urlForCheckFile )}'+'&'+salesforceOrganizationId;
        var uploaderId = '{!guid}';
        var sessionId = '{!$Api.Session_ID}';
        var labelUploading = '{!$Label.vtui__uploading}';
        var isAsyncUpload = {!isAsyncUpload};
        var isImmediatelyDone = ('{! JSENCODE($CurrentPage.parameters.immediatelyDone) }' == 'true');
        var visualforceRemoteActionUrl = '{!$RemoteAction.MediaUploaderCtrl.getCoursesFromBackend}';
        var remoteActionConvertToMedia = '{!$RemoteAction.MediaUploaderCtrl.convertToMedia}';
        var sitePrefix = '{!$Site.prefix}';
        window.parent.postMessage(JSON.stringify({'onload':"1"}), pDomain);
        console.log([uploadLink,  parseFileLink, progressLink, uploaderId, sessionId, sitePrefix, pDomain]);
    </script>
    <script>
        function getRelativeCoords(percentage) {
            var exprBase = ( ( -percentage ) * 2 * Math.PI ) + 0.5 * Math.PI
                , coordX = Math.cos(exprBase)
                , coordY = -Math.sin(exprBase)
                ;
            return [coordX, coordY];
        }
        function getArcCoords(initCoords, radius, percentage) {
            var relativeCoords = getRelativeCoords(percentage)
                , coordX = Math.round((relativeCoords[0] * radius + initCoords[0]) * 100) / 100
                , coordY = Math.round((relativeCoords[1] * radius + initCoords[1]) * 100) / 100
                ;
            return [coordX, coordY];
        }
        var progressBarInit = function (val) {
            var percentage = val / 100
                , coordsArc1 = getArcCoords([50, 50], 49, percentage)
                , coordsArc2 = getArcCoords([50, 50], 35, percentage)
                , humanPercentage = Math.round(percentage * 100)
                , revertArc = humanPercentage > 50 ? '1' : '0'
                , path1Str = $('#arc1').attr('d-mask').split(',')
                , path2Str = $('#arc2').attr('d-mask').split(',')
                , useArcs = humanPercentage > 0 && humanPercentage < 100
                , arcs = $('.arcs')
                , circles = $('.circles')
                ;

            arcs.toggle(useArcs);
            circles.toggle(!useArcs);
            if (useArcs) {
                path2Str[2] = path1Str[2] = revertArc;
                path1Str[4] = coordsArc1.join(' ');
                path2Str[4] = coordsArc2.join(' ');
                $('#arc1').attr('d', path1Str.join(','));
                $('#arc2').attr('d', path2Str.join(','));
                $('#arc1').attr('d-mask', path1Str.join(','));
                $('#arc2').attr('d-mask', path2Str.join(','));
            } else {
                var elClass = circles.attr('class');
                if (humanPercentage && ~elClass.indexOf('empty-circles')) {
                    circles.attr('class', elClass.replace(' empty-circles', ''));
                } else if (!humanPercentage && !~elClass.indexOf('empty-circles')) {
                    circles.attr('class', elClass + ' empty-circles');
                }
            }
            $('#percentage-label').text(val.toFixed(0)  + '%');
        }
        var labelSwitcher = function (label1, label2, bool, elementId){
            document.getElementById(elementId).innerHTML = bool==true?label1:label2;
        }
    </script>
     <!--
    <script src="https://localhost/vfpUploader/src/progress.js"></script>
    <script src="https://localhost/vfpUploader/src/main.js"></script>
      -->

    <apex:includeScript value="{!URLFOR($Resource.vtui__Components_Library, '/js/progress.js')}"/>
    <script src="{!URLFOR($Resource.Components_Library, '/js/main.js')}"></script>

    <script>svg4everybody(); // run it now or whenever you are ready</script>

    <form class="form_upload" id="uploadForm1" action="{!JSENCODE(urlForUpload)}&OrgID={!orgId}" method="POST" enctype="multipart/form-data">
        <div class="form-item">
            <input type="file" name="files[]" id="myFileInput" class="input_hidden"/>
            <apex:outputPanel rendered="{!NOT(isUploadMediaAccessible)}">
                <div class="warning__col left">
                    <div class="warning_icon">
                        <img src="{!$Resource.Components_Library + '/img/warning.png'}" />
                    </div>
                </div>
                <div class="warning__col right">
                    <div class="warning__head title">You don't have needed permissions to create new Media. Please contact your system administrator</div>
                </div>
            </apex:outputPanel>
            <apex:outputPanel rendered="{!isUploadMediaAccessible}">
                <label for="myFileInput" id="btn_upload" class="btn_upload slds-button_neutral slds-button active"  style="{!customStyle}"><div><div>{!$Label.Upload}</div></div></label>
                <div id="preview_upload" class="preview">
                    <div class="preview__col left">
                        <div class="preview__head title" id="preview01head">
                            <span class="process" id="preview01headProcess"></span>
                            <span class="completed" id="preview01headComplete"></span>
                            <script type="text/javascript">
                                (function () {
                                    labelSwitcher("{!$Label.Uploading_Async}", "{!$Label.Uploading}", isAsyncUpload, "preview01headProcess");
                                    labelSwitcher("{!$Label.Uploading_Async_Completed}", "{!$Label.Upload_Completed}", isAsyncUpload, "preview01headComplete");
                                })();
                            </script>
                        </div>
                        <div id="file_info" class="preview__body info"></div>
                        <div id="file_size" class="preview__foot size"></div>
                    </div>
                    <div class="preview__col right loader">
                        <div id="loader01" class="loader__img circular-bar slds-x-small-show-only" data-progress="0" style="width:45px;height:45px;float: right;">
                            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
                                <g class="arcs">
                                    <circle cx="50" cy="50" r="49" class="outer-circle" />
                                    <path d="M50 1 A 49 49, 0, 1, 1, 7.06 73.61, L 50 50 z" d-mask="M50 1 A 49 49, 0, 1, 1, 7.06 73.61, L 50 50 z" class="outer-arc" id="arc1" />
                                    <circle cx="50" cy="50" r="38" class="inner-circle"  />
                                    <path d="M50 15 A 35 35, 0, 1, 1, 19.33 66.86" d-mask="M50 15 A 35 35, 0, 1, 1, 19.33 66.86" class="inner-arc" id="arc2" />
                                </g>
                                <g class="circles">
                                    <circle cx="50" cy="50" r="49" class="outer-circle" />
                                    <circle cx="50" cy="50" r="38" class="inner-circle" />
                                </g>
                                <text x="50" y="58" id="percentage-label"></text>
                            </svg>
                        </div>
                        <div class="error_icon" id="error01">
                            <img src="{!$Resource.Components_Library + '/img/warning.png'}" />
                        </div>
                        <a href="javascript:void(0);" id="ajax_abort" class="link link_abort">{!$Label.Cancel}</a>
                        <a href="javascript:void(0);" id="sent_ok" class="link">{!$Label.Ok}</a>
                    </div>
                </div>
            </apex:outputPanel>
        </div>
    </form>
    <script type="text/javascript">
        (function () {
            progressBarInit(0);
        })();
    </script>
</apex:page>