<apex:page controller="SFSSDupeCatcher.MergeDuplicatesController" showHeader="true">
         <apex:stylesheet value="{!URLFOR($Resource.SFSSDupeCatcher__Styles, 'assets/styles/salesforce-lightning-design-system.min.css')}" />
        <style type="text/css">
			body {
				margin: 0;
				padding: 0;
			}

			h1, h2, h3, h4, h5, h6 {
				font-family: 'Verdana', 'Geneva', sans-serif;
				font-size: 130%;
				margin:0px;
				display:inline;
			}
		</style>
		<style>
                .dingoBkWhite{ background-color: #ffffff; } 
                .dingoGray{ color: #b8c3ce; }
                .dingoLiGray:before{ color: #b8c3ce; }
                .dingoBkGray{ background-color: #b8c3ce; }                
                .dingoA{ background-color: #5a9cdd; }
                .dingoBlue{ color: #5a9cdd; }                
                .dingoLiBlue:before{ color: #5a9cdd; }
                .dingoBkBlue{ background-color: #5a9cdd; }                
                .dingoB{ background-color: #00c6b7; }
                .dingoLightBlue{ color: #00c6b7; }                
                .dingoLiLightBlue:before{ color: #00c6b7; }
                .dingoBkLightBlue{ background-color: #00c6b7; }                
                .dingoC{ background-color: #88c651; }
                .dingoGreen{ color: #88c651; }                
                .dingoLiGreen:before{ color: #88c651; }
                .dingoBkGreen{ background-color: #88c651; }                
                .dingoD{ background-color: #f39e58; }
                .dingoOrange{ color: #f39e58; }                
                .dingoLiOrange:before{ color: #f39e58; }
                .dingoBkOrange{ background-color: #f39e58; }                
                .dingoF{ background-color: #00c6b7; }
                .dingoRed{ color: #ef6e64; }                
                .dingoLiRed:before{ color: #ef6e64; }
                .dingoBkRed{ background-color: #ef6e64; }
                .dingoRedAlt{ color: rgb(194, 57, 52); }                
                .dingoLiRedAlt:before{ color: rgb(194, 57, 52); }
                .dingoBkRedAlt{ background-color: rgb(194, 57, 52); }
                .dingoInactive{
                    background-color: rgb(194, 57, 52);
                }                
                .dingoActive{
                    background-color: rgb(75, 202, 129)
                }
                .dingoState {                    
                    border-radius: .25em;
                    color: #ffffff;
                    padding: 25px;
                    margin: 25px;
                    display: inline-block;
                    text-align: left;
                    width: 250px;
                    position: relative;
                    float:left;
                    height: 200px;
                } 
                .dingoStatusHldr{
                    border-radius: .25em;
                    padding: 25px;
                    margin: 25px;
                    display: inline-block;
                    text-align: left;
                    width: 250px;
                    position: relative;
                    float:left;                    
                }
                .dingoStatusLine{
                    float:left;
                    border-radius: .125rem;
                    height: 10px;
                    margin-right: 5px;
                    margin-left: 5px;
                    margin-bottom: 5px;
                    margin-top: 18px;
                    width: 50px;
                }
                .dingoCurrentState {                    
                    float:left;
                    border-radius: 50%;
                    padding: 15px;
                } 
                .dingoWorkList{

                }
                .dingoWorkList li{
                    height: 50px;
                    padding-top: 15px;
                }
                .cloudingoLink {
                    text-decoration: none !important;
                    font-weight: bold;
                }
                .cloudingoWork{
                    float:left; 
                    top: 25px; 
                    position: relative;
                    border: 1px solid rgb(216, 221, 230);
                    border-radius: .25em;
                }
                .cloudingoWork .slds-panel{
                    min-height: 200px;
                }
                .cloudingoWorkLiImg{
                    float:left;
                    margin-top:-10px;
                    padding-right:10px;
                }
                .cloudingoButton{
                    padding-left: 10px !important; 
                    padding-right: 10px !important; 
                    background: none !important;
                }
                .cloudingoButtonWhite{
                    padding-left: 10px !important; 
                    padding-right: 10px !important; 
                    background-color: #ffffff !important;
                    background-image: none !important;
                }
                .slds-table th, .slds-table td {
                    padding: .25rem;
                }
            </style>
<script>
    var thenamespaceprefix = 'sfss_dupecatcher_';    
    var globalDataTable = null;
    var globalNumberOfDuplicateRecords = null;
    var globalMergeResults = new Array();
    var globalMergeIDs = new Array();
    var globalNumPopulatedFields = null;
    var globalCurrentMaster = -1;
    var globalRecordIds = null;
    var globalNumberOfNonDataRows = null;
    var noMasterSelectedYet = true;
    var globalMergeButton = null;
    var globalCancelButton = null;
    var globalRadioButtonTouched = false;
    var mergebuttonpressed = false;
    
    function elementMovesOnUserInput(theelement)
    {
        return !elementHidden(theelement) || (elementHidden(theelement) && (theelement.value.indexOf('SSDupeCatcher_null') >= 0));
    }
    
    function elementAllwaysFollowsMaster(theelement)
    {
        return elementHidden(theelement) && (theelement.value.indexOf('SSDupeCatcher_null') >= 0);    
    }
    
    function elementHidden(theelement)
    {
        return theelement.style.display == 'none';
    }
    
    function elementIsNullField(theelement)
    {
        return elementHidden(theelement) && (theelement.value.indexOf('SSDupeCatcher_null') >= 0);
    }
    
    function onSSEventSelectMaster(value)
    {
        // parse the value parm from the invoking item
        var delim = value.indexOf(';');
        var columnindex = Number(value.substr(0, delim));  
        var therest = value.substr(delim+1);
        delim = therest.indexOf(';');
        var recordId = therest.substr(0, delim);
        therest = therest.substr(delim+1);
        var recordName = therest;
        var newradiomasterbutton = document.getElementById('radiomaster-' + columnindex.toString());

        // put the display value in the Merge Results cell.
        document.getElementById(thenamespaceprefix + 'mergeresult_0').innerHTML = recordName;
        
        if (noMasterSelectedYet)
        {
            enableAllDataRadioButtons();
            enableAllLeadSelectCheckBoxes();
            noMasterSelectedYet = false;            
            selectAllRadioButtonsInColumnThatSelectOnUserInput(columnindex);
        } 
            
        enableAllDisabledCheckBoxes();

        if ( newradiomasterbutton.checked && (columnindex != globalCurrentMaster) )
        {
            // this column has been selected as the new master
            
            // Hide the checkbox in the new column and unhide the one in the old column
            var newleadselectcheckbox = document.getElementById('checkboxrecordselect-' + columnindex.toString());
            newleadselectcheckbox.style.visibility = 'hidden';          
            
            if (globalCurrentMaster != -1)
            {
                var oldleadselectcheckbox = document.getElementById('checkboxrecordselect-' + globalCurrentMaster.toString());
                oldleadselectcheckbox.style.visibility = 'visible'; 
                
                moveAllSelectedFromOldMasterToNewMaster(globalCurrentMaster, columnindex)       
            }
        }

        globalMergeResults[thenamespaceprefix + 'Master'] = recordId;

        globalMergeButton.removeAttribute('disabled');
                           
        globalCurrentMaster = columnindex;

        disableLastUncheckedMergeRecord();
            
        selectLeadCheckBox(columnindex); // the lead is considered checked when it becomes master
                
    }

    
    function enableAllLeadSelectCheckBoxes()
    {
        var thecell = null;
        var leadselectcheckbox = null;
        var theelementid = null;
        
        for (var column=0;column < globalNumberOfDuplicateRecords ;column++)
        {
            theelementid = 'checkboxrecordselect-' + column.toString();
            leadselectcheckbox = document.getElementById(theelementid);
            
            if (leadselectcheckbox != null)
                leadselectcheckbox.disabled = false;
        }
        
    }
    
    function enableAllDataRadioButtons()
    {
        var thecell = null;
        var dataradiobutton = null;
        var theelementid = null;
        
        for (var column=0;column < globalNumberOfDuplicateRecords;column++)
        {
            for (var row=0;row < globalNumPopulatedFields;row++)
            {
                theelementid = 'dataradio-' + row.toString( ) + '-' + column.toString();
                dataradiobutton = document.getElementById(theelementid);
                
                if (dataradiobutton != null)
                {
                    if (!dataradiobutton.hidden)
                        dataradiobutton.disabled = false;
                }
            } 
        }
    }

    function selectAllRadioButtonsInColumnThatSelectOnUserInput(columnindex)
    {
        var thecell = null;
        var dataradiobutton = null; 
        
        for (var row=0;row < globalNumPopulatedFields ;row++)
        {
            dataradiobutton = getRadioButtonAtRowColumn(row, columnindex);
            if (dataradiobutton != null)
            {
                // pass in (display != none) to indicate update to merge data is needed
                doClick(dataradiobutton, elementMovesOnUserInput(dataradiobutton));
            }
        }
    }
    
    
    function getRadioButtonAtRowColumn(row, column)
    {
        var dataradiobutton = document.getElementById('dataradio-' + row.toString() + '-' + column.toString());
        if (dataradiobutton!= null)
            return dataradiobutton;        
        return null;
    }
    
    
    
    function moveAllSelectedFromOldMasterToNewMaster(oldmastercolumnindex, newmastercolumnindex)
    {
        var dataradiobutton = null; 
        
        for (row=0;row < globalNumPopulatedFields ;row++)
        {
            dataradiobutton = getRadioButtonAtRowColumn(row, oldmastercolumnindex);
            
            
            if ((dataradiobutton != null) && dataradiobutton.checked)
            {
                var dataradiobuttonnew = getRadioButtonAtRowColumn(row, newmastercolumnindex);
                
                if (dataradiobuttonnew != null)
                {
                    doClick(dataradiobuttonnew, true);
                }
            }
            
            if ((dataradiobutton != null) && elementAllwaysFollowsMaster(dataradiobutton))
            {
                var dataradiobuttonnew = getRadioButtonAtRowColumn(row, newmastercolumnindex);
                if (dataradiobuttonnew != null)
                {
                    doClick(dataradiobuttonnew, false);
                }
            }
        }
    }
    
    function doClick(obj, updatefield) {

        onSSEventProgramSelectDataRadio(obj.value, updatefield, elementIsNullField(obj))
        if (updatefield)
            obj.checked = true;
    }

      
    function getDataRecordID(columnindex)
    {
        var result = '';
        if (columnindex < globalRecordIds.length)
            result = globalRecordIds[columnindex];
        return result;
    }

    
    function initializeGlobalMergeIds(columnindex)
    {           
        for (var field in globalRecordIds)
        {
            globalMergeIDs[globalRecordIds[field]] = 'checked';
        }
    }


    function updateSelectLeadCheckBoxStatus(columnindex)
    {
        var leadselectcheckbox = document.getElementById('checkboxrecordselect-' + columnindex.toString());
        var recordId = globalRecordIds[columnindex];
        
        var value = 'unchecked';
        if (leadselectcheckbox.checked)
            value = 'checked';
            
        if (value == 'checked') 
            enableLastUncheckedMergeRecord();
            
        globalMergeIDs[recordId] = value;   
        
        if (value == 'unchecked') 
            disableLastUncheckedMergeRecord();               
    }
    
    function selectLeadCheckBox(columnindex)
    {
        var leadselectcheckbox = document.getElementById('checkboxrecordselect-' + columnindex.toString());        
        leadselectcheckbox.checked = true;
    }
    
    function onSSEventChangeRecordSelect(value)
    {
        // parse the value parm from the invoking item
        var delim = value.indexOf(';');
        var columnindex = Number(value.substr(0, delim));  
        var recordId = value.substr(delim+1); 
                
        updateSelectLeadCheckBoxStatus(columnindex);
    }


    function onSSEventSelectDataRadio(value)
    {
        // parse the value parm from the invoking item
        var delim = value.indexOf(';');
        var rowindex = Number(value.substr(0, delim));  
        var therest = value.substr(delim+1);
        delim = therest.indexOf(';');
        var columnindex = Number(therest.substr(0, delim));
        therest = therest.substr(delim+1);
        delim = therest.indexOf(';');
        var fieldname = therest.substr(0, delim);
        therest = therest.substr(delim+1);
        delim = therest.indexOf(';');
        var recordId = therest.substr(0, delim);
        therest = therest.substr(delim+1);
        delim = therest.indexOf(';');
        var fieldvalue = therest.substr(0, delim); 
        var blankfieldindicator = therest.substr(delim+1); 

        
        rowindex += globalNumberOfNonDataRows;  // the row is offset by the number of nondata rows

        var resultcellcolumn = thenamespaceprefix + 'mergeresult_' + rowindex;      

        // put the selected value in the results table cell.
        document.getElementById(resultcellcolumn).innerHTML = fieldvalue;        
        
        var recordId = getDataRecordID(columnindex);
        globalMergeResults[fieldname] = recordId;
        
    }

    function removeByValue(arr, val) {
        var i = 0;
        for (var field in globalMergeResults)
        {
            if(field == val) {
                arr.splice(i, 1);
                break;
            }
            i++;
        }
    }


    function onSSEventProgramSelectDataRadio(value, updatefield, nullfield)
    {
        // parse the value parm from the invoking item
        var delim = value.indexOf(';');
        var rowindex = Number(value.substr(0, delim));  
        var therest = value.substr(delim+1);
        delim = therest.indexOf(';');
        var columnindex = Number(therest.substr(0, delim));
        therest = therest.substr(delim+1);
        delim = therest.indexOf(';');
        var fieldname = therest.substr(0, delim);
        therest = therest.substr(delim+1);
        delim = therest.indexOf(';');
        var recordId = therest.substr(0, delim);
        therest = therest.substr(delim+1);
        delim = therest.indexOf(';');
        var fieldvalue = therest.substr(0, delim); 
        var blankfieldindicator = therest.substr(delim+1); 
        
        rowindex += globalNumberOfNonDataRows;  // the row is offset by the number of nondata rows
        
        var resultcellcolumn = thenamespaceprefix + 'mergeresult_' + rowindex;      

        // put the selected value in the results table cell.
        document.getElementById(resultcellcolumn).innerHTML = fieldvalue;
        
        var recordId = getDataRecordID(columnindex);
        if (updatefield)
        {
            globalMergeResults[fieldname] = recordId;
        }   
        
    }


    function enableAllDisabledCheckBoxes()
    {
        var count = 0;
        for (var id in globalMergeIDs)
        {
            var status = globalMergeIDs[id]
            var convertingselectcheckbox = document.getElementById('checkboxrecordselect-' + count.toString());
            convertingselectcheckbox.disabled = false;

            count++;
        }       
    }


    function disableLastUncheckedMergeRecord()
    {
        if (numberOfCheckedMergeRecords() > 1)
            return;
            
        var count = 0;
        for (var id in globalMergeIDs)
        {
            var status = globalMergeIDs[id]
            if ((count != globalCurrentMaster) &&(status == 'checked'))
            {
                var convertingselectcheckbox = document.getElementById('checkboxrecordselect-' + count.toString());
                convertingselectcheckbox.disabled = true;
                break;
            }
            count++;
        }       
    }
    
    function enableLastUncheckedMergeRecord()
    {
        if (numberOfCheckedMergeRecords() > 1)
            return;
            
        var count = 0;
        for (var id in globalMergeIDs)
        {
            var status = globalMergeIDs[id]
            if ((count != globalCurrentMaster) && (status == 'checked'))
            {
                var convertingselectcheckbox = document.getElementById('checkboxrecordselect-' + count.toString());
                convertingselectcheckbox.disabled = false;
                break;
            }
            count++;
        }       
    }
    
    function numberOfCheckedMergeRecords()
    {       
        var count = 0;  
        var idx = 0;
        
        for (var id in globalMergeIDs)
        {
            var status = globalMergeIDs[id]
            if ((idx != globalCurrentMaster) && (status == 'checked'))
                count++;
                
            idx++;
        }
                    
        return count;   
    }

    
        
    function sfss_MergeButtonPressed()
    {
            // make sure that this function is 
            // not called multiple times if the 
            // button is pressed more than once.
            if (mergebuttonpressed)
                return;
                
            mergebuttonpressed = true;
                
            var value;
            var mergeresultforcontroller = '';
            var mergeidsforcontroller = '';
            var count = 0;
            var masterRecordId = globalRecordIds[globalCurrentMaster];            
            count = 0;
            for (var field in globalMergeResults)
            {
                value = globalMergeResults[field];
                if (count != 0)
                    mergeresultforcontroller += ';'
                mergeresultforcontroller += field + ':' + value;
                count++;
            }            
            count = 0;
            for (var field in globalMergeIDs)
            {
                value = globalMergeIDs[field];

                if ((value != 'checked') || (field == masterRecordId))
                    continue;

                if (count != 0)
                    mergeidsforcontroller += ';'
                mergeidsforcontroller += field + ':' + value;
                count++;
            }
            
            globalMergeButton.setAttribute('disabled', true, true);
            globalMergeButton.innerHTML = "Merging...";
            var x = mergeresultforcontroller;
            var y = mergeidsforcontroller;
            sendMergedDataToController(mergeresultforcontroller, mergeidsforcontroller);
            
            setTimeout("checkMessages()",5000);
    }

    function sfss_CancelButtonPressed()
    {
        sendCancelToController();
    }
    
    function checkMessages()
    {
         sendErrorMessToController();
         globalMergeButton.removeAttribute('disabled', false, false);
         globalMergeButton.innerHTML = "Merge";
         mergebuttonpressed = false;
    }       
    
    var dcMergeDuplicates = null;
    var DCMergeDuplicatesModel = function(dcObjectName, tableData, dataTableSchema, dataTableColumnDefinition){
        var self = this;
        self.TableId = 'duplicates';
        self.TableData = tableData;
        self.ObjectName = dcObjectName;
        self.DataTableSchema = dataTableSchema;
        self.DataTableColumnDefinition = dataTableColumnDefinition;
        
        self.SetWidthAndHeight = function(){
            var width = document.body.clientWidth;
            /*var height = 700;
            var mergeHeader = document.getElementById('mergeHeader');
            var offsetHeight = (mergeHeader) ? mergeHeader.clientHeight : 0;
            var topObject = 
                (document.getElementById('bodyCell') == null) 
                ? document.getElementsByClassName('bPageHeader').length > 0 ? document.getElementsByClassName('bPageHeader')[0] : null
                : document.getElementById('oneHeader');*/
                
           var sideObject = document.getElementsByClassName('sidebarCell').length > 0 ? document.getElementsByClassName('sidebarCell')[0] : null; 
           width = window.innerWidth-((sideObject)? sideObject.clientWidth: 0)-125;                          
                
            if(isNaN(width))
                width=document.body.clientWidth;
            
            document.getElementById('duplicatesdiv').setAttribute("style","max-width:"+width+"px;overflow-x:scroll;", 0);            
          
        }
                       
        self.CreateTable = function(){
            self.SetWidthAndHeight();
        
            var tableDiv = document.getElementById(self.TableId + 'div');
        
            tableDiv.innerHTML = "<table id='"+self.TableId+"table' class='slds-table forceRecordLayout slds-table--header-fixed slds-table--bordered'></table>";
        }                
        
        self.BuildHeaders = function(){
            var tableInstance = document.getElementById(self.TableId + 'table');
        
            var thLength = self.DataTableColumnDefinition.length;
            
            if(thLength > 0)
            {
                var th = tableInstance.createTHead();
                var thRow = th.insertRow(); 
                thRow.className = "slds-text-title--caps";           
                for(var i=0; i<thLength; i++)
                {
                    var th = document.createElement('th');         
                    th.innerHTML = self.DataTableColumnDefinition[i].label.toUpperCase();
                    th.setAttribute("style", "color: rgb(22, 50, 92);", 0);
                    thRow.appendChild(th);
                }
            }
        };
        
        self.BuildColumnsAndRows = function(){
            var tableInstance = document.getElementById(self.TableId + 'table');
            
            var rowLength = self.TableData.userdata.length;
            
            var tbody = document.createElement('tbody');
            tableInstance.appendChild(tbody);
            
            if(rowLength > 0)
            {
                for(var i=0; i<rowLength; i++)
                {
                    var tr = tbody.insertRow();
                    var userDataItem = self.TableData.userdata[i];
                    
                    var objectProperties = [];
                    
                    for(var property in userDataItem)
                    {
                        if(userDataItem.hasOwnProperty(property))
                           objectProperties.push(property);
                    }
                    
                    var propLength = objectProperties.length;
                    
                    for(var j=0; j<propLength; j++)
                    {
                        var trCell = tr.insertCell();
                        trCell.setAttribute("id", objectProperties[j]+"_"+i, 0);
                        trCell.className = "slds-cell-edit";
                        trCell.setAttribute("style", "color: rgb(22, 50, 92);", 0);
                        trCell.innerHTML = userDataItem[objectProperties[j]];
                    }
                }                                             
            }            
        };                            
    };
</script>    

<apex:form rendered="{!pagemessage}">      
<apex:outputPanel id="thePanelWrapper" >
  <apex:outputPanel id="theErrorPanel" rendered="{!pagemessage}">
              <apex:pageMessages />
              <apex:commandButton action="{!deleteAlerts}" styleClass="btn cloudingoButton slds-button slds-button--neutral" value="Delete Alerts"/>
              <apex:commandButton action="{!cancel}" styleClass="btn cloudingoButton slds-button slds-button--neutral" value="Cancel"/>
  </apex:outputPanel> 
</apex:outputPanel> 
</apex:form>  

<apex:form id="mergescreenid" rendered="{!ShowMergeScreen}">

  <div class="cloudingoWork" style="margin: 10px; top: 0px;">
    <div class="slds-panel slds-grid slds-grid--vertical slds-nowrap">
        <div class="slds-form--stacked slds-grow slds-scrollable--y">
            <div id="mergeHeader" class="slds-panel__section slds-has-divider--bottom" style="background: rgb(247, 249, 251); color: rgb(22, 50, 92);">
                <div class="slds-media slds-tile">             
                    <p class="tile__title slds-truncate slds-text-heading--medium">
                        DupeCatcher Merge
                    </p>
                </div>
                <div class="slds-media slds-tile">
                    <p>
                    First select the {!targetObjectType} Record that you would like to merge values to.   Then select values from the other records that you would like to merge to that record. Selected values will show in the "Merge Results" column.
                    </p>
                </div>
            </div>
            <div class="slds-panel__section">
                <div id="duplicatesdiv"></div>
            </div>
             <div class="slds-panel__section">
                <div style="display: table; width:100%;">
                  <div style="display: table-row">
                      <div style="display: table-cell; margin-right:3px;">
                          <div id="sfssmergebutton" style="float:right;"></div>
                      </div>
                      <div style="display: table-cell; margin-left:3px;">
                          <div id="sfsscancelbutton" style="float:left;"></div>
                      </div>
                  </div>
              </div>
            </div>
        </div>
    </div>
  </div>

  <apex:actionFunction action="{!handleMergedData}" name="sendMergedDataToController" rerender="showmergescreenid,showpagescreenid">
            <apex:param name="MergedData" assignTo="{!MergedData}" value="firstParam" />
            <apex:param name="MergeIds" assignTo="{!MergedIds}" value="secondParam" />
        </apex:actionFunction>
        
        <apex:actionFunction action="{!cancel}" name="sendCancelToController" rerender="">
        </apex:actionFunction>
         
          <apex:actionFunction action="{!myerror}" name="sendErrorMessToController" rerender="thePanelWrapper">
        </apex:actionFunction>    
       
</apex:form>

<apex:form rendered="{!showAccessError}"> 

    <div class="cloudingoWork" style="margin: 10px; top: 0px;">
        <div class="slds-panel slds-grid slds-grid--vertical slds-nowrap">
            <div class="slds-form--stacked slds-grow slds-scrollable--y">
                <div class="slds-panel__section slds-has-divider--bottom" style="background: rgb(247, 249, 251); color: rgb(22, 50, 92);">
                    <div class="slds-media slds-tile">             
                        <p class="tile__title slds-truncate slds-text-heading--medium">
                            DupeCatcher Merge
                        </p>
                    </div>                
                </div>
                <div class="slds-panel__section">
                    <p class="tile__title slds-truncate slds-text-heading--small">
                        Insufficient privileges to view all duplicates for this alert.   Please notify your administrator.
                    </p>
                </div>
            </div>
        </div>
    </div>
</apex:form>

<script>

    globalNumberOfDuplicateRecords = Number({!NumberOfDuplicateRecords});
    globalNumPopulatedFields = Number({!NumPopulatedFields});
    globalRecordIds = {!RecordIds};
    globalNumberOfNonDataRows = Number({!NumberOfNonDataRows});

    initializeGlobalMergeIds();
            
    tableData = {!TableData};
  
    dataTableSchema  = {!DataTableSchema};
    dataTableColumnDefinition = {!ColumnDefinition};
 
    var dcObjectName = "{!targetObjectType}";
    
    var dcMergeDuplicates = new DCMergeDuplicatesModel(dcObjectName, tableData, dataTableSchema, dataTableColumnDefinition);
    dcMergeDuplicates.CreateTable();
    dcMergeDuplicates.BuildHeaders();
    dcMergeDuplicates.BuildColumnsAndRows();    
    
    var mergeButtonDiv = document.getElementById('sfssmergebutton');
    var cancelButtonDiv = document.getElementById('sfsscancelbutton');
    
    var globalMergeButton = document.createElement("BUTTON"); 
    var globalMergeButtonText = document.createTextNode("Merge");
    globalMergeButton.appendChild(globalMergeButtonText);
    globalMergeButton.setAttribute('id', 'dcmergebutton', 0);
    globalMergeButton.className = 'btn cloudingoButton slds-button slds-button--neutral';
    mergeButtonDiv.appendChild(globalMergeButton);
    
    var globalCancelButton = document.createElement("BUTTON"); 
    var globalCancelButtonText = document.createTextNode("Cancel");
    globalCancelButton.appendChild(globalCancelButtonText );
    globalCancelButton.setAttribute('id', 'dccancelbutton', 0);
    globalCancelButton.className = 'btn cloudingoButton slds-button slds-button--neutral';
    cancelButtonDiv.appendChild(globalCancelButton);
    
    globalMergeButton.setAttribute('disabled', true, true);                          
    globalMergeButton.setAttribute('onclick', 'sfss_MergeButtonPressed()'); 
    globalCancelButton.setAttribute('onclick', 'sfss_CancelButtonPressed()');  
    
    globalMergeButton.setAttribute('type', 'button'); 
    globalCancelButton.setAttribute('type', 'button');      
</script>

</apex:page>