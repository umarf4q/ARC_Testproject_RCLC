<apex:page controller="SDOC.SDCreateController" 
tabStyle="SDOC__SDTemplate__c" standardstylesheets="true"
sidebar="{!sidebar}"
action="{!initStep2}"
doctype="html-5.0"
title="{!tm['Generate Documents']}"
lightningStylesheets="true">

<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc, 'jquery-1.8.3.min.js')}"/>
<apex:includeScript value="{!URLFOR($Resource.SDOC__SDoc, '/resources/js/preformatting.js')}"/>

<!-- ================ START LIGHTNING_REDIRECT_PANEL ================ -->
<apex:outputPanel id="lightning_redirect_panel">
<script>
if ('{!doLightningRedirect}' === 'true') {
    if( (typeof sforce != 'undefined') && sforce && (!!sforce.one) ) {
        sforce.one.navigateToURL('{!lightningRedirectURL}', true);
    } else {
        window.location.href = '{!URLFOR(lightningRedirectURL)}';
    }
}
</script>
</apex:outputPanel>
<!-- ================= END LIGHTNING_REDIRECT_PANEL ================= -->

<!-- Must be included to use sforce.console.isInConsole() -->
<!-- Use version 30.0; isInConsole() doesn't work on version 40.0 -->
<apex:includeScript value="/support/console/30.0/integration.js"/>

<script type="text/javascript">
// Hide Salesforce header if showheader=false is included in URL
var hideHeader = function() {
  var salesforceHeader = document.getElementById('AppBodyHeader');
  if (salesforceHeader !== null) {
    salesforceHeader.style.display = 'none';
  }
}

var showHeader = '{!JSENCODE($CurrentPage.parameters.showHeader)}';
if (showHeader === 'false' || showHeader === '0') {
    hideHeader();
}
// End "Hide Salesforce header if showheader=false is included in URL"

// Hide Salesforce header if user is invoking S-Docs from Sales Console.
// This is finnicky as there are reported bugs with sforce.console.isInConsole();
// if this is the case, have the user include &showHeader=false in their S-Docs button. 
if (sforce.console.isInConsole()) {
    hideHeader();
}
</script>

<!-- ================================ Start User Choice Feature ================================ -->
<script type="text/javascript">
j$ = jQuery.noConflict();

function addLoadEvent(func) {
    addEvent('load', window, func);
}

function addEvent(evnt, elem, func) {
   if (elem.addEventListener) {  // W3C DOM
      elem.addEventListener(evnt,func,false);
   } else if (elem.attachEvent) { // IE DOM
      elem.attachEvent("on"+evnt, func);
   } else {
      elem[evnt] = func;
   }
}

// Cross-browser event support
function addEvent(evnt, elem, func) {
   if (elem.addEventListener)  // W3C DOM
      elem.addEventListener(evnt,func,false);
   else if (elem.attachEvent) { // IE DOM
      elem.attachEvent("on"+evnt, func);
   }
   else {
      elem[evnt] = func;
   }
}

// Whenever a user checks a box in a UserChoiceCheckbox, this will
// disable all other checkboxes in that UserChoiceCheckbox if the user
// has selected the max number of allowed checkboxes specified by that UserChoiceCheckbox
function updateCheckboxes(templateId) {
  // Building a map of template id to userChoiceCheckbox for the checkboxes that appear

  var currentCheckboxesMap = {};
  for (var userChoiceNum = 0; userChoiceNum < document.querySelectorAll("*[class*='user-choice-checkbox-']").length; userChoiceNum++) {
    var userChoiceCheckboxes = document.querySelectorAll("*[class*='user-choice-checkbox-']")[userChoiceNum];
    var userChoiceCheckboxClass = userChoiceCheckboxes.attributes.class.nodeValue;
    var splitList = userChoiceCheckboxClass.split('-');
    var templateId = splitList[3];
    var ucNumber = splitList[4];
    if (currentCheckboxesMap.hasOwnProperty(templateId)) {
      if (!currentCheckboxesMap[templateId].includes(ucNumber)) {
        currentCheckboxesMap[templateId].push(ucNumber);
      }
    } else {
      currentCheckboxesMap[templateId] = [ucNumber];
    }
  }
  // Work through the map of checkboxes
  for (const [templateId, ucNumberArray] of Object.entries(currentCheckboxesMap)) {
    for (var i = 0; i < currentCheckboxesMap[templateId].length; i++) {
      var ucNumber = currentCheckboxesMap[templateId][i];
      var userChoiceCheckboxes = document.querySelectorAll(".user-choice-checkbox-" + templateId + "-" + ucNumber);
      // First pass: get number of checkboxes checked
      var numBoxesChecked = 0;
      for (var checkboxIndex = 0; checkboxIndex < userChoiceCheckboxes.length; checkboxIndex++) {
        if (userChoiceCheckboxes[checkboxIndex].checked) {
          numBoxesChecked++;
        }
      }

      // maxNumSelections for this UserChoiceCheckbox is hidden within a span with
      // class max-num-cbc-selections-(userChoice.userChoiceNum). Grab it here.
      var maxNumSelectionsContainer = document.querySelector(
        "span[class*='max-num-cbc-selections-" + templateId + "-" + ucNumber + "']");
      if (maxNumSelectionsContainer != null) {
        var maxNumSelections = parseInt(maxNumSelectionsContainer.innerText);
        // Loop through all the checkboxes for this UserChoiceCheckbox and disable
        // the unchecked ones if the user has selected the max number of checkboxes
        for (var checkboxIndex = 0; checkboxIndex < userChoiceCheckboxes.length; checkboxIndex++) {
          var thisCheckbox = userChoiceCheckboxes[checkboxIndex];
          if (numBoxesChecked >= maxNumSelections) {
            if (!thisCheckbox.checked) { 
              thisCheckbox.disabled = true;
            }
          }

          // If max number of checked checkboxes for the UserChoiceCheckbox has not
          // been reached (or has been reached but the user unchecked a box after it was reached),
          // make all the checkboxes for this UserChoiceCheckbox clickable
          else { 
            thisCheckbox.disabled = false; 
          }
        }
      }
    }
  }
}

function checkPreformattingText(event, index, format) {
  let input = j$('.user-choice-text-input-' + index)[0];
  let errorMessage = j$('.preformatting-error-message-' + index)[0];
  checkPreformatting(event, format, input, errorMessage);
}

function checkPreformattingTextArea(event, index, format) {
  let input = j$('.user-choice-text-area-input-' + index)[0];
  let errorMessage = j$('.preformatting-error-message-' + index)[0];
  checkPreformatting(event, format, input, errorMessage);
}
</script>

<!-- ================================ End User Choice Feature ================================ -->

<apex:outputPanel rendered="{!NOT(doLightningRedirect)}">

<apex:outputPanel rendered="{!NOT(userChoicesFound && noUserChoicesRendered)}">

<apex:sectionHeader title="Create S-Docs" subtitle="Validate Information"/>
<apex:form >
    <span class="style6">&lt;&lt;</span>
    <apex:commandLink action="{!returnToObj}" value="Back to: record details"/>
<br></br>
<br></br>
<apex:pageBlock >
<img src="{!URLFOR($Resource.SDoc,'checkbox_arrow.png')}" />
<apex:commandButton action="{!step3}" value="{!btnTxtStep3}" styleClass="btn"
  rendered="{!NOT(lightningNav)}" />
<apex:commandButton action="{!step3}" value="{!btnTxtStep3}" styleClass="btn"
  rendered="{!lightningNav}" reRender="lightning_redirect_panel" />
<!-- NOTE: This escape="false" below is alright since we are just pulling in static HTML from our managed package. -->
<apex:pageMessages escape="false" />
<apex:outputPanel rendered="{!pickContacts}">
  <apex:outputText value="Merge Contact Information" style="font-size: 18px; font-weight:bold;"/>
    <br/><br/>
    <apex:pageBlockSection title="Document Header Information" rendered="false" columns="1" collapsible="false">
        <apex:outputPanel styleClass="labelPanel" id="bu" layout="block" />
    </apex:pageBlockSection>

<table width="100%">
    <tr>
    <td>
        <br></br>
    <apex:pageBlockSection id="recPanel" title="Contact Information" rendered="{!showRecordContact}" columns="1" collapsible="false">
        <apex:pageBlockSectionItem rendered="{!NOT(hideContactLookup)}">
            <apex:outputLabel value="Contact" for="RConLU"/>
            <apex:inputField value="{!RContactLookup.SDOC__Contact__c}" id="RConLU">
                <apex:actionSupport event="onchange" action="{!setRLookup}" reRender="recPanel" status="r1"/>
                <apex:actionStatus id="r1">
                    <apex:facet name="start">
                        <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />
                    </apex:facet>
                </apex:actionStatus>                
            </apex:inputField>
        </apex:pageBlockSectionItem>
          <apex:pageBlockSectionItem >
                <apex:outputLabel value="Contact Quick Pick" for="RConQP"/>
                <apex:panelGroup >
                <apex:selectList value="{!selectedRecordContact}" size="1" id="RConQP" style="font-family:'Courier'">
                    <apex:actionSupport event="onchange" action="{!syncRLookup}" reRender="recPanel" status="r2"/>
                    <apex:selectOptions value="{!contactItems}"/>
                </apex:selectList>
                <apex:actionStatus id="r2">
                    <apex:facet name="start">
                        <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />
                    </apex:facet>
                </apex:actionStatus>            
            </apex:panelGroup>
        </apex:pageBlockSectionItem>
                <apex:pageBlockSectionItem >
            <apex:outputLabel value="Contact Title" for="ct"/>
            <apex:outputText value="{!recordContact.Title}" id="ct"/>
        </apex:pageBlockSectionItem> 
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Contact Tel No" for="ct"/>
            <apex:outputText value="{!recordContact.Phone}" id="ct"/>
        </apex:pageBlockSectionItem>                    
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Contact Email" for="ce"/>
            <apex:outputText value="{!recordContact.Email}" id="ce"/> 
        </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    </td>
    </tr>
</table>

<table width="100%">
    <tr>
<td>
    <br></br>
    <apex:pageBlockSection id="billPanel" title="Billing Information" rendered="{!showBillingContact}" columns="1" collapsible="false">
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Account Name" for="ban"/>
            <apex:outputText value="{!acct.name}" id="ban"/> 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Account Billing Address" for="ba"/>
            <apex:outputText value="{!acct.billingStreet}" id="ba"/> 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <apex:outputLabel value=" " for="bcsz"/>
            <apex:outputText value="{!acct.billingCity + ','+ acct.billingState + ' ' + acct.billingPostalCode}" id="bcsz"/> 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="" for="bc"/>
            <apex:outputText value="{!acct.billingCountry}" id="bc"/> 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem rendered="{!NOT(hideContactLookup)}">
            <apex:outputLabel value="Contact" for="BConLU"/>
            <apex:inputField value="{!BContactLookup.SDOC__Contact__c}" id="BConLU">
                <apex:actionSupport event="onchange" action="{!setBLookup}" reRender="billPanel" status="b1"/>
                <apex:actionStatus id="b1">
                    <apex:facet name="start">
                        <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />
                    </apex:facet>
                </apex:actionStatus>                
            </apex:inputField>
        </apex:pageBlockSectionItem>
          <apex:pageBlockSectionItem >
                <apex:outputLabel value="Contact Quick Pick" for="BConQP"/>
                <apex:panelGroup >
                <apex:selectList value="{!selectedBillingContact}" size="1" id="BConQP" style="font-family:'Courier'">
                    <apex:actionSupport event="onchange" action="{!syncBLookup}" reRender="billPanel" status="b2"/>
                    <apex:selectOptions value="{!contactItems}"/>
                </apex:selectList>
                <apex:actionStatus id="b2">
                    <apex:facet name="start">
                        <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />
                    </apex:facet>
                </apex:actionStatus>            
            </apex:panelGroup>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Contact Tel No" for="bct"/>
            <apex:outputText value="{!billingContact.Phone}" id="bct"/> 
        </apex:pageBlockSectionItem>                    
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Contact Email" for="bce"/>
            <apex:outputText value="{!billingContact.Email}" id="bce"/> 
        </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
</td>    
 <td>
    <br></br>
    <apex:pageBlockSection id="shipPanel" title="Shipping Information" rendered="{!showShippingContact}" columns="1" collapsible="false">
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Account Name" for="san"/>
            <apex:outputText value="{!acct.name}" id="san"/> 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Account Shipping Address" for="sa"/>
            <apex:outputText value="{!acct.ShippingStreet}" id="sa"/> 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <apex:outputLabel value=" " for="scsz"/>
            <apex:outputText value="{!acct.ShippingCity + ','+ acct.ShippingState + ' ' + acct.ShippingPostalCode}" id="scsz"/> 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="" for="sc"/>
            <apex:outputText value="{!acct.ShippingCountry}" id="sc"/> 
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem rendered="{!NOT(hideContactLookup)}">
            <apex:outputLabel value="Contact" for="SConLU"/>
            <apex:inputField value="{!SContactLookup.SDOC__Contact__c}" id="SConLU">
                <apex:actionSupport event="onchange" action="{!setSLookup}" reRender="shipPanel" status="s1"/>
                <apex:actionStatus id="s1">
                    <apex:facet name="start">
                        <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />
                    </apex:facet>
                </apex:actionStatus>                
            </apex:inputField>
        </apex:pageBlockSectionItem>
          <apex:pageBlockSectionItem >
                <apex:outputLabel value="Contact Quick Pick" for="SConQP"/>
                <apex:panelGroup >
                <apex:selectList value="{!selectedShippingContact}" size="1" id="SConQP" style="font-family:'Courier'">
                    <apex:actionSupport event="onchange" action="{!syncSLookup}" reRender="shipPanel" status="s2"/>
                    <apex:selectOptions value="{!contactItems}"/>
                </apex:selectList>
                <apex:actionStatus id="s2">
                    <apex:facet name="start">
                        <img src="{!URLFOR($Resource.SDoc,'spinner.gif')}" />
                    </apex:facet>
                </apex:actionStatus>            
            </apex:panelGroup>
        </apex:pageBlockSectionItem>
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Contact Tel No" for="sct"/>
            <apex:outputText value="{!shippingContact.Phone}" id="sct"/> 
        </apex:pageBlockSectionItem>                    
        <apex:pageBlockSectionItem >
            <apex:outputLabel value="Contact Email" for="sce"/>
            <apex:outputText value="{!shippingContact.Email}" id="sce"/> 
        </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
</td>

    </tr>
</table>
<br></br> 
</apex:outputPanel>

<apex:outputPanel id="task-create-alter">
  <apex:repeat value="{!SDDocs}" var="templateWrapper">
    <apex:outputPanel rendered="{!templateWrapper.taskCreate && templateWrapper.t.SDOC__Task_Details_Override__c}">
      <apex:pageBlock title="Edit new Task ({!templateWrapper.t.Name})">
        <apex:pageBlockSection columns="2">
          <apex:pageBlockSectionItem >
            <apex:outputLabel value="Subject" />
            <apex:inputText value="{!templateWrapper.taskSubject}" />
          </apex:pageBlockSectionItem>
          <apex:pageBlockSectionItem >
            <apex:outputLabel value="Status" />
            <apex:inputText value="{!templateWrapper.taskStatus}" />
          </apex:pageBlockSectionItem>
          <apex:pageBlockSectionItem >
            <apex:outputLabel value="Days until Salesforce Task is due" />
            <apex:inputText value="{!templateWrapper.taskDueAddDays}" />
          </apex:pageBlockSectionItem>
          <apex:pageBlockSectionItem >
            <apex:outputLabel value="Count business days only" />
            <apex:inputCheckbox value="{!templateWrapper.addBusinessDaysOnly}" />
          </apex:pageBlockSectionItem>
        </apex:pageBlockSection>
      </apex:pageBlock>
    </apex:outputPanel>
  </apex:repeat>
</apex:outputPanel>

<!-- ================================ Start User Choice Feature ================================ -->
<apex:outputPanel id="user-choice-section">
  <style type="text/css">
    .prompts { font-weight:bold; color: #1E824C; }
  </style>
  <br />
  <apex:outputPanel rendered="{!requiredUserChoicesPresent}">
    <span style="color:red; font-size: 20px;">*&nbsp;</span><em>= Required Field</em>
  </apex:outputPanel>
  <apex:pageBlockTable rendered="{!ucUserChoices.size > 0}" value="{!ucUserChoices}" var="userChoices">
    <apex:column rendered="{!NOT(userChoices.isEmpty)}">
      <apex:outputText value="{!pleaseFillInFieldsMap[userChoices.templateId]}"
      styleClass="prompts" style="font-size: 16px;" />
      <br />
      <apex:pageBlockTable value="{!userChoices.ucUserChoices}" var="userChoice" columns="2">
        <apex:column >
          <style type="text/css">
            .hidden-table-cell {width: 500px;}
          </style>
          <table>
            <tr>
              <td class="hidden-table-cell"
              style="vertical-align:top; padding-right: 20px; border-right: 1px solid #EBEBEB; border-bottom: 0px;">
                <br />
                <apex:outputPanel rendered="{!userChoice.required}" style="color:red; font-size: 20px;">
                  *&nbsp;
                </apex:outputPanel>
                <apex:outputPanel rendered="{!(userChoice.choiceType == UC_CHECKBOX_CHOICE) && (userChoice.ucCheckboxChoices.collapsableOptions)}" style="padding:0px !important;">
                  <style type="text/css">
                    .bPageBlock {
                      background: none !important;
                      border: none !important;
                      margin: 0px !important;
                      padding: none !important;
                      width: 100% !important;
                      text-align: left !important;
                    }

                    .pbSubheader {
                      margin: 0px !important;
                      align: left !important;
                    }

                    .pbSubsection {
                      width: 100% !important;
                      margin: 0px !important;
                      text-align: left !important;
                      padding: none !important;
                    }

                    .pbBody {
                      width: 100% !important;
                      margin: 0px !important;
                      align: left !important;
                    }

                    .data2Col {
                      align: left !important;
                      padding: 0px !important;
                      margin: 0px !important;
                    }
                  </style>
                  <apex:pageBlock >
                    <!-- UserChoiceCheckboxes -->
                    <apex:pageBlockSection id="collapse" collapsible="true" title="{!userChoice.prompt}" columns="1">
                      <apex:outputPanel style="display: none;" rendered="{!userChoice.ucCheckboxChoices.closedAsDefault}">
                          <script> 
                            twistSection(document.getElementById('img_{!$Component.collapse}')); 
                          </script>
                      </apex:outputPanel>
                      <apex:outputText styleClass="max-num-cbc-selections-{!userChoices.templateId}-{!userChoice.userChoiceNum}"
                      value="{!userChoice.ucCheckboxChoices.maxNumSelections}"
                      style="display:none;" />
                      <apex:pageBlockTable var="cbc" value="{!userChoice.ucCheckboxChoices.ucCheckboxChoices}">
                        <apex:column >
                            <apex:inputCheckbox value="{!cbc.checked}" 
                            styleClass="user-choice-checkbox-{!userChoices.templateId}-{!userChoice.userChoiceNum}" onchange="updateCheckboxes('{!userChoices.templateId}');" />
                            <apex:outputText value="{!cbc.displayText}" escape="false" />
                        </apex:column>
                      </apex:pageBlockTable>

                    </apex:pageBlockSection>
                    <!-- End UserChoiceCheckboxes -->
                  </apex:pageBlock>  
                </apex:outputPanel>

                <apex:outputPanel rendered="{!(userChoice.choiceType != UC_CHECKBOX_CHOICE) || (NOT(userChoice.ucCheckboxChoices.collapsableOptions))}">
                  <apex:outputText value="{!userChoice.displayPrompt}" escape="false"
                  styleClass="prompts" style="font-size: 12px;" />
                  <!-- UserChoiceCheckboxes -->
                  <apex:outputPanel rendered="{!userChoice.choiceType == UC_CHECKBOX_CHOICE}">
                        <apex:outputText styleClass="max-num-cbc-selections-{!userChoices.templateId}-{!userChoice.userChoiceNum}"
                        value="{!userChoice.ucCheckboxChoices.maxNumSelections}"
                        style="display:none;" />
                        <apex:pageBlockTable var="cbc" value="{!userChoice.ucCheckboxChoices.ucCheckboxChoices}">
                          <apex:column >
                              <apex:inputCheckbox value="{!cbc.checked}" 
                              styleClass="user-choice-checkbox-{!userChoices.templateId}-{!userChoice.userChoiceNum}" onchange="updateCheckboxes('{!userChoices.templateId}');" />
                              <apex:outputText value="{!cbc.displayText}" escape="false" />
                          </apex:column>
                        </apex:pageBlockTable>
                  </apex:outputPanel>
                  <!-- End UserChoiceCheckboxes -->
                </apex:outputPanel>

                <!-- Start Runtime Prompts Related Lists -->
                <apex:outputPanel rendered="{!userChoice.choiceType == UC_RELATED_LIST}" id="here">
                  <apex:pageBlockTable var="row" value="{!userChoice.ucRelatedListOptions.relatedListRows}">
                    <apex:column >
                      <apex:inputCheckbox value="{!row.checked}"/>
                    </apex:column>
                    <apex:repeat value="{!userChoice.ucRelatedListOptions.columnNums}" var="col"> 
                      <apex:column value="{!row.relatedListRow[col]}"> 
                        <apex:facet name="header">{!userChoice.ucRelatedListOptions.columnHeaders[col]}</apex:facet>
                      </apex:column>
                    </apex:repeat> 
                  </apex:pageBlockTable>
                </apex:outputPanel>
                <!-- End Runtime Prompts Related Lists -->
                

                <!-- UserChoiceTextFields -->
                <apex:outputPanel rendered="{!userChoice.choiceType == UC_INPUT_TEXT}">
                  <!--apex:pageBlockTable var="tf" value="{!userChoice.textFieldListWrapper.textFieldList}">
                    <apex:column>
                      <apex:outputText value="{!tf.label}" />
                      <apex:inputText value="{!tf.inputText}" />
                    </apex:column>
                  </apex:pageBlockTable-->
                  <br />
                  <apex:outputText value="{!userChoice.textFieldListWrapper.textFieldList[0].label}" />
                  <!-- Text inputs without preformatting -->
                  <apex:outputPanel rendered="{!LEN(userChoice.textFieldListWrapper.textFieldList[0].preformatting) == 0}">
                    <apex:inputText value="{!userChoice.textFieldListWrapper.textFieldList[0].inputText}" 
                    rendered="{!NOT(userChoice.textFieldListWrapper.textFieldList[0].isTextArea)}"
                    style="width: 350px" />
                    <apex:inputTextArea value="{!userChoice.textFieldListWrapper.textFieldList[0].inputText}"
                    rendered="{!userChoice.textFieldListWrapper.textFieldList[0].isTextArea}"
                    style="width: 350px" />
                  </apex:outputPanel>
                  <!-- Text inputs with preformatting -->
                  <apex:outputPanel rendered="{!LEN(userChoice.textFieldListWrapper.textFieldList[0].preformatting) > 0}">
                    <apex:inputText value="{!userChoice.textFieldListWrapper.textFieldList[0].inputText}" 
                    rendered="{!NOT(userChoice.textFieldListWrapper.textFieldList[0].isTextArea)}"
                    styleClass="user-choice-text-input-{!userChoice.userChoiceNum}" 
                    onkeyup="checkPreformattingText(event, '{!userChoice.userChoiceNum}', '{!userChoice.textFieldListWrapper.textFieldList[0].preformatting}');"
                    html-placeholder="{!userChoice.textFieldListWrapper.textFieldList[0].preformatting}"
                    style="width: 350px" />
                    <apex:inputTextArea value="{!userChoice.textFieldListWrapper.textFieldList[0].inputText}"
                    rendered="{!userChoice.textFieldListWrapper.textFieldList[0].isTextArea}"
                    styleClass="user-choice-text-area-input-{!userChoice.userChoiceNum}" 
                    onkeyup="checkPreformattingTextArea(event, '{!userChoice.userChoiceNum}', '{!userChoice.textFieldListWrapper.textFieldList[0].preformatting}');"
                    html-placeholder="{!userChoice.textFieldListWrapper.textFieldList[0].preformatting}"
                    style="width: 350px" />
                    <br />
                    <apex:outputText styleClass="preformatting-error-message-{!userChoice.userChoiceNum}" 
                    value="{!tm['Formatting of # requires input of a 0-9 digit']}" 
                    style="color: red; visibility: hidden;" />
                  </apex:outputPanel>
                </apex:outputPanel>
                <!-- End UserChoiceTextFields -->

                <!-- InputDateWrapper -->
                <apex:outputPanel rendered="{!userChoice.choiceType == UC_INPUT_DATE}">
                  <br />
                  <apex:outputText value="{!userChoice.inputDateWrp.label}" />
                  <apex:input type="date" value="{!userChoice.inputDateWrp.inputDate}" />
                </apex:outputPanel>
                <!-- End InputDateWrapper -->

                <!-- Lookup Fields -->
                <!-- http://www.laceysnr.com/generic-input-with-dynamic-visualforce/ -->
                <!--apex:inputField rendered="{!userChoice.lookupObject.rendered}" 
                value="{!userChoice.lookupObject.lookupBaseObj[userChoice.lookupObject.lookupFieldName]}"/ -->
                <!-- End Lookup Fields -->

              </td>
              <td class="hidden-table-cell"
              style="vertical-align:top; padding-left: 20px; border-bottom: 0px;">
                <br />
                <apex:outputPanel rendered="{!userChoice.defaultValue != null}">
                  <apex:outputText value="If you do not provide a value, 
                  the following default value will be used:"
                  styleClass="prompts" />
                  <br />
                  <apex:outputText value="{!userChoice.displayDefaultValue}" escape="false" />
                </apex:outputPanel>
              </td>
            </tr>
          </table>
          <script type="text/javascript">
            // We want to run an initial update on all checkbox fields
            // to account for default fields in Min/Max limits
            updateCheckboxes('{!userChoices.templateId}');
          </script>
        </apex:column>
      </apex:pageBlockTable>
      <br />
      <br />
    </apex:column>
  </apex:pageBlockTable>
  <img src="{!URLFOR($Resource.SDoc,'checkbox_arrow.png')}" />
  <apex:commandButton action="{!step3}" value="{!btnTxtStep3}" styleClass="btn"
    rendered="{!NOT(lightningNav)}" />
  <apex:commandButton action="{!step3}" value="{!btnTxtStep3}" styleClass="btn"
    rendered="{!lightningNav}" reRender="lightning_redirect_panel" />
</apex:outputPanel>
<!-- ================================ End User Choice Feature ================================ -->

<apex:outputPanel rendered="{!debugMode}">
<!--
<apex:panelGroup id="panelNA" rendered="{!NOT(pickContacts)}">
The document(s) you selected do not require any additional information.<br></br> 
Click the "Generate Doc" button when you are ready to generate your documents.
</apex:panelGroup>
<br></br>
<br></br>
<br></br>
<br></br>
<br></br> 
<br></br>
-->

<apex:panelGroup id="panelAI" >
                    <table cellspacing="0" cellpadding="0" class="style1" width="35%">
                        <tr valign="bottom" align="Left" class="headerRow1">
                            <td width="100%">Data Merge Details</td>
                       </tr> 
                    </table>
                    <apex:dataTable value="{!fieldsForCapture}" var="f" headerClass="headerRow1" rowClasses="dataRowOdd, dataRowEven" styleClass="style1" width="100%">
                                <apex:column ><apex:facet name="header"><b>Description</b></apex:facet>
                                {!f.Descr}</apex:column>
                                <apex:column ><apex:facet name="header"><b>Value</b></apex:facet>
                                {!f.Value}</apex:column>
                     </apex:dataTable>
</apex:panelGroup>
<br/><br/>
</apex:outputPanel>
</apex:pageBlock>
</apex:form>
</apex:outputPanel>
</apex:outputPanel>

</apex:page>